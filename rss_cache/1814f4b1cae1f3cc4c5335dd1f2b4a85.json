[
  {
    "title": "Tune in on September 3: recapping the latest from Made by Google and more in our summer episode of The Android Show",
    "link": "https://android-developers.googleblog.com/2025/08/the-android-show-summer-teaser.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhj_lWSEex4s3wDhNjje5AX3rSXQKPabOhyphenhyphenRLQ483G94PyKcKEf085AnlOnxo8ciYkQ-lgEaQ5fXlDnmg7xqrryubMN4fgSx1g-BM90BZfQcmCepGQN46XrL6jy2WTv4dDlVd4WParl5p6e_X5tWGDpXQB9i5nEj3C1cvL-tIsjsecqxHfMToUAYcEyHnM/s1600/TAS-meta.gif\" style=\"display: none;\" />\n\n<em>Posted by Christopher Katsaros – Senior Product Marketing Manager</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjtITihc8Cr5Ujf5P8Xc4o6ziiUjJOVCP8ikZTozWft1eNh1TaXJB4HnIeqkbzKVSmX-XwM7UJjm6nmjcmnyLp_A1oA-1YNE3YnS-mM8r8vJpc6NwSJn-mJtMR3r8qx9yTAks7KT2AWiUvZNdJkbLjzS2aEtkeUqnIOVJdU2WZydMd_rb_hY18c8hxNPPA/s1600/TAS-banner.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjtITihc8Cr5Ujf5P8Xc4o6ziiUjJOVCP8ikZTozWft1eNh1TaXJB4HnIeqkbzKVSmX-XwM7UJjm6nmjcmnyLp_A1oA-1YNE3YnS-mM8r8vJpc6NwSJn-mJtMR3r8qx9yTAks7KT2AWiUvZNdJkbLjzS2aEtkeUqnIOVJdU2WZydMd_rb_hY18c8hxNPPA/s1600/TAS-banner.png\" /></a>\n\n<div><br /></div>\n\n<p>In just a few days, on Wednesday September 3 at 11AM PT, we’ll be dropping our summer episode of <b>#TheAndroidShow</b>, on <a href=\"https://youtube.com/live/zdpSePeuB5E\" target=\"_blank\">YouTube</a> and on <a href=\"http://developer.android.com/events/show\" target=\"_blank\">developer.android.com</a>! In this quarterly show, we’ll be unpacking all of the goodies coming out of this month’s Made by Google event and what you as Android developers need to know!</p>\n\n\n\n<p>With the new Pixel Watch 4 running Wear OS 6, <a href=\"https://android-developers.googleblog.com/2025/08/build-your-app-to-meet-users-on-newest-pixel-devices.html\" target=\"_blank\"> we’ll show you how to get building</a> for the wrist. And with the latest foldable from Google, the Pixel 10 Pro Fold, we’ll show how you can leverage out of the box APIs and multi-window experiences to make your apps adaptive for this new form factor. Plus, we’ll be unpacking a set of new features for Gemini in Android Studio to help you be even more productive.</p>\n\n<p><a href=\"https://android-developers.googleblog.com/search?q=%23TheAndroidShow\" target=\"_blank\">#TheAndroidShow</a> is your conversation with the Android developer community, this time hosted by <a href=\"https://annycedavis.com/about-me\" target=\"_blank\">Annyce Davis</a> and <a href=\"https://www.linkedin.com/in/johnzoeller/\" target=\"_blank\">John Zoeller</a>. You'll hear the latest from the developers and engineers who build Android. Don’t forget to tune in live on September 3 at 10AM PT, <a href=\"https://youtube.com/live/zdpSePeuB5E\" target=\"_blank\">live on YouTube</a> and on <a href=\"http://developer.android.com/events/show\" target=\"_blank\">developer.android.com/events/show</a>!</p>",
    "published": "2025-08-28T11:30:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "The evolution of Wear OS authentication",
    "link": "https://android-developers.googleblog.com/2025/08/the-evolution-of-wear-os-authentication.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieK5NxefEs0wwVBn6fxvkV9nHNxMkU1536dzGGFiIgl5NkaZh5H6yADhtcSG-ZGi8Nu8xpr51qLpoip7wYGgDXobv1j_CMhtURHTrhhh7h3BHDNYh9bOtBW4DhnbizuCnsbIFQPJ9997yRA4ahN9-wHvHe8HUKMDd9puNT_E7vWcNbqkRfalZhXhFgF2s/s1600/credential-manager-wear-os%20%282%29.png\" style=\"display: none;\" />\n\n<em>Posted by John Zoeller – Developer Relations Engineer</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhixN5tFhfrjYWSjcqKvsvrWf-zTFdROS_piAYDWzHHJccNn9zsqNsZbVfSKXVA-LUo4SlE7Cl0NZeR4hls3bzvkK8GDeO0kISiAsjSaGahaAZ9NUMA0vj8kacuSxAxgeqLzszBUcZije6vposhRkREnhmjoxe8GiBfEH9Rt-8H8BnSttUOT21Xw1popRQ/s1600/credential-manager-wear-os%20%281%29.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhixN5tFhfrjYWSjcqKvsvrWf-zTFdROS_piAYDWzHHJccNn9zsqNsZbVfSKXVA-LUo4SlE7Cl0NZeR4hls3bzvkK8GDeO0kISiAsjSaGahaAZ9NUMA0vj8kacuSxAxgeqLzszBUcZije6vposhRkREnhmjoxe8GiBfEH9Rt-8H8BnSttUOT21Xw1popRQ/s1600/credential-manager-wear-os%20%281%29.png\" /></a>\n\n<blockquote><i>This post is part of <a href=\"https://android-developers.googleblog.com/2025/08/spotlight-week-wear-os.html\" target=\"_blank\">Wear OS Spotlight Week</a>. Today, we're focusing on <b>implementing Credential Manager on Wear OS</b>, aiming to streamline the authentication experience.</i></blockquote>\n\n<p>For all software developers, crafting a fast and secure authentication flow is paramount, and this is equally important on Wear OS.</p>\n\n<p>The traditional Wear OS methods require users to have their phone nearby to complete authentication, often with a separate mobile flow or 2-factor auth code.</p>\n\n<p><a href=\"https://developer.android.com/identity/sign-in/credential-manager\" target=\"_blank\">Credential Manager</a>'s arrival simplifies this process, allowing for authentication directly from a user's watch with no need for a nearby phone.</p>\n\n<p>As a unified API, Credential Manager enables you to reuse your mobile app’s code on Wear OS, streamlining development across form factors. With a single tap, users can authenticate with passwords, federated identities like Sign in with Google, or <b><a href=\"https://developer.android.com/courses/pathways/passkeys\" target=\"_blank\">passkeys</a></b>, the new industry standard for security.</p>\n\n<div style=\"text-align: center;\"><img alt=\"Credential Manager on a wearable device providing the security of passkey authentication\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEif176UuhH2g7k1PSDWiJ8T9vqzmIBE3gzu_NSLalpuOvyz0m0Uzt2e5bxVr7BX4tsxiIEovUREPYl9iOwOwsCfRSuO1Dh5KVyj9vFqug-04QHtWLvyww8j29uyExAmbXNdPwZn_j9yZ-iQ3KkAki45Nhqo6VXtxf-PA9K_GUJTy-vXMHd-5AADywl2by4/s1600/credential-manager-passkey-authentication-wear-os.png\" width=\"25%\" /></div><center><em>Credential Manager provides the security of passkey authentication with a single tap</em></center>\n\n<h2><span style=\"font-size: x-large;\">The power of passkeys</span></h2>\n\n<p>Passkeys are built on the principle of asymmetric encryption. During creation, a system authenticator generates a unique, mathematically linked pair of keys: a public key that is securely stored online with the service, and a private key that remains exclusively on the user's device.</p>\n\n<p>When signing in, the device uses the private key to cryptographically prove to the service that it possesses the key.</p>\n\n<p>This process is highly secure because the private key never leaves the device during authorization (only during syncs from credential providers) and can only be used with the user's explicit permission. This makes passkeys resistant to server breaches, as a breach could only ever expose the public half of the key pair. Additionally, since there is no passphrase to steal, passkeys are virtually phishing-proof.</p>\n  \n<p id=\"designing-authentication-credential-manager\">The user experience of passkeys is seamless: to log in, a user confirms their presence with their device's lock (e.g., biometric credential or PIN), and they are signed in. This eliminates the need to remember complex passphrases and provides a faster, more secure method of authentication that works seamlessly across devices.</p>\n\n<div style=\"text-align: center;\"><img alt=\"flow chart illustrating movement of secured information between the user's device and the app server\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhT2DU2NoahA6Jbif_PM-6KTt9ag4WK14EM5YuDCTcv6nAdBk6_i96NL3rIELfGB_SDV-eyG5pHJVw9zdc09YtLGCw5K1crgAXEY67rbPMjS2rWVOTTib36DP0q1sTFbzmknOG5oaEBY4Inz_m4FMFXQWggAYctBmHqAStXA7R3FhSvICltt_vIPCr9OA4/s1600/passkey-authentication-flow-chart-wear-os.png\" width=\"100%\" /></div><center><em>Passkeys are cryptographically linked, and accessed securely from user devices</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">Designing authentication with Credential Manager</span></h2>\n\n<p>Credential Manager should be the base of a Wear app’s authentication flow. Developers should decide which of its built-in methods to implement based on what is implemented in their mobile experiences, and based on the variety of authentication methods their users need.</p>\n\n<p>Passkeys are the preferred built-in solution due to their inherent security and simplicity, but the other built-in options Credential Manager provides can also be implemented. Passwords are valuable because of their familiarity to users, and federated identities like Sign in with Google provide users with the comfort of a trusted provider.</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"Credential Manager on a wearable device providing the security of passkeys, passwords, and sign in with google\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiSoQ9qqTsmM9FIJ0G5U6eG7xPXv0d14s6y3A4hBrCD-qGTzS1J2EUusAMuTu-i12Jjko5n_yBnyTo5bPDZUe_DX9PWRYZbWjHfRz7mswslwt7lXe4wufAB0F4MEd80SxErf0m4peLbI0TfiPim-epypfZCsuRAhP1_KVOmG74g6RqZmIsMH3pqmXU5rpg/s1600/credential-manager-passkeys-passwords-sign-in-with-google-wear-os.png\" width=\"25%\" /></div><center><em>Passkeys, passwords, and sign in with google can be provided by Credential Manager</em></center><br />\n\n<p>Developers should maintain at least one of their existing authentication options as a backup as they transition their users to Credential Manager. If Credential Manager is dismissed by a user, or if all of its methods fail, or if credentials are not available, developers can present their backup options.</p>\n\n<p>The <a href=\"https://developer.android.com/training/wearables/apps/auth-wear#fallback-methods\" target=\"_blank\">Wear Authentication developer guide</a> includes details on supported Wear OS backup authentication options. These include solutions like OAuth 2.0, which has traditionally been a popular choice on Wear OS; and data layer token sharing, which can be used to automatically authenticate users at app launch time if their phone is nearby to sync a signed in account.</p>\n\n<p>Read the full <a href=\"https://developer.android.com/design/ui/wear/guides/m2-5/behaviors-and-patterns/sign-in#correct-prompting\" target=\"_blank\">Wear sign-in design guidance</a> to learn about all the best practices for designing your authentication flow, including our special guidance around data layer token sharing.</p>\n\n<div style=\"text-align: center;\"><img alt=\"authentication flow on the left with dismiss highlighted, and sign in flow on the right\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgtIaDmiHhL9-3bQxi5WlLVoPvIWpJ5fXf7tyzgsDSxfA9KfexQPJQ2eqW2yIWJScumgvUwlsweaBDkT273h3T6YGFkklYZ_UX5uzRwwEoQoCVNt8WXTBR1aIe2lSuY5TagaU1vSVPTBTfdSKNyBU4WlWOcV3VRKbGaOjKCiP5yGSolgOgsW73BxEfWlgk/s1600/credential-manager-dismiss-wear-os.png\" width=\"100%\" /></div><center><em>Tapping dismiss should bring up your backup authentication methods</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">Implementing Credential Manager on Wear OS</span></h2>\n\n<h3><span style=\"font-size: large;\">Basic GetCredential setup</span></h3>\n\n<p>At its core, Credential Manager consolidates multiple authentication methods into a single, unified API call: <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/androidx/credentials/CredentialManager#getCredential%28android.content.Context,androidx.credentials.PrepareGetCredentialResponse.PendingGetCredentialHandle%29\" target=\"_blank\">getCredential</a></span>. By configuring a <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/androidx/credentials/GetCredentialRequest\" target=\"_blank\">GetCredentialRequest</a></span> with your authentication options, you can use the response to validate a user's identity with your app's server that contains the credentials, like so:</p>\n\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">request</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>GetCredentialRequest(getCredentialOptions())\n<span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">getCredentialResponse</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>credentialManager.<span style=\"color: #687822;\">getCredential</span>(activity,<span style=\"color: #bbbbbb;\"> </span>request)\n\nlogin(getCredentialResponse.<span style=\"color: #687822;\">credential</span>)\n</pre></div>\n\n<h3><span style=\"font-size: large;\">Sync Credentials with Digital Asset Links</span></h3>\n\n<p>For a truly seamless experience, a user's credentials must sync effortlessly from their other devices to their watch, since it is currently not possible to create credentials on Wear OS.</p>\n\n<p>To enable this, you must add an entry for Wear OS in your <b><a href=\"https://developer.android.com/identity/sign-in/credential-manager#add-support-dal\" target=\"_blank\">Digital Asset Links</a></b> to associate your Wear OS app with other versions of your app. Be sure to precisely fill out the asset link entry, including your app's <span style=\"color: #0d904f; font-family: courier;\">applicationId</span> and the SHA-256 cryptographic hash from your application’s digital signature. You can test them out with our <a href=\"https://developer.android.com/training/app-links/verify-android-applinks\" target=\"_blank\">app link verification guide</a>.</p>\n\n<h3><span style=\"font-size: large;\">Furnishing <span style=\"color: #0d904f; font-family: courier;\">getCredential</span> with built-in credentials</span></h3>\n\n<p>To allow users to sign in with Credential Manager, provide <span style=\"color: #0d904f; font-family: courier;\">getCredential</span> with options for the three built-in authentication types: passkeys, passwords, and federated identities like Sign in With Google.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #3d7b7b; font-style: italic;\">// Adding options is part of creating the credential request</span>\nGetCredentialRequest(getCredentialOptions()))\n\n<span style=\"color: #3d7b7b; font-style: italic;\">// Furnish list of CredentialOptions for the request</span>\n<span style=\"color: green; font-weight: bold;\">suspend</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">getCredentialOptions</span>():<span style=\"color: #bbbbbb;\"> </span>List<span style=\"color: #666666;\">&lt;</span>CredentialOption<span style=\"color: #666666;\">&gt;</span><span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">return</span><span style=\"color: #bbbbbb;\"> </span>listOf(\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// Passkey: Furnish a GetPublicKeyCredentialOption with public key</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// data from your authentication server</span>\n<span style=\"color: #bbbbbb;\">    </span>GetPublicKeyCredentialOption(authServer.<span style=\"color: #687822;\">getPublicKeyRequestOptions</span>()),\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// Password: Add the provided GetPasswordOption type in your list</span>\n<span style=\"color: #bbbbbb;\">    </span>GetPasswordOption(),\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// Federated Identity: Add your desired option type (GetGoogleIdOption, below)</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// to orchestrate a token exchange with the federated identity server.</span>\n<span style=\"color: #bbbbbb;\">    </span>GetGoogleIdOption.<span style=\"color: #687822;\">Builder</span>().<span style=\"color: #687822;\">setServerClientId</span>(SERVER_CLIENT_ID).<span style=\"color: #687822;\">build</span>(),\n<span style=\"color: #bbbbbb;\">  </span>)\n}\n</pre></div>\n\n\n<p>When <span style=\"color: #0d904f; font-family: courier;\">getCredential</span> is called, Credential Manager will use the options developers provide to present users with a UI to choose how they want to log in.</p>\n\n<div style=\"text-align: center;\"><img alt=\"Credential Selection screen display on a wearable device\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxMTME6N8xaTBicW_ZuFzVeZj-uzVCkJM6QiVwKROJs5gMvBQKtYN6Tsz9Wf_OyaqubXA9PWWp2EfYGxYe2hMw59sXzCCSNRzJwNoUjV1IQrXb8c_yy_ldnawRbu50X2_lzgMZ-BW5j-2fdOy3FotEXu_dgPiiEurn76HmGxEsTCMtvowzReqVq0cTSVM/s1600/credential-selection-screen-wear-os.png\" width=\"25%\" /></div><center><em>The Credential Selection Screen displays developer-provided options</em></center>\n\n<h3><span style=\"font-size: large;\">Handling built-in Credential types</span></h3>\n\n<p>After a user selects their desired credential in the Credential Manager UI, use the result of <span style=\"color: #0d904f; font-family: courier;\">getCredential</span> (which contains the selected credential) to route to your authentication handlers.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #3d7b7b; font-style: italic;\">// getCredential returns the selected credential</span>\nlogin(getCredentialResponse.<span style=\"color: #687822;\">credential</span>)\n\n<span style=\"color: #3d7b7b; font-style: italic;\">// Route to your credential handling functions to login</span>\n<span style=\"color: green; font-weight: bold;\">suspend</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">login</span>(credential:<span style=\"color: #bbbbbb;\"> </span>Credential):<span style=\"color: #bbbbbb;\"> </span>LoginResult<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">when</span><span style=\"color: #bbbbbb;\"> </span>(credential)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">is</span><span style=\"color: #bbbbbb;\"> </span>PublicKeyCredential<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-&gt;</span><span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">      </span><span style=\"color: green; font-weight: bold;\">return</span><span style=\"color: #bbbbbb;\"> </span>authHandler.<span style=\"color: #687822;\">loginWithPasskey</span>(credential.<span style=\"color: #687822;\">authenticationResponseJson</span>)\n<span style=\"color: #bbbbbb;\">    </span>}\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">is</span><span style=\"color: #bbbbbb;\"> </span>PasswordCredential<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-&gt;</span><span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">      </span><span style=\"color: green; font-weight: bold;\">return</span><span style=\"color: #bbbbbb;\"> </span>authHandler.<span style=\"color: #687822;\">loginWithPassword</span>(credential.<span style=\"color: #687822;\">id</span>,<span style=\"color: #bbbbbb;\"> </span>credential.<span style=\"color: #687822;\">password</span>)\n<span style=\"color: #bbbbbb;\">    </span>}\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">is</span><span style=\"color: #bbbbbb;\"> </span>CustomCredential<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-&gt;</span><span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">      </span><span style=\"color: green; font-weight: bold;\">return</span><span style=\"color: #bbbbbb;\"> </span>authHandler.<span style=\"color: #687822;\">loginWithCustomCredential</span>(\n<span style=\"color: #bbbbbb;\">          </span>credential.<span style=\"color: #687822;\">type</span>,<span style=\"color: #bbbbbb;\"> </span>credential.<span style=\"color: #687822;\">data</span>)\n<span style=\"color: #bbbbbb;\">    </span>}\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// ‘else’ case, etc…</span>\n</pre></div>\n\n\n<p>The handling logic for each of the above <span style=\"color: #0d904f; font-family: courier;\">loginWith’x’</span> methods is slightly different, although they all set up network calls to dedicated authentication endpoints. Below are simplified versions of these methods which demonstrate network calls to authenticate users based on their selected method.</p>\n\n<p><b>Passkeys</b> require the signed passkey JSON data. Your server will use this data to cryptographically verify the user.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">suspend</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">loginWithPasskey</span>(passkeyResponseJSON:<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #b00040;\">String</span>):<span style=\"color: #bbbbbb;\"> </span>LoginResult<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">validatedPasskey</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>httpClient.<span style=\"color: #687822;\">post</span>(\n<span style=\"color: #bbbbbb;\">      </span><span style=\"color: #ba2121;\">\"myendpoint/passkey\"</span>,<span style=\"color: #bbbbbb;\"> </span>passkeyResponseJSON,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #3d7b7b; font-style: italic;\">/*other args*/</span>)\n\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">return</span><span style=\"color: #bbbbbb;\"> </span>LoginResult(validatedPasskey)\n}\n</pre></div>\n\n\n<p><b>Passwords</b> require network logic to validate the username and password, our example uses subsequent calls to validate the username first. Your backend will validate these against its user database.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">suspend</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">loginWithPassword</span>(userName:<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #b00040;\">String</span>,<span style=\"color: #bbbbbb;\"> </span>password:<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #b00040;\">String</span>):<span style=\"color: #bbbbbb;\"> </span>LoginResult<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">validatedUserName</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>httpClient.<span style=\"color: #687822;\">post</span>(\n<span style=\"color: #bbbbbb;\">      </span><span style=\"color: #ba2121;\">\"myendpoint/username\"</span>,<span style=\"color: #bbbbbb;\"> </span>userName,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #3d7b7b; font-style: italic;\">/*other args*/</span>)\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">validatedPassword</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>httpClient.<span style=\"color: #687822;\">post</span>(\n<span style=\"color: #bbbbbb;\">      </span><span style=\"color: #ba2121;\">\"myendpoint/password\"</span>,<span style=\"color: #bbbbbb;\"> </span>password,<span style=\"color: #bbbbbb;\"> </span>validatedUserName,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #3d7b7b; font-style: italic;\">/*other args*/</span>)\n\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">return</span><span style=\"color: #bbbbbb;\"> </span>LoginResult(ValidatedPassword)\n}\n</pre></div>\n\n<p><b>Federated identities</b> like Sign in with Google require that a secure connection is established between your server and your app. Our sample shows a challenge-response flow initiated from the server, but a client generated nonce works as well.</p><p>\n\n</p><p>Our sample server provides a challenge to our app on request (<span style=\"color: #0d904f; font-family: courier;\">federatedSessionId</span>, below) which is subsequently used to validate the federated token to authenticate the user.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">suspend</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">loginWithCustomCredential</span>(type:<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #b00040;\">String</span>,<span style=\"color: #bbbbbb;\"> </span>data:<span style=\"color: #bbbbbb;\"> </span>Bundle):<span style=\"color: #bbbbbb;\"> </span>LoginResult<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">if</span><span style=\"color: #bbbbbb;\"> </span>(type<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">==</span><span style=\"color: #bbbbbb;\"> </span>GoogleIdTokenCredential.<span style=\"color: #687822;\">TYPE_GOOGLE_ID_TOKEN_CREDENTIAL</span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span>token<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>GoogleIdTokenCredential.<span style=\"color: #687822;\">createFrom</span>(data).<span style=\"color: #687822;\">idToken</span>\n<span style=\"color: #bbbbbb;\">  </span>}\n\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: #3d7b7b; font-style: italic;\">// Establish a federated session for with your server and obtain its info</span>\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">federatedSessionId</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>httpClient.<span style=\"color: #687822;\">post</span>(<span style=\"color: #ba2121;\">\"myendpoint/ObtainFederatedSession\"</span>,\n<span style=\"color: #bbbbbb;\">      </span><span style=\"color: #3d7b7b; font-style: italic;\">/*federated backend address=*/</span><span style=\"color: #ba2121;\">\"https://accounts.google.com\"</span>)\n\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: #3d7b7b; font-style: italic;\">// Validate the token with the established federated session.</span>\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">validatedCustomCredential</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>httpClient.<span style=\"color: #687822;\">post</span>(\n<span style=\"color: #bbbbbb;\">      </span><span style=\"color: #ba2121;\">\"myendpoint/verifyToken\"</span>,<span style=\"color: #bbbbbb;\"> </span>token,<span style=\"color: #bbbbbb;\"> </span>federatedSessionID,\n<span style=\"color: #bbbbbb;\">      </span><span style=\"color: #3d7b7b; font-style: italic;\">/*federated backend address=*/</span><span style=\"color: #ba2121;\">\"https://accounts.google.com\"</span>)\n\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: green; font-weight: bold;\">return</span><span style=\"color: #bbbbbb;\"> </span>LoginResult(validatedCustomCredential)\n}\n</pre></div>\n\n\n<h3><span style=\"font-size: large;\">Handling secondary Credential types</span></h3>\n\n<p>If a user taps dismiss, or swipes back from Credential Manager, a <span style=\"color: #0d904f; font-family: courier;\">GetCredentialCancellationException</span> will be thrown for developers to use to navigate to their backup login screens, which will provide secondary authentication options to users. These options are detailed in the <i><a href=\"https://android-developers.googleblog.com/feeds/posts/default#designing-authentication-credential-manager\">Designing Authentication with Credential Manager</a></i> section, above.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #3d7b7b; font-style: italic;\">// Catch the user dismissal</span>\n<span style=\"color: green; font-weight: bold;\">catch</span><span style=\"color: #bbbbbb;\"> </span>(e:<span style=\"color: #bbbbbb;\"> </span>GetCredentialCancellationException)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: #3d7b7b; font-style: italic;\">// Trigger event that navigates to ‘BackupLoginScreen’</span>\n<span style=\"color: #bbbbbb;\">  </span>uiEvents.<span style=\"color: #687822;\">send</span>(UiEvent.<span style=\"color: #687822;\">NavigateToBackupLogin</span>)\n}\n</pre></div>\n\n\n<blockquote><b>Special Note:</b> The version of <a href=\"https://developer.android.com/identity/sign-in/legacy-gsi-migration\" target=\"_blank\">Google Sign in</a> that exists outside of Credential Manager is now deprecated and will be removed, and <b>should not be provided as a secondary option</b> to avoid presenting two buttons for the same purpose.</blockquote>\n\n<p>See the <a href=\"https://developer.android.com/training/wearables/apps/auth-wear#legacy-siwg\" target=\"_blank\">Wear OS transition guide</a> for more details.</p>\n\n<h2><span style=\"font-size: x-large;\">Get started with Credential Manager on Wear OS</span></h2>\n\n<p>Implementing Credential Manager on Wear OS is a straightforward process that delivers significant benefits. By adopting this API, you can provide your users with a secure, seamless, and efficient way to authenticate.  To begin implementation, explore our <a href=\"https://developer.android.com/training/wearables/apps/auth-wear\" target=\"_blank\">developer documentation</a> and <a href=\"https://github.com/android/identity-samples/tree/credman-compose/Shrine/\" target=\"_blank\">official sample app</a>.</p>\n\n<p>To learn how apps have migrated to Credential Manager on Wear OS, check out our <a href=\"https://android-developers.googleblog.com/2025/08/todoists-journey-to-modernize-wear-os-experience-with-material-3-expressive-credential-manager.html\" target=\"_blank\">case study with Todoist</a>, who were able to streamline their authentication whilst reusing their mobile implementation.</p>\n\n<p>For a look at how passkeys can improve login success rate, you can read all about how <a href=\"https://android-developers.googleblog.com/2024/11/x-improved-login-success-rate-after-adopting-passkeys.html\" target=\"_blank\">X adopted passkeys</a> to achieve a more secure and user-friendly authentication experience.</p>\n\n<p>Finally, you can watch the new <a href=\"https://www.youtube.com/watch?v=SfkxK-rFeNM\" target=\"_blank\">credential manager video blog</a> on YouTube to reinforce everything you’ve learned here.</p>\n\n<p><i>Happy coding!</i></p><p></p><p></p>",
    "published": "2025-08-28T09:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "A comprehensive workflow from design to device: Introducing Watch Face Designer",
    "link": "https://android-developers.googleblog.com/2025/08/introducing-watch-face-designer.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgN3RwsMDYaat0Upq23l9HhTE1vnzEI9VddLWsViz-b0yTjGlCPzHhVxDsuF902NkD8z8v8w9af1w_RcgkHS3Od5ldRCQhKyKkuGqhYZYYBVGgLZPyRaUh4O7FRiaXJdWW8SoArxMsZN4BBNyS4Eh4nRO8Hl1nHRXfphB68ZRPl-Dlnb0G1eproN6dndBM/s1600/watch-face-designer.png\" style=\"display: none;\" />\n\n<em>Posted by Anoushka Mazumdar – Product Manager, and Adam Soutar – Software Engineer</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgg9ES98CVZCDeZ_mKCb_ksv6ZQ2hIMMsA_vfKnbbcVxazuDLcpTrSQgYRZEpRwlc0-cqDUswGZRXCsOmqCa_munqUmrEG0J3SbGCd7hHoMsBXRS-jcYfpMyNvYseg-IpSldrw36RK9fvS9bKy6aPwxdbvSOnid1FvzuPUeFHcln9BSngdppiEkKVoUVdA/s1600/watch-face-designer%20%281%29.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgg9ES98CVZCDeZ_mKCb_ksv6ZQ2hIMMsA_vfKnbbcVxazuDLcpTrSQgYRZEpRwlc0-cqDUswGZRXCsOmqCa_munqUmrEG0J3SbGCd7hHoMsBXRS-jcYfpMyNvYseg-IpSldrw36RK9fvS9bKy6aPwxdbvSOnid1FvzuPUeFHcln9BSngdppiEkKVoUVdA/s1600/watch-face-designer%20%281%29.png\" /></a>\n\n<blockquote><i>This post is part of <a href=\"https://android-developers.googleblog.com/2025/08/spotlight-week-wear-os.html\" target=\"_blank\">Wear OS Spotlight Week</a>. Today, we're <b>exploring the wonderful world of watch faces</b>.</i></blockquote>\n\n<h2><span style=\"font-size: x-large;\">Create simple no code watch faces or build complex ones quickly with this Figma plugin</span></h2>\n\n<p>We're thrilled to introduce <b>Watch Face Designer</b>, a new design tool that can empower everyone, from seasoned designers to passionate enthusiasts, to craft watch faces directly in <a href=\"https://www.figma.com/\" target=\"_blank\">Figma</a>. This Figma plugin works seamlessly on devices running Wear OS 4 or higher. Say goodbye to complex coding and hello to seamless design!</p>\n\n<p>Watch Face Designer is built from the ground up to integrate with the Watch Face Format for Wear OS. It's not only for designers looking to bring their visions to life without a single line of code; it's also a powerful tool for developers who want to rapidly prototype and mock up watch faces before diving into more intricate functionality, such as animations, in Android Studio.</p>\n\n<div style=\"text-align: center;\"><img alt=\"screenshot showing a recreation of the Concentric watch face alongside the Watch Face Designer UI\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEifogPnYGJIlHzyBckOcQlFFnCHziOy52jePYSYoFErnl-V0NX92phhPcKAm_2ebQc_HXWV-NRcnnmrkomACM3Rpb2KXmYDcb3R7O9jyzxwvO7wyS6mrXfRqctre8jLnC_tnQ-wQZ5uzktwGbhE08iB-_qmUlWhOTJwEl1tKrmr1wiFg4r6Cu_H_WcH7N8/s1600/recreation-of-concentric-watch-face-and-watch-face-designer-ui.png\" width=\"100%\" /></div><center><em>A screenshot showing a recreation of the Concentric watch face alongside the Watch Face Designer UI</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">Design at the speed of thought with Watch Face Designer</span></h2>\n\n<p>This initial version of Watch Face Designer has plenty of features to kickstart your watch face design journey:</p>\n<ul><ul>\n<li><b>Supports core Watch Face Format features:</b> digital and analog time, interactive and ambient mode, custom fonts, complications, automatic theme creation from your Figma styles, and more.</li>\n<li><b>Intuitive plugin window:</b> The plugin window provides a streamlined interface to preview your designs in real-time and effortlessly edit individual elements to support watch face functionality.</li>\n<li><b>Flexible export options:</b> Once your design is complete, you can export your design in several ways:</li>\n  <ul><ul>\n<li><b>Direct to Play Store (recommended for designers):</b> Publish your watch face directly to the Google Play Store.</li>\n<li><b>Export to <a href=\"https://developer.android.com/studio\" target=\"_blank\">Android Studio</a> (recommended for developers) or <a href=\"https://developer.samsung.com/watch-face-studio/overview.html\" target=\"_blank\">Watch Face Studio</a>:</b> For developers or those seeking to add advanced functionality, seamlessly export your design to  Android Studio or Watch Face Studio to build upon your foundation.</li>\n<li><b>View on device:</b> See your watch face come to life on your actual Wear OS device for a true-to-life preview.</li>\n\n<div style=\"text-align: center;\"><img alt=\"screenshot showing the Watch Face Designer UI with a list of export options\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhDF6oTCKFyXXFQhAN40jIy33gXhTrLwzzDqQkycobzzA9KMcLOBxR69snUJcI9hX0U9QNUef04nQDW9-8Sys0N4hsQ8BTtobsvX9aGKAhDv4solBFqvB0RJxftp6YtVXHUvaIjs_5YTsHa1dW4bcBAhVgcaGKDSjMmDeymOgeL8ZfBsrXXhBIFVd_52LI/s1600/watch-face-designer-ui.png\" width=\"80%\" /></div><center><em>The Watch Face Designer UI displaying a list of export options</em></center><br /> \n\n</ul></ul></ul></ul>\n\n<h2><span style=\"font-size: x-large;\">Get started today</span></h2>\n\n<p>Ready to start designing your next favorite watch face? Get started with the <b><a href=\"https://www.figma.com/community/plugin/1537485193225852308/watch-face-designer\" target=\"_blank\">Watch Face Designer plugin</a></b>. It can be found on the <a href=\"https://www.figma.com/@androiddesign\" target=\"_blank\">@androiddesign page</a> on Figma's Community tab. There you can also find our <a href=\"https://www.figma.com/community/file/1542310713286658132/watch-face-designer-playground\" target=\"_blank\">Playground file</a> featuring sample watch faces, and handy complication templates. We've also included a comprehensive <a href=\"https://developer.android.com/training/wearables/watch-face-designer\" target=\"_blank\">overview guide</a> that walks you through the process, from concept to completion.</p>\n\n<p>We can't wait to see the incredible watch faces you'll create with Watch Face Designer! Stay tuned for more updates and exciting new features coming soon.</p>",
    "published": "2025-08-27T09:02:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Migrating to the Watch Face Format - Amoledwatchfaces’ journey",
    "link": "https://android-developers.googleblog.com/2025/08/migrating-to-watch-face-format-amoledwatchfaces.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZtpSnWUwSbKjDIHbWgDGYxlZ90x2RognvQni0JP9oPLwJy2tB0RT1mOMGwyTc5w_PylCrvhcdEQpukA0EAHwSUFCaM1HAPqpFU0vqYSoo_HXqJVkjmThDwhZ3ld-uuZFwlyx9H0UCJ7P75jUCN5yICnyJSz6fNDE0yvaFVKHEtbDPnh8ec3qQ8eKXo6Y/s1600/Amoledwatchfaces_Banner.png\" style=\"display: none;\" />\n\n<em>Posted by Garan Jenkin – Developer Relations Engineer</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZtpSnWUwSbKjDIHbWgDGYxlZ90x2RognvQni0JP9oPLwJy2tB0RT1mOMGwyTc5w_PylCrvhcdEQpukA0EAHwSUFCaM1HAPqpFU0vqYSoo_HXqJVkjmThDwhZ3ld-uuZFwlyx9H0UCJ7P75jUCN5yICnyJSz6fNDE0yvaFVKHEtbDPnh8ec3qQ8eKXo6Y/s1600/Amoledwatchfaces_Banner.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZtpSnWUwSbKjDIHbWgDGYxlZ90x2RognvQni0JP9oPLwJy2tB0RT1mOMGwyTc5w_PylCrvhcdEQpukA0EAHwSUFCaM1HAPqpFU0vqYSoo_HXqJVkjmThDwhZ3ld-uuZFwlyx9H0UCJ7P75jUCN5yICnyJSz6fNDE0yvaFVKHEtbDPnh8ec3qQ8eKXo6Y/s1600/Amoledwatchfaces_Banner.png\" /></a>\n\n<blockquote><i>This post is part of <a href=\"https://android-developers.googleblog.com/2025/08/spotlight-week-wear-os.html\" target=\"_blank\">Wear OS Spotlight Week</a>. Today, we’re exploring how Amoledwatchfaces successfully migrated to Watch Face Format, improving customization, extending battery life, and increasing development speed.</i></blockquote>\n\n  \n<p><i><a href=\"https://amoledwatchfaces.com/\" target=\"_blank\">Amoledwatchfaces</a> is a leading creator of watch faces for Wear OS using the <a href=\"https://developer.android.com/training/wearables/wff\" target=\"_blank\">Watch Face Format</a> (WFF), known for a distinctive information-rich and crisp style. Now well-established on the platform with over 190 watch faces, we talked to Tomáš Marcinčin, owner of Amoledwatchfaces about their successful migration using the format, and the benefits he’s seen in development velocity and performance as a result.</i></p>\n\n<h2><span style=\"font-size: x-large;\">Creating high-quality watch faces without complex code</span></h2>\n\n<p>In previous years, developing watch faces “took a lot of time,” says Tomáš Marcinčin, owner of Amoledwatchfaces. The AndroidX libraries allowed developers to create watch faces, but Tomáš, like others, was left looking for an “easier way to create watch faces,” and crucially one that shifted the focus from coding and onto design.</p>\n\n<p><i>“My main motivation was to bring users watch faces that are of the same quality as those that are pre-installed. Users were looking for designs that were not too complicated, yet customizable and looked as if they had been designed for that watch.”</i></p>\n\n<h2><span style=\"font-size: x-large;\">Expressing interest in a customized experience</span></h2>\n\n<p>Like many creators, Tomáš started using <a href=\"https://developer.samsung.com/watch-face-studio/overview.html\" target=\"_blank\">Watch Face Studio</a>, Samsung’s watch face creation tool, giving designers and developers an easy way to build watch faces for Wear OS quickly.</p>\n\n<p>While successful, as a developer, he found himself wanting more control, and a solution that was somewhere in between Watch Face Studio and full code - this led him to working directly with the format.</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"Stealth and Apex 2.0 watch faces from Amoledwatchfaces\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiUpi95gKZf7tLdf1RKQs1kSdOpPDJUz5iJ-wgBJz4DpIF9HA9mAkShoDzrslMdPwJGZgVIwvbJlCQ4mnL9JxRjmhThVyBlxE49mET4Y3_hC5bJDdidogt_3QZ28W8Td1eJPkAp021U6MoOJSTr2UIIpFl0tPtygyUal4YEumnux-_s0OnBzEyXw5WTVPI/s1600/stealth-watch-face-apex-2-0-watch-face-amoledwatchface.png\" width=\"80%\" /></div><center><em><a href=\"https://play.google.com/store/apps/details?id=com.amoledwatchfaces.stealth\" target=\"_blank\">Stealth</a> and <a href=\"https://play.google.com/store/apps/details?id=com.amoledwatchfaces.apex2\" target=\"_blank\">Apex 2.0</a> watch faces from Amoledwatchfaces</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">Migrating to Watch Face Format</span></h2>\n\n<p>Amoledwatchfaces already had a significant back catalog of watch faces, and took on the dual task of both converting all his existing watch faces and producing new ones directly in the format. <i>“I wanted to have every old and new watch face design in WFF.”</i> This would ensure that all Amoledwatchfaces’ watch faces would be available to current and future users.</p>\n\n<p>Tomáš started working directly in Android Studio, gradually refining his build process. Android Studio has recently added support for syntax validation - a feature Tomáš fed directly into and helped test as an early adopter.</p>\n\n<p>Once up and running, Tomáš found that some of the most time-consuming tasks of AndroidX were extremely simple in the format. Notably, adding the level of user customization he - and users - wanted “<i>is very easy.</i>”</p>\n\n<p>As an example, some of Amoledwatchfaces’ users wanted different <i>Always-On Display</i> (AOD) styles - some preferred a dimmed view of the active state, whereas others wanted only the digital clock. Using <span style=\"color: #0d904f ; font-family: courier;\">Variant</span>, and configuration options such as <span style=\"color: #0d904f ; font-family: courier;\">ListConfiguration</span> and <span style=\"color: #0d904f ; font-family: courier;\">BooleanConfiguration</span>, it was straightforward for Tomáš to give users the ability to customize their watch face - something which would have required a significant investment using legacy libraries.</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #666;\">&lt;</span>Variant<span style=\"color: #BBB;\"> </span>mode<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;AMBIENT&quot;</span><span style=\"color: #BBB;\"> </span>target<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;alpha&quot;</span><span style=\"color: #BBB;\"> </span>value<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;[CONFIGURATION.aod] == 0</span>\n<span style=\"color: #BA2121;\">    ? 255 : [CONFIGURATION.aod] == 1 ? 165 : 0&quot;</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">/&gt;</span>\n</pre></div><center><em>Customization of the ambient behavior: Using a <span style=\"color: #0d904f ; font-family: courier;\">ListConfiguration</span> to select between full opacity (255), a middle ground (165) or invisible (0), for a particular component</em></center>\n\n<h2><span style=\"font-size: x-large;\">Overcoming Watch Faces quality and versioning challenges</span></h2>\n\n<p>To shorten the debug cycle and minimize errors, Tomáš uses the <a href=\"https://github.com/google/watchface/tree/main/third_party/wff\" target=\"_blank\">WFF validator</a> and <a href=\"https://github.com/google/watchface/tree/main/play-validations\" target=\"_blank\">memory footprint</a> tools in his Gradle scripts. He also incorporates tools such as <a href=\"https://pngquant.org/\" target=\"_blank\">PNGQuant</a> into his Gradle builds so that resource usage remains optimized.</p>\n\n<p>However, the biggest challenge is creating different versions of the watch face for the different format versions that devices support. To help solve this issue, Tomáš took advantage of <a href=\"https://developer.android.com/build/build-variants#product-flavors\" target=\"_blank\">product flavors</a>, which let him define a different build configuration for each version. This way, he was able to support the widest range of users while still using the latest and greatest format features on the most recent devices:</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #3D7B7B; font-style: italic;\">/** Set up flavors for different format versions **/</span>\n\n\nflavorDimensions<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">+=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #BA2121;\">&quot;wff_version&quot;</span>\nproductFlavors{\n<span style=\"color: #BBB;\">   </span><span style=\"color: #3D7B7B; font-style: italic;\">// Wear OS 4</span>\n<span style=\"color: #BBB;\">   </span>create(<span style=\"color: #BA2121;\">&quot;wff1&quot;</span>){\n<span style=\"color: #BBB;\">       </span>dimension<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #BA2121;\">&quot;wff_version&quot;</span>\n<span style=\"color: #BBB;\">       </span>manifestPlaceholders<span style=\"color: #666;\">[</span><span style=\"color: #BA2121;\">&quot;wff_version&quot;</span><span style=\"color: #666;\">]</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #BA2121;\">&quot;1&quot;</span>\n<span style=\"color: #BBB;\">       </span>versionNameSuffix<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #BA2121;\">&quot;-wff1&quot;</span>\n<span style=\"color: #BBB;\">       </span>versionCode<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">10000</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">+</span><span style=\"color: #BBB;\"> </span>(android.<span style=\"color: #687822;\">defaultConfig</span>.<span style=\"color: #687822;\">versionCode</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">?:</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">0</span>)\n<span style=\"color: #BBB;\">       </span>minSdk<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">33</span>\n<span style=\"color: #BBB;\">       </span>targetSdk<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">33</span>\n<span style=\"color: #BBB;\">   </span>}\n\n\n<span style=\"color: #BBB;\">   </span><span style=\"color: #3D7B7B; font-style: italic;\">// … other flavors defined here!</span>\n\n\n<span style=\"color: #BBB;\">   </span><span style=\"color: #3D7B7B; font-style: italic;\">// Wear OS 6</span>\n<span style=\"color: #BBB;\">   </span>create(<span style=\"color: #BA2121;\">&quot;wff4&quot;</span>){\n<span style=\"color: #BBB;\">       </span>dimension<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #BA2121;\">&quot;wff_version&quot;</span>\n<span style=\"color: #BBB;\">       </span>manifestPlaceholders<span style=\"color: #666;\">[</span><span style=\"color: #BA2121;\">&quot;wff_version&quot;</span><span style=\"color: #666;\">]</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #BA2121;\">&quot;4&quot;</span>\n<span style=\"color: #BBB;\">       </span>versionCode<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">40000</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">+</span><span style=\"color: #BBB;\"> </span>(android.<span style=\"color: #687822;\">defaultConfig</span>.<span style=\"color: #687822;\">versionCode</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">?:</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">0</span>)\n<span style=\"color: #BBB;\">       </span>versionNameSuffix<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #BA2121;\">&quot;-wff4&quot;</span>\n<span style=\"color: #BBB;\">       </span>minSdk<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">36</span>\n<span style=\"color: #BBB;\">       </span>targetSdk<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">36</span>\n<span style=\"color: #BBB;\">   </span>}\n}\n</pre></div><center><em>Example of using product flavors in a watch face build file, build.gradle.kts, to support multiple WFF versions</em></center>\n\n\n<h2><span style=\"font-size: x-large;\">Improving velocity and battery life</span></h2>\n\n<p>Amoledwatchfaces is now seeing their investment in this journey to future-proof their watch faces paying off: <i>“Our watch faces are now simply more customizable and more battery friendly. With 8 custom complication slots where you can combine all different complication types, users can have every possible combination of relevant data at a glance.”</i></p>\n\n<p>User feedback has been great, according to Tomáš, <i>“people mostly refer to battery life improvements after the switch to Watch Face Format.”</i></p>\n\n<p>And the format has also had a positive effect on development velocity: <i>“I’m developing watch faces faster and cleaner. Updating projects to newer WFF versions is very easy. Fixing bugs is easy too.”</i></p>\n\n\n<div style=\"text-align: center;\"><img alt=\"Our watch faces are now simply more customizable and more battery friendly – Tomáš Marcinčin, owner of Amoledwatchfaces\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjjObjOCSHf-IwqaUMpn5IkpPLh_EbwenBbtdnJ3-dspJtZnwwzCr2UOO7vS7i-CRRL11oXk3HjKLCVgDdnPepywLVKKhJqHv-_e4T6hwYCStlhyphenhyphenRwakrgRhqzM_bzo2ztE_zW1rZYavZenVrfth4M_LYu7zFbN44HaalWJSX3VTIVN85yXZIl_nKJ_s5w/s1600/Amoledwatchfaces_Quote.png\" width=\"\" /></div><center><em></em></center><br />\n\n<h2><span style=\"font-size: x-large;\">Making the switch to the format</span></h2>\n\n<p>As announced recently, <a href=\"https://android-developers.googleblog.com/2025/06/upcoming-changes-to-wear-os-watch-faces.html\" target=\"_blank\"><b>all developers must migrate to Watch Face Format by January 2026</b></a>. Amoledwatchfaces has benefitted from being an early adopter and recommends that other developers make the switch early too.</p>\n\n<p>Tomáš adds, <i>“Don’t be afraid of switching to a WFF project, managed completely by you. It may seem hard at first sight but when you learn all the attributes, you can define your perfect progress bar arc or gradient digital clock faster than in other tools.”</i></p>\n\n<p>He also suggests a hybrid workflow, where you work directly in the format and use other tools and editors such as Watch Face Studio. You can first create your watch face in Watch Face Studio, then extract all the resources from the bundle and continue in your preferred IDE.</p>\n\n<p>This week, we’re also announcing <a href=\"https://android-developers.googleblog.com/2025/08/introducing-watch-face-designer.html\" target=\"_blank\">Watch Face Designer</a>, which is a Figma-based plugin that you can use in a similar way: start with your design, then export to your preferred format for further refinement.</p>\n\n<h2><span style=\"font-size: x-large;\">What's next for Amoledwatchfaces?</span></h2>\n\n<p>For Tomáš, the journey hasn’t ended, and he’s continuing to strive to delight users even more with each new creation. “<i>There’s always room for improvement. When there's a new WFF version or feature which could benefit watch faces and thus users, I’ll be adding that.”</i></p>\n\n<p>We’re looking forward to seeing the next creations from <a href=\"https://play.google.com/store/apps/dev?id=5591589606735981545\" target=\"_blank\">Amoledwatchfaces</a>!</p>\n\n<h2><span style=\"font-size: x-large;\">Getting started the with Watch Face Format</span></h2>\n<ul><ul>\n  <li><b>Documentation for developers</b></li>\n  <ul><ul>\n<li><a href=\"https://developer.android.com/training/wearables/wff\" target=\"_blank\">Watch Face Format guidance documentation</a></li>\n<li><a href=\"https://developer.android.com/reference/wear-os/wff/watch-face?version=4\" target=\"_blank\">Watch Face Format reference documentation</a></li>\n<li><a href=\"https://github.com/android/wear-os-samples/tree/main/WatchFaceFormat\" target=\"_blank\">Watch Face Format project samples</a></li>\n<li><a href=\"https://developer.android.com/codelabs/watch-face-format\" target=\"_blank\">Watch Face Format codelab</a></li>\n  </ul></ul>\n <li><b>Graphical editors for designers</b></li>\n<ul><ul>\n<li><a href=\"https://developer.samsung.com/watch-face-studio/overview.html\" target=\"_blank\">Watch Face Studio</a> - standalone design tool\n<li><a href=\"https://android-developers.googleblog.com/2025/08/introducing-watch-face-designer.html\" target=\"_blank\">Watch Face Designer</a> - Figma plugin\n<li><a href=\"https://developer.android.com/training/wearables/watch-face-designer\" target=\"_blank\">Watch Face Designer guidance</a>\n  </ul></ul>\n<li><a href=\"https://android-developers.googleblog.com/2025/06/upcoming-changes-to-wear-os-watch-faces.html\" target=\"_blank\">Migration guidance</a></li>\n\n  <p>We hope this story inspires you to take your next steps with the Watch Face Format.</p>",
    "published": "2025-08-27T09:01:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Further explorations with Watch Face Push",
    "link": "https://android-developers.googleblog.com/2025/08/further-explorations-with-watch-face-push.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg9hPoEMQhoOUSubWVgO-U3FPA17XPYAfWC0TTYoNJu74a2hXCiWBrRM-jacwcSbAMh8smzUt_oh2lk1MpicWicpLKpB4nhPNVfOAv5-m9r1eIe_5ScQbRRuUDbNYnup4pa5z382RJpf_-VRWD1zd58Gi9AOm6ou5HAw7HBRBBFtqEGQ5zIuPJW76vUBSQ/s1600/watch-face-push.png\" style=\"display: none;\" />\n\n<em>Posted by Garan Jenkin – Developer Relations Engineer</em>\n\n<blockquote><i>This post is part of <a href=\"https://android-developers.googleblog.com/2025/08/spotlight-week-wear-os.html\" target=\"_blank\">Wear OS Spotlight Week</a>. Today, we're <b>exploring the wonderful world of watch faces</b>.</i></blockquote>\n\n<p>At Google I/O ‘25 we launched <a href=\"https://developer.android.com/training/wearables/watch-face-push\" target=\"_blank\">Watch Face Push</a>, a new API aimed at enabling watch face marketplaces for watch and phone. Watch Face Push is now available to develop with and use on Wear OS 6 on devices such as the recently-launched <a href=\"https://android-developers.googleblog.com/2025/08/build-your-app-to-meet-users-on-newest-pixel-devices.html\" target=\"_blank\">Pixel Watch 4</a>.</p>\n\n<p>In this blog post, we’ll show how Watch Face Push (WFP) can be used in a whole host of other ways, including:</p>\n<ul><ul>\n<li>Dynamically theming a watch face from a photo</li>\n<li>Presenting rich data or photos from online or connected data sources</li>\n<li>Complementing a phone app to drive engagement</li>\n</ul></ul><br />\n\n<div style=\"text-align: center;\"><img alt=\"illustration of using Watch Face Push to build a watch face with dynamic colors, updated from the phone\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5BNn-eFschBMOkZae4r0sNEjAQx9NREnLJWHC91SxzgcNN-x7ndLg6A3vBXizg62vzkCXN0Cy6pxX2-LDIPJhnpVgg881N7w8wwU5l5NoLPP3X8RL40d5713sep3mkgfhDZ0oLkIrVoLtS0LnEcHARgkHneRpvXOLx89rQlUwtwcLKA8qzfoCA0hexEM/s1600/updating-watch-face-push-dynamic-colors-from-phone.png\" width=\"50%\" /></div><center><em>Illustration of using Watch Face Push to build a watch face with dynamic colors, updated from the phone</em></center><br />\n\n<p>The first example we’ll focus on is building a watch face with an accompanying phone app. It can apply a color theme based on a photo taken on the phone - perfect for matching your watch face to your outfit! And it’s perfect for demonstrating how Watch Face Push allows developers to bring dynamic data to the watch face.</p>\n\n<p>Let’s go through some of the main techniques which combine together to make this possible:</p>\n\n<h2><span style=\"font-size: x-large;\">The default watch face - bringing components together</span></h2>\n\n<p>A powerful feature of Watch Face Push is the <a href=\"https://developer.android.com/training/wearables/watch-face-push/wear-os-app#supply-default-watch-face\" target=\"_blank\">default watch face</a> feature. This allows the developer to provide a watch face that’s installed onto the Wear OS device at the same time as the overall app. This watch face is bundled as an APK and placed in the <span style=\"color: #0d904f ; font-family: courier;\">assets</span> directory in the app.</p>\n\n<p>The system checks for the presence of this APK as the app is being installed, and it checks for the <a href=\"https://developer.android.com/training/wearables/watch-face-push#validation\" target=\"_blank\">validation</a> key in the app’s manifest.</p>\n\n<p>This enables you to deliver a single package that contains both the watch face and app components, whether that’s a full Wear OS app, where the app is the primary focus, or app components such as complication providers, where the watch face is the primary focus.</p>\n\n<p>In our project structure, we define two modules, <span style=\"color: #0d904f ; font-family: courier;\">wear</span> and <span style=\"color: #0d904f ; font-family: courier;\">watchface</span>. By using a unified <span style=\"color: #0d904f ; font-family: courier;\">versionCode</span> across both, we can keep the app and watch face versions in sync. We use <a href=\"https://developer.android.com/build/gradle-build-overview\" target=\"_blank\">Gradle</a> to build the watch face and generate the validation token. This makes it easy to treat the watch face and the app as part of the same project.</p>\n\n<h2><span style=\"font-size: x-large;\">Complication data sources - pipelines for data</span></h2>\n\n<p>Now that we’ve successfully supplied both watch face and app components together, we need a way to provide data.</p>\n\n<p>The watch face is now able to rely on the presence of <a href=\"https://developer.android.com/training/wearables/complications/exposing-data\" target=\"_blank\">complication data sources</a> provided by the app. For example, a surfing watch face could bundle with a water temperature complication. This can be set as the default on the watch face using <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/wear-os/wff/complication/default-provider-policy\" target=\"_blank\">DefaultProviderPolicy</a></span> and is guaranteed to be present.</p>\n\n<p>Taking it a step further, we can configure the <a href=\"https://developer.android.com/training/wearables/wff/complications\" target=\"_blank\">complication</a> to be non-customizable, so that the complication becomes more of a custom data source. We can then use the complication however the watch face may need:</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #666;\">&lt;</span>ComplicationSlot<span style=\"color: #BBB;\"> </span>isCustomizable<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;FALSE&quot;</span><span style=\"color: #BBB;\"> </span>...<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">&gt;</span>\n<span style=\"color: #BBB;\">    </span><span style=\"color: #666;\">&lt;</span>DefaultProviderPolicy\n<span style=\"color: #BBB;\">        </span>defaultSystemProvider<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;NEXT_EVENT&quot;</span>\n<span style=\"color: #BBB;\">        </span>defaultSystemProviderType<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;SHORT_TEXT&quot;</span>\n<span style=\"color: #BBB;\">        </span>primaryProvider<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;&lt;my_component_path&gt;&quot;</span>\n<span style=\"color: #BBB;\">        </span>primaryProviderType<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;SHORT_TEXT&quot;</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">/&gt;</span>\n\n<span style=\"color: #BBB;\">   </span><span style=\"color: #666;\">&lt;!--</span><span style=\"color: #BBB;\"> </span>Rest<span style=\"color: #BBB;\"> </span>of<span style=\"color: #BBB;\"> </span>complication<span style=\"color: #BBB;\"> </span>goes<span style=\"color: #BBB;\"> </span>here<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">--&gt;</span>\n\n<span style=\"color: #666;\">&lt;/</span>ComplicationSlot<span style=\"color: #666;\">&gt;</span>\n</pre></div>\n\n<p>In the case of our watch face, we define a <span style=\"color: #0d904f ; font-family: courier;\">SHORT_TEXT</span> complication service <span style=\"color: #0d904f ; font-family: courier;\">PaletteComplicationService</span>, which sends the following data:</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span>TEXT:<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">&lt;</span>space<span style=\"color: #666;\">-</span>delimited<span style=\"color: #BBB;\"> </span>list<span style=\"color: #BBB;\"> </span>of<span style=\"color: #BBB;\"> </span>RGB<span style=\"color: #BBB;\"> </span>hex<span style=\"color: #BBB;\"> </span>values<span style=\"color: #666;\">&gt;</span>\nTITLE:<span style=\"color: #BBB;\"> </span>CONFIGURED<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">|</span><span style=\"color: #BBB;\"> </span>NOT_CONFIGURED\n</pre></div>\n\n<p>By using two of the fields on <span style=\"color: #0d904f ; font-family: courier;\">SHORT_TEXT</span>, we’re able to send our color palette to the watch face, along with an indicator of whether the app has been configured (more on why that is important later).</p>\n\n<h2><span style=\"font-size: x-large;\">Extracting and manipulating complication data</span></h2>\n\n<p>We’ve demonstrated how using the guaranteed presence of the <span style=\"color: #0d904f ; font-family: courier;\">PaletteComplicationService</span> allows us to ensure the watch face can receive our data, but we still need to define how to use and show the data within watch face elements.</p>\n\n<p>Within the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/wear-os/wff/complication/complication-slot?version=4\" target=\"_blank\">ComplicationSlot</a></span> element on the watch face, these data items can be accessed as <span style=\"color: #0d904f ; font-family: courier;\">COMPLICATION.TEXT</span> and <span style=\"color: #0d904f ; font-family: courier;\">COMPLICATION.TITLE</span> respectively. The various <a href=\"https://developer.android.com/reference/wear-os/wff/common/attributes/arithmetic-expression#functions\" target=\"_blank\">functions</a> such as <span style=\"color: #0d904f ; font-family: courier;\">abs()</span> and <span style=\"color: #0d904f ; font-family: courier;\">subText()</span> can be used to extract parts of these strings, or convert them into numeric types.</p>\n\n<p>We combine this with the use of <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/wear-os/wff/common/reference/reference\" target=\"_blank\">REFERENCE</a></span> to define colors. We can retrieve these colors everywhere on the watch, including outside of the <span style=\"color: #0d904f ; font-family: courier;\">ComplicationSlot</span>:</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #666;\">&lt;</span>ComplicationSlot<span style=\"color: #BBB;\"> </span>...\n<span style=\"color: #BBB;\">    </span>isCustomizable<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;FALSE&quot;</span>\n<span style=\"color: #BBB;\">    </span>x<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;0&quot;</span><span style=\"color: #BBB;\"> </span>y<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;0&quot;</span><span style=\"color: #BBB;\"> </span>width<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;1&quot;</span><span style=\"color: #BBB;\"> </span>height<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;1&quot;</span><span style=\"color: #666;\">&gt;</span>\n<span style=\"color: #BBB;\">  </span><span style=\"color: #666;\">&lt;</span>DefaultProviderPolicy\n<span style=\"color: #BBB;\">      </span>defaultSystemProvider<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;NEXT_EVENT&quot;</span>\n<span style=\"color: #BBB;\">      </span>defaultSystemProviderType<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;SHORT_TEXT&quot;</span>\n<span style=\"color: #BBB;\">    </span>primaryProvider<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;com.example.palette/com.example.palette.complication.PaletteComplicationService&quot;</span>\n<span style=\"color: #BBB;\">      </span>primaryProviderType<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;SHORT_TEXT&quot;</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">/&gt;</span>\n<span style=\"color: #BBB;\">  </span><span style=\"color: #666;\">&lt;</span>BoundingBox<span style=\"color: #BBB;\"> </span>height<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;1&quot;</span><span style=\"color: #BBB;\"> </span>width<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;1&quot;</span><span style=\"color: #BBB;\"> </span>x<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;0&quot;</span><span style=\"color: #BBB;\"> </span>y<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;0&quot;</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">/&gt;</span>\n<span style=\"color: #BBB;\">  </span><span style=\"color: #666;\">&lt;</span>Complication<span style=\"color: #666;\">&gt;</span><span style=\"color: #BBB;\"> </span>\n\n<span style=\"color: #BBB;\">    </span><span style=\"color: #666;\">&lt;!--</span><span style=\"color: #BBB;\"> </span>Complication<span style=\"color: #BBB;\"> </span>data<span style=\"color: #BBB;\"> </span>source<span style=\"color: #BBB;\"> </span>sends<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">3</span><span style=\"color: #BBB;\"> </span>RGB<span style=\"color: #BBB;\"> </span>hex<span style=\"color: #BBB;\"> </span>values,<span style=\"color: #BBB;\"> </span>extract<span style=\"color: #BBB;\"> </span>the<span style=\"color: #BBB;\"> </span>first:<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">--&gt;</span>\n<span style=\"color: #BBB;\">    </span><span style=\"color: #666;\">&lt;</span>PartDraw<span style=\"color: #BBB;\"> </span>x<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;0&quot;</span><span style=\"color: #BBB;\"> </span>y<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;0&quot;</span><span style=\"color: #BBB;\"> </span>width<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;1&quot;</span><span style=\"color: #BBB;\"> </span>height<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;1&quot;</span><span style=\"color: #666;\">&gt;</span>\n<span style=\"color: #BBB;\">      </span><span style=\"color: #666;\">&lt;</span>Transform<span style=\"color: #BBB;\"> </span>target<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;tintColor&quot;</span><span style=\"color: #BBB;\"> </span>value<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;extractColorFromColors([COMPLICATION.TEXT], false, 0.0)&quot;</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">/&gt;</span>\n<span style=\"color: #BBB;\">      </span><span style=\"color: #666;\">&lt;</span>Reference<span style=\"color: #BBB;\"> </span>source<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;tintColor&quot;</span><span style=\"color: #BBB;\"> </span>defaultValue<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;#000000&quot;</span><span style=\"color: #BBB;\"> </span>name<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;primary_color&quot;</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">/&gt;</span>\n<span style=\"color: #BBB;\">      </span><span style=\"color: #666;\">&lt;</span>Line<span style=\"color: #BBB;\"> </span>startX<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;0&quot;</span><span style=\"color: #BBB;\"> </span>startY<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;0&quot;</span><span style=\"color: #BBB;\"> </span>endX<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;1&quot;</span><span style=\"color: #BBB;\"> </span>endY<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;1&quot;</span><span style=\"color: #666;\">&gt;</span>\n<span style=\"color: #BBB;\">        </span><span style=\"color: #666;\">&lt;</span>Stroke<span style=\"color: #BBB;\"> </span>color<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;#000000&quot;</span><span style=\"color: #BBB;\"> </span>thickness<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;1&quot;</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">/&gt;</span>\n<span style=\"color: #BBB;\">      </span><span style=\"color: #666;\">&lt;/</span>Line<span style=\"color: #666;\">&gt;</span>\n<span style=\"color: #BBB;\">    </span><span style=\"color: #666;\">&lt;/</span>PartDraw<span style=\"color: #666;\">&gt;</span>\n\n<span style=\"color: #BBB;\">    </span>...\n<span style=\"color: #BBB;\">  </span><span style=\"color: #666;\">&lt;/</span>Complication<span style=\"color: #666;\">&gt;</span>\n<span style=\"color: #666;\">&lt;/</span>ComplicationSlot<span style=\"color: #666;\">&gt;</span>\n</pre></div>\n\n<p>This snippet illustrates creating a very small <span style=\"color: #0d904f ; font-family: courier;\">ComplicationSlot</span>, which will simply serve as a pipeline for our data:</p>\n\n<p>Within the complication, a placeholder <span style=\"color: #0d904f ; font-family: courier;\">PartDraw</span> is created, and the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/wear-os/wff/common/attributes/arithmetic-expression#extract-color-from-colors\" target=\"_blank\">extractColorFromColors()</a></span> function is used to transform the <span style=\"color: #0d904f ; font-family: courier;\">PartDraw</span> to the first color supplied by the complication. Using the <span style=\"color: #0d904f ; font-family: courier;\">Reference</span> element, this color value is then available to the rest of the watch face as <span style=\"color: #0d904f ; font-family: courier;\">[REFERENCE.primary_color]</span>.</p>\n\n<p>In the full example, two more <span style=\"color: #0d904f ; font-family: courier;\">PartDraw</span> elements are used to provide the <span style=\"color: #0d904f ; font-family: courier;\">secondary_color</span> and <span style=\"color: #0d904f ; font-family: courier;\">tertiary_color</span>, simply providing the <span style=\"color: #0d904f ; font-family: courier;\">0.5</span> and <span style=\"color: #0d904f ; font-family: courier;\">1.0</span> index to the <span style=\"color: #0d904f ; font-family: courier;\">extractColorFromColors</span> function instead of the <span style=\"color: #0d904f ; font-family: courier;\">0.0</span> value.</p>\n\n<p><a href=\"https://github.com/garanj/wfp-use-cases\" target=\"_blank\">Some of the samples</a> illustrate how you can share different data types beyond just colors, such as numeric values.</p>\n\n<h2><span style=\"font-size: x-large;\">Referencing complication data in the watch face</span></h2>\n\n<p>The <span style=\"color: #0d904f ; font-family: courier;\">primary_color</span>, <span style=\"color: #0d904f ; font-family: courier;\">secondary_color</span> and <span style=\"color: #0d904f ; font-family: courier;\">tertiary_color</span> values can now be used elsewhere on the watch face, both in expressions and in <a href=\"https://developer.android.com/reference/wear-os/wff/common/transform/transform\" target=\"_blank\">transforms</a>. In our example, we use the colors on the watch face hands:</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #666;\">&lt;</span>HourHand<span style=\"color: #BBB;\"> </span>resource<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;hour&quot;</span><span style=\"color: #BBB;\"> </span>x<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;210&quot;</span><span style=\"color: #BBB;\"> </span>y<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;75&quot;</span><span style=\"color: #BBB;\"> </span>width<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;30&quot;</span><span style=\"color: #BBB;\"> </span>height<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;180&quot;</span><span style=\"color: #BBB;\"> </span>pivotX<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;0.5&quot;</span>\n<span style=\"color: #BBB;\">    </span>pivotY<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;0.8333&quot;</span><span style=\"color: #BBB;\"> </span>tintColor<span style=\"color: #666;\">=</span><span style=\"color: #BA2121;\">&quot;[REFERENCE.primary_color]&quot;</span><span style=\"color: #666;\">&gt;</span>\n<span style=\"color: #666;\">&lt;/</span>HourHand<span style=\"color: #666;\">&gt;</span>\n\n<span style=\"color: #3D7B7B; font-style: italic;\">// Similar logic for the minute hand and second hand would refer to</span>\n<span style=\"color: #3D7B7B; font-style: italic;\">// secondary_color and tertiary_color, respectively.</span>\n</pre></div>\n\n<h2><span style=\"font-size: x-large;\">Keeping the watch face package up to date</span></h2>\n\n<p>A challenge with the default watch face approach is that if the app is updated, the watch face doesn’t automatically get updated with it, even if the new app bundle contains an updated watch face. To address that issue, the app uses a <span style=\"color: #0d904f ; font-family: courier;\">BroadcastReceiver</span> to receive the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/content/Intent#ACTION_MY_PACKAGE_REPLACED\" target=\"_blank\">MY_PACKAGE_REPLACED</a></span> action. On receiving this, the app can then check whether the watch face is installed and is in need of an upgrade, using Watch Face Push to perform the upgrade if necessary.</p>\n\n<p>For the <span style=\"color: #0d904f ; font-family: courier;\">MY_PACKAGE_REPLACED</span> action to be received, the app must have been run at least once. For this reason, the sample watch faces include an example of ensuring the user launches the app: A “launch app” button is shown on the watch face if the app has not been launched before. This is achieved by using a <span style=\"color: #0d904f ; font-family: courier;\">Condition</span> on the <span style=\"color: #0d904f ; font-family: courier;\">CONFIGURED</span> or <span style=\"color: #0d904f ; font-family: courier;\">NOT_CONFIGURED</span> status described earlier.</p>\n\n<p>For many watch faces, this has an additional purpose: it allows the user to enable additional components, such as a photo downloader in the Photo Album example shown here. You can also use the “first launch” experience to prompt the user to grant permissions or to sign in.</p>\n\n<div style=\"text-align: center;\"><img alt=\"three side-by-side watch faces illistrating the supporting download service from the watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKb3Ll074jHXN1uea8zYLh6V-FM-blqQEkizU8-eL-mc2PAkQZ2GfX5OQWc__eeEqGEQc9lpaSJAc3PO16C9-jF_CMbUNgSpJUEosLG1SUYXOCdzr4k-10qBqLJotGI8Rxy2kNiDvNhWOMCtAkaVRhYa1phLtHWW-y4dr93P9boLxGjacFsVopsxz74yk/s1600/enabling-supporting-download-service-watch-face-push.png\" width=\"90%\" /></div><center><em>Enabling the supporting download service from the watch face</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">Working with other app components</span></h2>\n\n<p>While the complication data source is the conduit for data, and is the common component in all the examples, the following Android APIs work with complications to achieve the desired functionality:</p>\n<ul><ul>\n<li><span style=\"font-family: courier;\"><a href=\"https://developers.google.com/android/reference/com/google/android/gms/wearable/WearableListenerService\" target=\"_blank\">WearableListenerService</a></span> - both the <b>PaletteWatchFace</b> and the <b>FootballWatchFace</b> have phone companion apps, and the <a href=\"https://developer.android.com/training/wearables/data/data-items\" target=\"_blank\">Data Layer</a> is used to send data to the watch. Once received by the <span style=\"color: #0d904f ; font-family: courier;\">WearableListenerService</span>, you can proactively update the data on the watch face using <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/androidx/wear/watchface/complications/datasource/ComplicationDataSourceUpdateRequester\" target=\"_blank\">ComplicationDataSourceUpdateRequester</a></span>.</li>\n<li><span style=\"font-family: courier;\"><a href=\"https://developer.android.com/develop/background-work/background-tasks/persistent/getting-started\" target=\"_blank\">WorkManager</a></span> - the <b>PhotoAlbumWatchFace</b> example demonstrates how to retrieve photos from an online photo service. <span style=\"color: #0d904f ; font-family: courier;\">WorkManager</span> is used for this, using <span style=\"color: #0d904f ; font-family: courier;\">Constraints</span> to only download images while the device is being charged.</li>\n<li><span style=\"font-family: courier;\"><a href=\"https://developer.android.com/develop/background-work/services/fgs\" target=\"_blank\">ForegroundService</a></span> - the <b>DeviceDataWatchFace</b> illustrates using a <span style=\"color: #0d904f ; font-family: courier;\">ForegroundService</span> to obtain data from a connected Bluetooth device which is then visualized on the watch face.</li>\n</ul></ul><br />\n\n<div style=\"text-align: center;\"><img alt=\"samples made using WFP\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg9hPoEMQhoOUSubWVgO-U3FPA17XPYAfWC0TTYoNJu74a2hXCiWBrRM-jacwcSbAMh8smzUt_oh2lk1MpicWicpLKpB4nhPNVfOAv5-m9r1eIe_5ScQbRRuUDbNYnup4pa5z382RJpf_-VRWD1zd58Gi9AOm6ou5HAw7HBRBBFtqEGQ5zIuPJW76vUBSQ/s1600/watch-face-push.png\" width=\"100%\" /></div><center><em>Additional samples made using WFP, starting top left: Photo Album, Surfing, Connected Device, and Football Team watch faces</em></center><br />\n\n<p>Check out the <a href=\"https://github.com/garanj/wfp-use-cases\" target=\"_blank\">full source for these examples</a>. We look forward to seeing what you can create!</p>",
    "published": "2025-08-27T09:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Building experiences for Wear OS",
    "link": "https://android-developers.googleblog.com/2025/08/building-experiences-for-wear-os.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi1id695sNx9vYJDlTxgtR0nU3OKCeK6FKp1TteKZLcrVLGmJqgOlVMu4qR7eRDltBcFtl3jFJ8dKFlTL8F5Vttup1EZ_qzeYYa1UNKWVU_gqyl8IFP6BUMP3ay0DDGW3g206ZX0sEoZzGJSPtOxJoPl9W8cEb7jAz_IZ92-fEMMDyIQV4t0LrCOTH31IU/s1600/building-experiences-wear-os-meta.png\" style=\"display: none;\" />\n\n<em>Posted by  Michael Stillwell – Developer Relations Engineer</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhc3uzbLbmrPaWfep5FdYpZF9IWJGxn-icdgfSNfeDoBSCMRhRZ3-Zbgscf-X2Ocw1K8ekQqKR4vnO1dEx96w0YAc2upMkyWuaL7TOd2AyASRzY1vlqohruFgqRQPvHeDt_ENWYk417pvU4orxyM0vyKIocUhg3JBYfwUf5GkWDiwCp6q0dD77n9m-hq9c/s1600/building-experiences-wear-os%20%281%29.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhc3uzbLbmrPaWfep5FdYpZF9IWJGxn-icdgfSNfeDoBSCMRhRZ3-Zbgscf-X2Ocw1K8ekQqKR4vnO1dEx96w0YAc2upMkyWuaL7TOd2AyASRzY1vlqohruFgqRQPvHeDt_ENWYk417pvU4orxyM0vyKIocUhg3JBYfwUf5GkWDiwCp6q0dD77n9m-hq9c/s1600/building-experiences-wear-os%20%281%29.png\" /></a>\n\n<blockquote><i>This post is part of <a href=\"https://android-developers.googleblog.com/2025/08/spotlight-week-wear-os.html\" target=\"_blank\">Wear OS Spotlight Week</a>. Today, we're focusing on <b>creating engaging experiences across the various surfaces available on the wrist</b>.</i></blockquote>\n\n<p>Developing for the growing ecosystem of Wear OS is a unique and rewarding challenge that encourages you to think beyond mobile patterns. Wear's design philosophy focuses on crafting experiences for a device that's always with the user, where meaningful interactions take seconds, not minutes. A successful wearable app doesn't attempt to maximize screen time; it instead aims to deliver meaningful glanceable experiences that help people stay present and productive while on the go. This vision is now fully enabled by the next generation of hardware, which we explored last week with the introduction of the new <a href=\"https://android-developers.googleblog.com/2025/08/build-your-app-to-meet-users-on-newest-pixel-devices.html\" target=\"_blank\">Pixel Watch 4</a>.</p>\n\n<p>Wear OS devices also introduce constraints that push you to innovate. Power efficiency is critical, requiring you to build experiences that are both beautiful and <a href=\"https://developer.android.com/training/wearables/apps/power\" target=\"_blank\">battery-conscious</a>. You'll also tackle challenges like <a href=\"https://developer.android.com/training/wearables/principles#support-offline\" target=\"_blank\">handling offline use cases</a> and catering for a <a href=\"https://developer.android.com/design/ui/wear/guides/foundations/quality-tiers/ready-all-screens\" target=\"_blank\">variety of screen sizes</a>.</p>\n\n<p>Despite these differences, you'll find yourself on familiar technical foundations. Wear OS is based on Android, which means you can leverage your existing knowledge of the platform, architecture, developer APIs, and tools to create wearable experiences.</p>\n\n<h2><span style=\"font-size: x-large;\">Wear OS surfaces</span></h2>\n\n<p>Wear OS offers a range of surfaces to inform and engage users. This allows you to tailor your app's presence on the watch, providing the right information at the right time and scaling your development investment to best meet your users' needs.</p>\n\n<p><b><a href=\"https://developer.android.com/training/wearables/wff\" target=\"_blank\">Watch faces</a></b> display the time and are the first thing a user sees when they look at their watch. We'll cover watch faces in more detail in other blog posts across <a href=\"https://android-developers.googleblog.com/2025/08/spotlight-week-wear-os.html\" target=\"_blank\">Wear OS Spotlight week</a>.</p>\n\n<div style=\"text-align: center;\"><img alt=\"A round, analog Wear OS watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhUOYldof384wTTfz_aezAHPCiJM8FAkELD3b1NhgqfC43XBpz2dBTBmZ551cJPULF4S-38gYQ6fVjhkUPfKDzkGCtcBmGR1sfs0jdcnCCArs3TB30JcC9Zn3elYeCk1qdQWb6nE1G9WsLIrSpqWDmkoAKb2eQQe-2fOhyqk9-YAc6IXZA5ZLRZtGJKvs8/s1600/watch-face-wear-os-spotlight-week.png\" width=\"30%\" /></div><center><em>The Watch face is the first thing a user sees when they look at their watch</em></center><br />\n\n<p><b><a href=\"https://developer.android.com/training/wearables/apps\" target=\"_blank\">Apps</a></b> provide a richer, more immersive UI for complex tasks that are too involved for other surfaces.</p>\n\n<div style=\"text-align: center;\"><img alt=\"A scrollable app experience on a round, digital watch face showing daily goals for drinking water, vegtable consumption, and fiber intake\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjSIcPiNA1_QMIDD9nzSh-PaXcy0SBVUkjyyNnjLpx502BDU5aOz-S2CuK-u9v7LUvcwojAK2D-RAOzLayf8vYKQfnWERu5yFZHfoYkveoevVtblnI-knI9bnfSenky1kT31vBqa6pEK7G4PawfoU0ZkenYzXp8_iSoHuW_XOWOfumcUTi1y48LaL0O8j4/s1600/apps-experiences-wear-os-spotlight-week.png\" width=\"30%\" /></div><center><em>Apps support complex tasks and can scroll vertically</em></center><br />\n\n<p><b><a href=\"https://developer.android.com/training/wearables/notifications\" target=\"_blank\">Notifications</a></b> provide glanceable, time-sensitive information and actions.</p>\n\n<div style=\"text-align: center;\"><img alt=\"A calendar notification for a dentist appointment on a round watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisxdexi__PpvEQHFfC_22Z1AaVGmzDatDNjswJ6gnJq087cgKU0cRzstm3Tv8llp3_erf2VfAZpU1piXxHAoM2Z832nmtBJnK5pScVdUIOjn6t1pho53jKzGIn5okHhMcwNLSn70dDuoyP_EiiH2Cno2cHRy0YgBk3x2yVZGRnen3eAkMGcM_Dpr_LBc8/s1600/notifications-experiences-wear-os-spotlight-week.png\" width=\"30%\" /></div><center><em>A notification provides glanceable, time-sensitive information</em></center><br />\n\n<p><b><a href=\"https://developer.android.com/training/wearables/complications\" target=\"_blank\">Complications</a></b> display highly-glanceable, relevant data from your app directly on the user's chosen watch face. Learn more about <a href=\"https://android-developers.googleblog.com/2025/08/building-complication-data-sources-wear-os.html\" target=\"_blank\">building complication data sources for Wear OS</a>.</p>\n\n<div style=\"text-align: center;\"><img alt=\"A complications display on a round watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8fTDzmdfuYdffpu9wc4tEyqEFgfOff3lbBW2fflBlUH4yYQx8BCYF-8eIC0r8v_Xwn6ftOZKJlkRCb6i3RtMGBjePKLhVKjDjwiqXA95Cmzz_Ta87p7aNcIqXFNyESokuLjfEdLa32uxWHcvOnj3Cxsp2oFrzitusHYDlokNlYbxd_jq51g-4sJ9gauA/s1600/complications-watch-face-wear-os-spotlight-week.png\" width=\"30%\" /></div><center><em>Complications display glanceable data from your app directly on the user's watch face.</em></center><br />\n\n<p><b><a href=\"https://developer.android.com/training/wearables/tiles\" target=\"_blank\">Tiles</a></b> (Widgets for Wear OS) offer fast, predictable access to information and actions with a simple swipe from the watch face.</p>\n\n<div style=\"text-align: center;\"><img alt=\"An example of a tile conveying information for daily step count on a round watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhaIiUMZOrkav1W62hGBtjB8OekbrKzM_4pLTfBmX-hxbTjmvIIwCVdLaF8Rc11SKPdCz5Kckdo47HxGcm4bRhkmnkh6oE7mAJbNsmdVyZaeTww2rRQCIVVceVIU9z5LsBo-qAZZYUpzBUQJz66vI9HClnoz68wBEt2qwantpJEDcvTK2cYpw4Pn1ZY9N8/s1600/tiles-wear-os-spotlight-week.png\" width=\"30%\" /></div><center><em>Tiles offer fast, predictable information and actions</em></center><br />\n\n<p>Whilst a variety of Wear OS surfaces let developers to engage with users in different ways, it may be overwhelming to get started. We recommend approaching Wear OS development in phases and scale up your investment over time:</p>\n\n<div style=\"text-align: center;\"><img alt=\"illustration of the recommended 3-step Wear OS development process\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg2GqBDnQUH62DQFBdGGAmPsvNcVE9g2-muymB5gq4D098McsiNT0f8wr5ms44v2OTNOnU7914zm5yXU3VubvXLC_jMbT2Bs0sSzkgYVKYH2p91nbVVoTJWSdXM0AKqUx0BVWF_aqc_9F-T0OqlXJEd1uoyanBNXEq4jS4jtuk7BvJHzvcqkjrUavsgkSA/s1600/recommended-wear-os-development-phases.png\" width=\"80%\" /></div><center><em>Recommended Wear OS development phases: enhance the wearable experience of your Android app, build Tiles and complications, and then create a complete wearable experience.</em></center><br />\n\n<ul><ul>\n<li><b>Improve the wearable experience of your mobile app.</b> You can improve the wearable experience with minimal effort. By default, notifications from your phone app are automatically bridged to the watch. You can start by enhancing these with wearable-specific actions using <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/androidx/core/app/NotificationCompat.WearableExtender\" target=\"_blank\">NotificationCompat.WearableExtender</a></span>, offering a more tailored experience without building a full Wear OS experience.</li></ul><ul>\n<li><b>Build a companion experience.</b> When you're ready for a dedicated UI, create a tethered app experience that depends on the phone app for its core features and data. This involves creating a tethered app that works in tandem with your phone app, allowing you to design a customized UI for the wrist and take advantage of surfaces like tiles and complications.</li></ul><ul>\n<li><b>Graduate to a standalone app.</b> Finally, you can evolve your app into a standalone experience that works independently of a phone, which is ideal for offline scenarios like exercising. This provides the most flexibility but also requires more effort to optimize for constraints like power efficiency.</li>\n</ul></ul>\n  \n<h2><span style=\"font-size: x-large;\">Notifications</span></h2>\n<p>Notifications are a core part of the Wear OS experience, delivering glanceable, time-sensitive information and actions for the user. Because Wear OS is based on Android, it shares the same notification system as mobile devices, letting you leverage your existing knowledge to build rich experiences for the wrist.</p>\n\n<p>From a development perspective, it helps to think of a notification not as a simple alert, but as a declarative UI data structure that is shared between the user's devices. You define the content and actions, and the system intelligently renders that information to best suit the context and form factor. This declarative approach has become increasingly powerful. On Wear OS, for example, it's the mechanism behind <a href=\"https://developer.android.com/training/wearables/notifications/ongoing-activity\" target=\"_blank\">ongoing activities</a>.</p>\n\n<h3><span style=\"font-size: large;\">Alert-style notifications</span></h3>\n\n<p>One great thing about notifications is that you don't even need a Wear OS app for your users to see them on their watch. By default, notifications generated by your phone app are <a href=\"https://developer.android.com/training/wearables/notifications/bridger\" target=\"_blank\">automatically \"bridged\"</a>, or mirrored, to a connected watch, providing an instant wearable presence for your app with no extra work. These bridged notifications include an action to open the app on the phone.</p>\n\n<p>You can enhance this default behavior by adding wearable-specific functionality to your phone notifications. Using <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/androidx/core/app/NotificationCompat.WearableExtender\" target=\"_blank\">NotificationCompat.WearableExtender</a></span>, you can <a href=\"https://developer.android.com/training/wearables/notifications#add-wearable-features\" target=\"_blank\">add actions</a> that only appear on the watch, offering a more tailored experience without needing to build a full Wear OS app.</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #3D7B7B; font-style: italic;\">// Prerequisites:</span>\n<span style=\"color: #3D7B7B; font-style: italic;\">//</span>\n<span style=\"color: #3D7B7B; font-style: italic;\">//   1. You've created the notification channel CHANNEL_ID</span>\n<span style=\"color: #3D7B7B; font-style: italic;\">//   2. You've obtained the POST_NOTIFICATIONS permission</span>\n\n<span style=\"color: #008000; font-weight: bold;\">val</span><span style=\"color: #BBB;\"> </span><span style=\"color: #19177C;\">channelId</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #BA2121;\">&quot;my_channel_id&quot;</span>\n<span style=\"color: #008000; font-weight: bold;\">val</span><span style=\"color: #BBB;\"> </span><span style=\"color: #19177C;\">sender</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #BA2121;\">&quot;Clem&quot;</span>\n<span style=\"color: #008000; font-weight: bold;\">val</span><span style=\"color: #BBB;\"> </span><span style=\"color: #19177C;\">subject</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #BA2121;\">&quot;...&quot;</span>\n\n<span style=\"color: #008000; font-weight: bold;\">val</span><span style=\"color: #BBB;\"> </span><span style=\"color: #19177C;\">notification</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">    </span>NotificationCompat.<span style=\"color: #687822;\">Builder</span>(applicationContext,<span style=\"color: #BBB;\"> </span>channelId)\n<span style=\"color: #BBB;\">        </span>.<span style=\"color: #687822;\">apply</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">            </span>setContentTitle(<span style=\"color: #BA2121;\">&quot;New mail from </span><span style=\"color: #A45A77; font-weight: bold;\">$</span>sender<span style=\"color: #BA2121;\">&quot;</span>)\n<span style=\"color: #BBB;\">            </span>setContentText(subject)\n<span style=\"color: #BBB;\">            </span>setSmallIcon(R.<span style=\"color: #687822;\">drawable</span>.<span style=\"color: #687822;\">new_mail_mobile</span>)\n<span style=\"color: #BBB;\">            </span><span style=\"color: #3D7B7B; font-style: italic;\">// Added for Wear OS</span>\n<span style=\"color: #BBB;\">            </span>extend(\n<span style=\"color: #BBB;\">                </span>NotificationCompat.<span style=\"color: #687822;\">WearableExtender</span>().<span style=\"color: #687822;\">apply</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                    </span>setSmallIcon(R.<span style=\"color: #687822;\">drawable</span>.<span style=\"color: #687822;\">new_mail_wear</span>)\n<span style=\"color: #BBB;\">                </span>}\n<span style=\"color: #BBB;\">            </span>)\n<span style=\"color: #BBB;\">        </span>}\n<span style=\"color: #BBB;\">        </span>.<span style=\"color: #687822;\">build</span>()\n\nNotificationManagerCompat.<span style=\"color: #687822;\">from</span>(applicationContext).<span style=\"color: #687822;\">notify</span>(<span style=\"color: #666;\">0</span>,<span style=\"color: #BBB;\"> </span>notification)\n</pre></div>\n\n<h3><span style=\"font-size: large;\">Prevent duplicate notifications</span></h3>\n\n<p>Once you build a dedicated app for Wear OS, you'll need to develop a clear notification strategy to avoid a common challenge: duplicate notifications. Since notifications from your phone app are bridged by default, a user with both your phone and watch apps installed could see two alerts for the same event.</p>\n\n<p>Wear OS provides a straightforward way to manage this:</p>\n<ol>\n<li>On the <b>mobile app's notification</b>, assign a string identifier using <span style=\"color: #0d904f ; font-family: courier;\">setBridgeTag()</span>.</li>\n<li>In your <b>Wear OS app</b>, you can then programmatically prevent notifications with certain tags from being bridged using a <span style=\"color: #0d904f ; font-family: courier;\">BridgingConfig</span>. This gives you fine-grained control, allowing you to <a href=\"https://developer.android.com/training/wearables/notifications/bridger\" target=\"_blank\">bridge some notifications</a> while handling others natively in your Wear OS app.</li>\n</ol>\n\n<p>If your mobile and watch apps generate similar but distinct notifications, you can <a href=\"https://developer.android.com/training/wearables/notifications/bridger#dismissal\" target=\"_blank\">link them using <span style=\"font-family: courier;\">setDismissalId()</span></a>. When a user dismisses a notification on one device, any notification with the same dismissal ID on another connected device is also dismissed.</p>\n  \n<h2><span style=\"font-size: x-large;\">Creating interactive experiences</span></h2>\n\n<p>From a user's perspective, apps and tiles may feel very similar. Both are full-screen experiences that are visually rich, support animations, and handle user interaction. The main differences are in how they are launched, and their specific capabilities:</p>\n<ul><ul>\n<li><b>Apps</b> can be deeply immersive and handle complex, multi-step tasks. They are the obvious choice when handling data that must be synced between the watch app and its associated phone app, and the only choice for long-running tasks like tracking workouts and listening to music.</li></ul><ul>\n<li><b>Tiles</b> are designed for fast, predictable access to the information and actions users need most, providing glanceable content with a simple swipe from the watch face. Think of tiles as widgets for Wear OS.</li>\n</ul></ul>\n\n<p>Apps and tiles are built using distinct technologies. Apps can be built with <a href=\"https://developer.android.com/training/wearables/compose?version=3\" target=\"_blank\">Jetpack Compose</a>, while tiles are defined declaratively using the <a href=\"https://developer.android.com/training/wearables/tiles/get_started?version=3\" target=\"_blank\">ProtoLayout library</a>. This distinction allows each surface to be highly optimized for its specific role – apps can provide rich, interactive experiences while tiles remain fast and power-efficient.</p>\n  \n<h3><span style=\"font-size: large;\">Building apps</span></h3>\n\n<p>Apps provide the richest experience on Wear OS. <a href=\"https://developer.android.com/training/wearables/compose?version=3\" target=\"_blank\">Jetpack Compose for Wear OS</a> is the recommended UI toolkit for building them – it works seamlessly with other Jetpack libraries and accelerates development productivity. Many prominent apps, like Gmail, Calendar and <a href=\"https://android-developers.googleblog.com/2022/10/todoist-adopted-compose-for-wear-os-and.html\" target=\"_blank\">Todoist</a>, are built entirely with Compose for Wear OS.</p>\n  \n<h4><span style=\"font-size: medium;\"><b>Compose for Wear OS for beautiful UIs</b></span></h4>\n\n<p>If you've used <a href=\"https://developer.android.com/compose\" target=\"_blank\">Jetpack Compose</a> for mobile development, you'll find that <a href=\"https://developer.android.com/jetpack/androidx/releases/wear-compose-m3\" target=\"_blank\">Compose for Wear OS</a> shares the same foundational principles and <a href=\"https://developer.android.com/jetpack/compose/mental-model\" target=\"_blank\">mental model</a>. However, building for the wrist requires some different techniques, and the toolkit provides a specialized UI component library optimized for watches.</p>\n\n<p>Wear OS has its own dedicated <a href=\"https://developer.android.com/design/ui/wear\" target=\"_blank\">Material Design</a>, <a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/foundation/package-summary\" target=\"_blank\">foundation</a>, and <a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/navigation/package-summary\" target=\"_blank\">navigation</a> libraries to use instead of the mobile Jetpack libraries. These libraries provide UI components tailored for round screens and glanceable interactions, and are each supported by <a href=\"https://developer.android.com/develop/ui/compose/tooling/previews\" target=\"_blank\">Android Studio's preview system</a>.</p> \n\n<ul><ul>\n<li><b><a href=\"https://developer.android.com/training/wearables/compose/lists?version=3\" target=\"_blank\">Lists</a></b>: On mobile, you might use a <span style=\"color: #0d904f ; font-family: courier;\">LazyColumn</span> to display a vertical collection of items. On Wear OS, the <span style=\"font-family: courier;\"><b><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/foundation/lazy/package-summary#TransformingLazyColumn%28androidx.compose.ui.Modifier,androidx.wear.compose.foundation.lazy.TransformingLazyColumnState,androidx.compose.foundation.layout.PaddingValues,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior,androidx.compose.foundation.OverscrollEffect,kotlin.Function1%29\" target=\"_blank\">TransformingLazyColumn</a></b></span> is the equivalent component. It supports scaling and transparency effects to items at the edge of a round screen, improving legibility. It also has built-in support for scrolling with <a href=\"https://developer.android.com/training/wearables/compose/rotary-input?version=3\" target=\"_blank\">rotary input</a>.\n<li><b><a href=\"https://developer.android.com/training/wearables/compose/navigation?version=3\" target=\"_blank\">Navigation</a></b>: Handling screen transitions and the back stack also requires a component that’s specific to Wear OS. Instead of the standard <span style=\"color: #0d904f ; font-family: courier;\">NavHost</span>, you must use <span style=\"font-family: courier;\"><b><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/navigation/package-summary#SwipeDismissableNavHost%28androidx.navigation.NavHostController,kotlin.String,androidx.compose.ui.Modifier,androidx.wear.compose.navigation.SwipeDismissableNavHostState,kotlin.String,kotlin.Function1%29\" target=\"_blank\">SwipeDismissableNavHost</a></b></span>. This component works with the system's swipe-to-dismiss gesture, ensuring users can intuitively navigate back to the previous screen.\n</ul></ul>\n\n<p>Learn how to <a href=\"https://developer.android.com/training/wearables/compose?version=3\" target=\"_blank\">use Jetpack Compose on Wear OS</a> to get started, including sample code.</p>\n\n<h4><span style=\"font-size: medium;\"><b>Implementing core app features</b></span></h4>\n\n<p>Wear OS also provides APIs designed for power efficiency and the on-wrist use case, as well as Wear OS versions of mobile APIs:</p>\n<ul><ul>\n<li><b>Authentication:</b> <a href=\"https://developer.android.com/training/wearables/apps/auth-wear\" target=\"_blank\">Credential Manager API</a> unifies the user sign-in process and supports modern, secure methods like passkeys, passwords, and federated identity services (like Sign-in with Google), providing a seamless and secure experience without relying on a companion phone.</li></ul><ul>\n<li><b>Ambient:</b> To handle the <a href=\"https://developer.android.com/training/wearables/always-on\" target=\"_blank\">low-power <i>ambient</i> (always-on) state</a>, we recommend using the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/androidx/wear/ambient/AmbientLifecycleObserver\" target=\"_blank\">AmbientLifecycleObserver</a></span> to receive callbacks for state transitions. In the <span style=\"color: #0d904f ; font-family: courier;\">onEnterAmbient()</span> callback, adjust your UI for low-power display by dimming colors and hiding non-essential elements. Use <span style=\"color: #0d904f ; font-family: courier;\">onExitAmbient()</span> to restore your app's full UI. Learn more about <a href=\"https://developer.android.com/training/wearables/always-on\" target=\"_blank\">always-on apps and system ambient mode</a>.</li></ul><ul>\n<li><b>Health and Fitness (sensor data):</b> While you can use the standard Android Sensor APIs, it's not recommended for performance reasons, especially for long-running workouts. Instead, use <a href=\"https://developer.android.com/health-and-fitness/guides/health-services\" target=\"_blank\">Health Services on Wear OS</a>. It acts as an intermediary to the various sensors, providing your app with batched, power-efficient updates for everything from heart rate to running metrics, without needing to manage the underlying sensors directly.</li>\n</ul></ul>\n\n<h3><span style=\"font-size: large;\">Building tiles</span></h3>\n\n<p>Tiles offer quick, predictable access to the information and actions users need most, accessible with a simple swipe from the watch face. By using <a href=\"https://developer.android.com/training/wearables/data/dynamic\" target=\"_blank\">platform data bindings</a> to display sources like step count or heart rate, you can provide timely and useful information in your tile.</p>\n\n<p>Tiles are built declaratively using the <a href=\"https://developer.android.com/training/wearables/data/dynamic\" target=\"_blank\">ProtoLayout</a> libraries, which are optimized for performance and power efficiency—critical considerations on a wearable device. Learn more about how to <a href=\"https://developer.android.com/training/wearables/tiles/get_started?version=3\" target=\"_blank\">get started with tiles</a> and <a href=\"https://android-developers.googleblog.com/2025/08/create-delightful-wear-os-widgets-using-sample-tile-layouts.html\" target=\"_blank\">how to make use of sample tile layouts</a>.</p>\n\n<h2><span style=\"font-size: x-large;\">More resources for building experiences for Wear OS</span></h2>\n<ul><ul>\n<li><b><a href=\"https://developer.android.com/wear\" target=\"_blank\">Wear OS Documentation Hub</a>:</b> The essential resource for developers looking to create experiences for Wear OS, from design guidelines to code samples.</li></ul><ul>\n<li><b><a href=\"https://developer.android.com/design/ui/wear/guides/surfaces/apps\" target=\"_blank\">App design guidance</a>:</b> The official resource to learn how to design for Wear OS.</li></ul><ul>\n<li><b><a href=\"https://github.com/android/wear-os-samples/tree/main/ComposeStarter\" target=\"_blank\">Compose starter sample app</a>:</b> A starter project that provides a solid foundation for a new Wear OS app.</li></ul><ul>\n<li><b><a href=\"https://github.com/android/compose-samples/tree/main/Jetcaster/wear\" target=\"_blank\">Media sample app from Jetcaster</a>:</b> A sample podcast app showcasing how to reuse code between form factors, updated to Material 3 Expressive on Wear OS.</li></ul><ul>\n<li><b><a href=\"https://github.com/android/wear-os-samples/tree/main/WearTilesKotlin\" target=\"_blank\">WearTilesKotlin</a> sample app:</b> Demonstrates the fundamentals of building a tile but also includes templates for common layouts, letting you quickly bootstrap your own designs while following best practices.</li></ul><ul>\n<li><b><a href=\"https://developer.android.com/codelabs/compose-for-wear-os\" target=\"_blank\">Compose on Wear OS codelab</a>:</b> A step-by-step tutorial for building a functional app for Wear OS from scratch.</li></ul><ul>\n<li><b><a href=\"https://developer.android.com/codelabs/wear-tiles\" target=\"_blank\">Tiles on Wear OS codelab</a>:</b> For a more guided, step-by-step introduction to building tiles.</li>\n</ul></ul>\n\n<p>There has never been a better time to start building for Wear OS. If you have feedback on the APIs, please let us know using the issue trackers for <a href=\"https://issuetracker.google.com/issues/new?component=1077552&amp;template=1598429\" target=\"_blank\">Wear Compose</a> and <a href=\"https://issuetracker.google.com/issues/new?component=1112273&amp;template=1623657\" target=\"_blank\">Tiles</a>. We look forward to seeing what you build!</p>",
    "published": "2025-08-26T09:01:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Todoist’s journey to modernize Wear OS experience with Material 3 Expressive and Credential Manager",
    "link": "https://android-developers.googleblog.com/2025/08/todoists-journey-to-modernize-wear-os-experience-with-material-3-expressive-credential-manager.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgB3nO43m4fDH6fSN_QiZ9VuZlxaq1w8so7kbutv7H7vbC3z98ausnPmxH-fb35VzqEctWK16bURCd66HeUzbI-OJ1wd1ORdi3ZCW27PgjT87656Zu3rue1W5wAEqbFYBybkOHF6Qsc4Fx52jffKrmJRPPA1askr4E_MMcnXdbRpGhqTCPBvNuXcK12KzM/s1600/todoist-journey-modernize-wear-os.gif\" style=\"display: none;\" />\n\n<em>Posted by <a href=\"https://uk.linkedin.com/in/kseniiashumelchyk\" target=\"_blank\">Kseniia Shumelchyk</a> – Engineering Manager, Android Developer Relations, and <a href=\"https://x.com/rastislavvasko\" target=\"_blank\">Rastislav Vaško</a> – Head of Android at Doist</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgB3nO43m4fDH6fSN_QiZ9VuZlxaq1w8so7kbutv7H7vbC3z98ausnPmxH-fb35VzqEctWK16bURCd66HeUzbI-OJ1wd1ORdi3ZCW27PgjT87656Zu3rue1W5wAEqbFYBybkOHF6Qsc4Fx52jffKrmJRPPA1askr4E_MMcnXdbRpGhqTCPBvNuXcK12KzM/s1600/todoist-journey-modernize-wear-os.gif\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgB3nO43m4fDH6fSN_QiZ9VuZlxaq1w8so7kbutv7H7vbC3z98ausnPmxH-fb35VzqEctWK16bURCd66HeUzbI-OJ1wd1ORdi3ZCW27PgjT87656Zu3rue1W5wAEqbFYBybkOHF6Qsc4Fx52jffKrmJRPPA1askr4E_MMcnXdbRpGhqTCPBvNuXcK12KzM/s1600/todoist-journey-modernize-wear-os.gif\" /></a>\n\n<blockquote><i>Since we expanded Android to smartwatches, <a href=\"https://www.todoist.com/\" target=\"_blank\">Todoist</a> has continually evolved their Wear OS experience. In the latest version of the platform, Wear OS 6, they leveraged Compose for Wear OS to bring Material 3 Expressive best practices to life, refreshing their app’s and tile’s appearance in the process.</i></blockquote>\n\n<h2><span style=\"font-size: x-large;\">Todoist and the Wear OS opportunity</span></h2>\n\n<p><a href=\"https://play.google.com/store/apps/details?id=com.todoist&amp;hl=en_GB\" target=\"_blank\">Todoist</a> is a popular task management application designed to help users organize, prioritize, and complete their tasks across their personal and professional lives the moment they come to mind. Its core philosophy embraces a clean, simple interface that provides a robust set of features, making it accessible for casual users while still being effective for power users and teams.</p>\n\n<p>Here, Wear OS comes into frame – a smartwatch isn't just a smaller phone, it's an immediate, personal companion. The ability to glance at your wrist for timely information or quickly capture a task is a uniquely powerful experience. With the revitalization of Wear OS, driven by a modern toolkit and a unified platform, the opportunity to create these delightful experiences has never been greater.</p>\n\n<h2><span style=\"font-size: x-large;\">Todoist on their Wear OS evolution</span></h2>\n\n<p>The Todoist team has always been committed to being wherever their users are, helping them organize their work and lives with minimal friction.</p>\n\n<p>“<i>We’ve had a Wear OS app ever since Android Wear 1.0 came out in 2014! Since that time, our experience on Wear OS has evolved to become a perfect platform for quick interactions and easy data access</i>,” said Rastislav Vaško, head of Android at Doist.</p>\n\n<p>When Wear OS began its new chapter a few years ago, Todoist saw the chance to do more than just maintain their existing app, and instead completely reimagine what a task manager on your wrist could be. This marked an important milestone when they <a href=\"https://android-developers.googleblog.com/2022/10/todoist-adopted-compose-for-wear-os-and.html\" target=\"_blank\">migrated the whole codebase to Jetpack Compose</a> along with a UX refresh, and saw <b>a solid user base growth rate increase by 50%</b>.</p>\n\n<p>Over the recent months, since <a href=\"https://android-developers.googleblog.com/2025/05/whats-new-in-wear-os-6.html\" target=\"_blank\">Wear OS 6 Developer Preview</a> came out, Todoist developers have been working on both visual and under-the-hood improvements of the Wear OS experience, specifically:</p>\n<ul><ul>\n<li><a href=\"https://developer.android.com/design/ui/wear/guides/get-started\" target=\"_blank\">Material 3 Expressive</a> redesign and <a href=\"https://developer.android.com/training/wearables/versions/6\" target=\"_blank\">Wear OS 6</a> support, bringing an even more fluid and modern look and feel to the app and tiles.</li>\n<li><a href=\"https://developer.android.com/training/wearables/apps/auth-wear#auth-methods\" target=\"_blank\">Credential Manager</a> migration, enabling a seamless authentication experience for new and existing users.</li>\n</ul></ul>\n\n<p>“<i>This time we didn’t add new experiences, but we wanted the existing ones to get better – through new UI patterns, dynamic theming, and simpler authentication</i>,” Rastislav said.</p>\n\n<div style=\"text-align: center;\"><img alt=\"moving image of Todoist Wear OS app after Material 3 EXpressive migration\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgljP_UlszvpyPGSPOughi2PCEH8EzEdAhaz0NDrXCICBv1DW6Oz80Mltw04kw3GaE4RXDS-iqNi51lflULxgFQ9_9unZ1zvac2zkWgUS4NXK1Mt8ZEnwxntXooNRkBwHkSCzLDICSbNlF_kYufK4vg90eWOE500x6_zmfHV_Xb2A1gACaXPqty_pLuVRU/s1600/todoist-wearoos0app-material-3-expressive.gif\" width=\"30%\" /></div><center><em>Todoist Wear OS app after Material 3 Expressive migration</em></center><br />\n \n<h2><span style=\"font-size: x-large;\">Implementing Material 3 Expressive redesign</span></h2>\n\n<p>On wearables, a highly-glanceable form factor, developers need to make every tap count, and Todoist’s design philosophy is built on this principle. As the team put it, “<i>On Wear OS, we’re focusing only on the very essential actions. Each screen and each tap should be meaningful and provide value to the user</i>”.</p>\n\n<p>This focus on simplicity allowed Todoist to fully embrace the new design language and APIs that make modern Wear OS development so compelling, so they knew from the start that they wanted to adopt Material 3 Expressive:</p>\n\n<p>“<i>Material 3 Expressive brings a lot of fluid interactions and delight to Wear OS, and we wanted to leverage these new patterns,</i>” notes Rastislav. “<i>It's more than just a fresh coat of paint; it’s a design system built for the modern wearable experience</i>”.</p>\n\n<p>As a first step, Todoist design team has used Wear Material 3 Expressive <a href=\"https://developer.android.com/design/ui/wear/guides/get-started/design-kits\" target=\"_blank\">Figma design kits</a> and <a href=\"https://developer.android.com/design/ui/wear/guides/get-started\" target=\"_blank\">guiding principles</a> to craft an updated UX for Todoist app and tiles that allowed them to understand the new design language and use relevant Material 3 elements.</p>\n\n<p>Implementing the new design language was made significantly easier by the modern developer toolkit, as the <a href=\"https://developer.android.com/jetpack/androidx/releases/wear-compose-m3\" target=\"_blank\">Wear Compose Material 3</a> and <a href=\"https://developer.android.com/jetpack/androidx/releases/wear-protolayout#1.3.0\" target=\"_blank\">Wear Protolayout Material 3</a> libraries provide updated and extended color schemes, typography, and shapes, as well as a full set of UI components, and layouts that come with built-in support for expressive motion.</p>\n\n<p>Perhaps best of all, Todoist was able to implement an elegant solution that didn’t require lots of complicated code, as Jetpack Compose matched nicely to design elements in Figma kit. According to the team, “<i>That was the best part – we didn’t need to solve any hard challenges... The APIs work, and they’re simple and intuitive!</i>”.</p>\n\n<div style=\"text-align: center;\"><img alt=\"moving image of Todoist Wear OS app showing edge hugging button after Material 3 EXpressive migration\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhwGj8mbg1yLDhS_NPm60y0W2JSIjwDg2yKpQeHzCmusFcNTLopHlJbxji-V82B-JC19uadr4vYd5CusEc9wMN6rtu3RsUBAIWq1EpIwiLmnym2Kd8rMfXAkDMkD4ALsFffkcz6dARw9W6EQm5YU4-got7rFDmLlBbzkV_60ajdDTSttS1z42VyYtv2DRo/s1600/edge-hugging-button-todoist-app-wear-os.gif\" width=\"30%\" /></div><center><em>The “edge hugging” button provides a sleek and fun experience for users</em></center><br />\n\n<p>Todoist developers have taken advantage of the new components introduced in the Material 3 library. In particular, a combination of <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/material3/package-summary#ScreenScaffold%28androidx.wear.compose.foundation.lazy.ScalingLazyListState,kotlin.Function1,androidx.compose.ui.Modifier,androidx.compose.foundation.layout.PaddingValues,kotlin.Function0,kotlin.Function1,androidx.compose.ui.unit.Dp,androidx.compose.foundation.OverscrollEffect,kotlin.Function2%29\" target=\"_blank\">ScreenScaffold</a></span>, which lays out the structure of a screen and coordinates transitions of the scroll indicator and time text label; <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/material3/package-summary#EdgeButton%28kotlin.Function0,androidx.compose.ui.Modifier,androidx.wear.compose.material3.EdgeButtonSize,kotlin.Boolean,androidx.wear.compose.material3.ButtonColors,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1%29\" target=\"_blank\">EdgeButton</a></span>, which has a special shape designed for the bottom of the screen; and <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/foundation/lazy/package-summary#TransformingLazyColumn(androidx.compose.ui.Modifier,androidx.wear.compose.foundation.lazy.TransformingLazyColumnState,androidx.compose.foundation.layout.PaddingValues,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior,androidx.compose.foundation.OverscrollEffect,kotlin.Function1)\" target=\"_blank\">TransformingLazyColumn</a></span> for vertically scrolling lists—altogether creates a coherent user experience.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #aa22ff;\">@Composable</span>\n<span style=\"color: green; font-weight: bold;\">private</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">CreateItemLayout</span>(\n<span style=\"color: #bbbbbb;\">    </span>state:<span style=\"color: #bbbbbb;\"> </span>CreateItemViewModel.<span style=\"color: #687822;\">Parsed</span>,\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// ...</span>\n<span style=\"color: #bbbbbb;\">    </span>scrollState:<span style=\"color: #bbbbbb;\"> </span>TransformingLazyColumnState<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>rememberTransformingLazyColumnState(),\n)<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><b>ScreenScaffold</b>(\n<span style=\"color: #bbbbbb;\">    </span>modifier<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Modifier.<span style=\"color: #687822;\">background</span>(MaterialTheme.<span style=\"color: #687822;\">colorScheme</span>.<span style=\"color: #687822;\">background</span>),\n<span style=\"color: #bbbbbb;\">    </span>scrollState<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>scrollState,\n<span style=\"color: #bbbbbb;\">    </span>contentPadding<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>rememberResponsiveColumnPadding(\n<span style=\"color: #bbbbbb;\">        </span>first<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>ColumnItemType.<span style=\"color: #687822;\">Button</span>,\n<span style=\"color: #bbbbbb;\">        </span>last<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>ColumnItemType.<span style=\"color: #687822;\">EdgeButtonPadding</span>,\n<span style=\"color: #bbbbbb;\">    </span>),\n<span style=\"color: #bbbbbb;\">    </span><b>edgeButton</b><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span><b>EdgeButton</b>(\n<span style=\"color: #bbbbbb;\">            </span>text<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>stringResource(id<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>R.<span style=\"color: #687822;\">string</span>.<span style=\"color: #687822;\">action_home_create_item</span>),\n<span style=\"color: #bbbbbb;\">            </span>colors<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>TodoistButtonDefaults.<span style=\"color: #687822;\">primaryButtonColors</span>(),\n<span style=\"color: #bbbbbb;\">            </span>onClick<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>onSubmitClick,\n<span style=\"color: #bbbbbb;\">            </span>enabled<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>state.<span style=\"color: #687822;\">isReadyToSubmit</span>,\n<span style=\"color: #bbbbbb;\">        </span>)\n<span style=\"color: #bbbbbb;\">    </span>},\n)<span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span>contentPadding<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-&gt;</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">transformationSpec</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>rememberTransformationSpec()\n<span style=\"color: #bbbbbb;\">    </span><b>TransformingLazyColumn</b>(\n<span style=\"color: #bbbbbb;\">        </span>modifier<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>modifier.<span style=\"color: #687822;\">fillMaxSize</span>(),\n<span style=\"color: #bbbbbb;\">        </span>contentPadding<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>contentPadding,\n<span style=\"color: #bbbbbb;\">        </span>verticalArrangement<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Arrangement.<span style=\"color: #687822;\">spacedBy</span>(\n<span style=\"color: #bbbbbb;\">            </span>space<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">4.</span>dp,\n<span style=\"color: #bbbbbb;\">            </span>alignment<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Alignment.<span style=\"color: #687822;\">Top</span>,\n<span style=\"color: #bbbbbb;\">        </span>),\n<span style=\"color: #bbbbbb;\">        </span>horizontalAlignment<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Alignment.<span style=\"color: #687822;\">Start</span>,\n<span style=\"color: #bbbbbb;\">        </span>state<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>scrollState,\n<span style=\"color: #bbbbbb;\">    </span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">       </span><span style=\"color: #3d7b7b; font-style: italic;\">// ...</span>\n<span style=\"color: #bbbbbb;\">    </span>}\n}\n</pre></div><center><em>Implementation example for ‘Add new task’ screen</em></center><br />\n\n<p>This seamless integration between design and development extended to tiles, where the library provides a composable-like, declarative approach to building tiles, which made integration feel like a natural extension of the main app: “<i>Technically, the new Tiles API resembles Compose, which we’re big fans of, so it felt very natural to use it right away</i>”.</p>\n\n<div style=\"text-align: center;\"><img alt=\"example of the glanceable ‘Day Progress’ tile\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjBlfyugqcWJlxX_ziFGQPY6ZrbXTKV0fNy2qvUZnY9nWF9oeQDy2SSnqrDQgRCLR_8WrH7dJHPSe9lTtvdX7KdpmXvN6owq7kb49Khth4OkOluGqtniBIwTKeqOnj12kk1VYqOfHJqyK23G-Ng1SScxGJrFkrn47x7Xd-DeYFBvvANuMUYybG82Ppebv0/s1600/day-progress-tile-todoist-wear-os.png\" width=\"30%\" /></div><center><em>The ‘Day Progress’ Tile provides a delightful and glanceable experience</em></center><br />\n\n<p>As an example, for the ‘Day Progress’ Tile, Todoist used one of the standard layouts that use a <a href=\"https://developer.android.com/training/wearables/tiles/get_started?version=3#slots\" target=\"_blank\">Slots-based approach</a>:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">class</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue; font-weight: bold;\">DayProgressTileRenderer</span>(\n<span style=\"color: #bbbbbb;\">    </span>context:<span style=\"color: #bbbbbb;\"> </span>Context,\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">private</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">onClickAction</span>:<span style=\"color: #bbbbbb;\"> </span>Action,\n)<span style=\"color: #bbbbbb;\"> </span>:<span style=\"color: #bbbbbb;\"> </span>SingleTileLayoutRenderer<span style=\"color: #666666;\">&lt;</span>DayProgressTileState,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #b00040;\">Unit</span><span style=\"color: #666666;\">&gt;</span>(context)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">override</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">renderTile</span>(\n<span style=\"color: #bbbbbb;\">        </span>state:<span style=\"color: #bbbbbb;\"> </span>DayProgressTileState,\n<span style=\"color: #bbbbbb;\">        </span>deviceParameters:<span style=\"color: #bbbbbb;\"> </span>DeviceParametersBuilders.<span style=\"color: #687822;\">DeviceParameters</span>,\n<span style=\"color: #bbbbbb;\">    </span>)<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><b>materialScope</b>(\n<span style=\"color: #bbbbbb;\">        </span>context<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>context,\n<span style=\"color: #bbbbbb;\">        </span>deviceConfiguration<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>deviceParameters,\n<span style=\"color: #bbbbbb;\">        </span>defaultColorScheme<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>state.<span style=\"color: #687822;\">theme</span>.<span style=\"color: #687822;\">toTileColorScheme</span>(context),\n<span style=\"color: #bbbbbb;\">    </span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span><b>primaryLayout</b>(\n<span style=\"color: #bbbbbb;\">            </span><b>titleSlot</b><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span>titleSlot(context)<span style=\"color: #bbbbbb;\"> </span>},\n<span style=\"color: #bbbbbb;\">            </span><b>mainSlot</b><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span>mainSlot(context,<span style=\"color: #bbbbbb;\"> </span>state,<span style=\"color: #bbbbbb;\"> </span>onClickAction)<span style=\"color: #bbbbbb;\"> </span>},\n<span style=\"color: #bbbbbb;\">            </span><b>labelForBottomSlot</b><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span>labelForBottomSlot(context)<span style=\"color: #bbbbbb;\"> </span>},\n<span style=\"color: #bbbbbb;\">            </span><b>bottomSlot</b><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span>bottomSlot(context,<span style=\"color: #bbbbbb;\"> </span>state)<span style=\"color: #bbbbbb;\"> </span>},\n<span style=\"color: #bbbbbb;\">            </span>margins<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>PrimaryLayoutMargins.<span style=\"color: #687822;\">MIN_PRIMARY_LAYOUT_MARGIN</span>,\n<span style=\"color: #bbbbbb;\">        </span>)\n<span style=\"color: #bbbbbb;\">    </span>}\n\n<span style=\"color: #3d7b7b; font-style: italic;\">// ...</span>\n\n<span style=\"color: green; font-weight: bold;\">private</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span>MaterialScope.<span style=\"color: blue;\">mainSlot</span>(...)<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>graphicDataCard(...)\n\n<span style=\"color: green; font-weight: bold;\">private</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span>MaterialScope.<span style=\"color: blue;\">labelForBottomSlot</span>(context:<span style=\"color: #bbbbbb;\"> </span>Context)<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>text(\n<span style=\"color: #bbbbbb;\">    </span>text<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>context.<span style=\"color: #687822;\">getString</span>(R.<span style=\"color: #687822;\">string</span>.<span style=\"color: #687822;\">tile_day_progress_goal</span>).<span style=\"color: #687822;\">layoutString</span>,\n<span style=\"color: #bbbbbb;\">    </span>typography<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Typography.<span style=\"color: #687822;\">TITLE_SMALL</span>,\n)\n</pre></div>\n\n<p>The slots extend <span style=\"color: #0d904f; font-family: courier;\">MaterialScope</span> automatically, which means no extra work is needed for styling.\n\n</p><p>The <a href=\"https://developer.android.com/reference/kotlin/androidx/wear/protolayout/material3/package-summary\" target=\"_blank\">protolayout-material3</a> library provides a large number of components designed according to the Material 3 Expressive specifications and user interface recommendations, which the Todoist team has taken advantage of. An example is the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/protolayout/material3/package-summary#%28androidx.wear.protolayout.material3.MaterialScope%29.graphicDataCard%28androidx.wear.protolayout.ModifiersBuilders.Clickable,kotlin.Function1,kotlin.Function1,androidx.wear.protolayout.modifiers.LayoutModifier,kotlin.Function1,androidx.wear.protolayout.DimensionBuilders.ContainerDimension,androidx.wear.protolayout.ModifiersBuilders.Corner,androidx.wear.protolayout.material3.CardColors,androidx.wear.protolayout.material3.GraphicDataCardStyle,kotlin.Int,androidx.wear.protolayout.ModifiersBuilders.Padding%29\" target=\"_blank\">graphicDataCard</a></span>, which Todoist used for the main slot on this tile.</p>\n\n<p>Todoist’s Tile also supports dynamic color theming, which, implementation-wise, requires no effort from developers as the top-level <span style=\"color: #0d904f; font-family: courier;\">materialScope</span> function has the <span style=\"color: #0d904f; font-family: courier;\">allowDynamicTheme</span> flag set to true by default.</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"examples of the 'Day Progress' tile supporting dynamic color\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjV5BB3khW5giy3H3kQgrcl_8znobnCn1GNkq3MvV40gMh4XFIuKs3YioDy3A7DZw05_zUxUepkqUnctN2rbpH1wspy3FJLGQWlK9hstx-ccvO4Zdr1FOfy4cvG4voW3kMFKu-zGDbZGWDQYSu795Ct_yK7uS1A_t_lGNiHAnIxbJ9HwKUASphnl4axrIM/s1600/dynamic-color-theming-wear-os-6-day-progress-tile-todoist.png\" width=\"80%\" /></div><center><em>The ‘Day Progress’ Tile supports dynamic color theming on Wear OS 6</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">Streamlining authentication with Credential Manager</span></h2>\n\n<p>To put the cherry on top of the update, Todoist also implemented a new user authentication experience with the new <a href=\"https://developer.android.com/training/wearables/apps/auth-wear\" target=\"_blank\">Credential Manager API</a> on Wear OS.</p>\n\n<p>Credential Manager provides a simplified, standardized user sign-in experience that can be implemented with minimal effort by reusing the same code as the mobile version.</p>\n\n<p>Todoist especially appreciated the standardized UI: “<i>...the [Credential Manager] UI is managed by the [Wear OS] library, which makes the work easy, freeing us up to concentrate on our app's unique features, rather than reinventing the wheel...</i>”.</p>\n\n<div style=\"text-align: center;\"><img alt=\"moving examples of Todoist app authentication before migrating to Credential Manager on the left, and after on the right\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhZal6Fvh-YYO9RYE39r2mK23CXNaTbDaXSFXgdXHvezxM5fm3d0YBYRAL7rIXOJuKv2tuCTVOoQBRMNbYDKNdvJpeKykop3_lVezDbeH4peKr5NChVLHXfwPwYTWLBHeHZNd3j6iiXaO6bW6rzIJ3W7DbB3x09BGC6vHj_HtTuighjrHd83FS5fbtn9QY/s1600/credential-manager-todoist-sign-in.gif\" width=\"80%\" /></div><center><em>Todoist authentication: before (left) and after (right) migrating to Credential Manager</em></center><br />\n\n<p>Previously, Todoist had implemented its own UI that incorporated supported authentication methods, such as reusing an auth token from an existing mobile sign-in, legacy Google Sign-In, and OAuth 2.0, which allowed users to complete their sign-in on a connected phone.</p>\n\n<p>After the migration, the Todoist authentication flow relies on the Credential Manager UI, which provides a single entry point for available sign-in methods and accounts, including passwords, passkeys, and federated identities like \"Sign in with Google.\" Users can now enjoy a streamlined experience with a single-tap sign-in on their watch.</p>\n\n<p>For apps migrating to Credential Manager, we recommend keeping at least one <a href=\"https://developer.android.com/training/wearables/apps/auth-wear#fallback-methods\" target=\"_blank\">backup authentication method</a> in case a user taps \"Dismiss.\" The Todoist team reused their previous options: OAuth 2.0 and data layer token sharing.</p>\n\n<p>And since they already had a mobile integration, Todoist was able to reuse their mobile code: “<i>We were already using Credential Manager in Todoist for Android, so… it was a no-brainer to adopt it. We’re providing the same seamless experience in both apps while simplifying and reusing code.</i>”</p>\n\n<h2><span style=\"font-size: x-large;\">Impact of the transformation</span></h2>\n\n<p>With their revamped experience completed, Todoist was thrilled with the results: “<i>the Edge Hugging Button just feels delightful to use! But seriously, authentication is simpler and faster with Credential Manager</i>”. Rastislav reports excellent user feedback, and the team is now preparing to make the updates available to all users in the coming weeks.</p>\n\n<div style=\"text-align: center;\"><img alt=\"By leveraging the fluid interactions and delightful design of Material 3 Expressive, we've elevated the Todoist expreience on Wear OS. Our Wear OS users are not only more engaged, but also show a significantly higher conversion rate than average – a trend we expect to continue – Rastislav Vasko, Head of Android at Doist\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg2TQ9eNzBE8dciHWOR3pB5FDHEi38PYj4zqKiW3AAnULGlWoQ32-e1Tyw0dxqN_i0U-H_lZW8b5ywBc186VGgmU2SJEea-j6lm3wuj6SPqgl3VIWOUWd8OZr9UoaPLhAD-yg_DebECc4jlKbmstbcemS7HeHWvR46ashcN00qeTT_dsL-pnYkTy0ounN8/s1600/todoist-wear-os-case-study-quote-card-rastislav-vasko.png\" width=\"100%\" /></div><br />\n\n<p>With their robust user base on Wear OS, Todoist expects to continue growing as they invest further and see a strong business case to continue their commitment to wearables.</p>\n\n<p>Rastislav also sums it up well with the final future-looking quote: “<i>We’re invested in Wear! Currently we’re exploring new Tiles, but also AI features.</i>”</p>\n\n<h2><span style=\"font-size: x-large;\">Todoist’s recommendations to Android and Wear OS developers</span></h2>\n\n<p>As an active member in the ever-growing Wear OS app ecosystem, Todoist was eager to provide some simple advice for other developers interested in Material 3 Expressive: “<i>Just follow the docs and examples. The samples available for Wear OS are superb and always up-to-date</i>”.</p>\n\n<p>They also recommend embracing Wear OS as a whole: “<i>It’s a mature yet fun platform to develop for! Your designers will need to focus on the essence of your product, your developers have a great testing ground to explore new patterns and APIs, and your users will appreciate having faster and easier access to your product.</i>”</p>\n\n<h2><span style=\"font-size: x-large;\">Get started with Material 3 Expressive and Credential Manager</span></h2>\n\n<p>With its new features and modern elegance, Wear OS 6 with Material 3 Expressive provides a smartwatch platform that is delightful for users, and convenient for developers.</p>\n\n<p>Learn more about the <a href=\"https://android-developers.googleblog.com/2025/08/introducing-material-3-expressive-for-wear-os.html\" target=\"_blank\">Material 3 Expressive for Wear OS design system</a>, and get access to the Material 3 Expressive components and layouts using latest <a href=\"https://developer.android.com/jetpack/androidx/releases/wear-compose-m3\" target=\"_blank\">Wear Compose Material 3</a> and <a href=\"https://developer.android.com/jetpack/androidx/releases/wear-protolayout#1.3.0\" target=\"_blank\">Wear Protolayout Material 3</a> Jetpack libraries.</p>\n\n<p>For even more resources for developers visit:</p>\n<ul><ul>\n<li><a href=\"https://github.com/android/wear-os-samples\" target=\"_blank\">Wear OS samples</a> on Github including dedicated samples for <a href=\"https://github.com/android/wear-os-samples/tree/main/ComposeStarter\" target=\"_blank\">Compose</a> and <a href=\"https://github.com/android/wear-os-samples/tree/main/WearTilesKotlin\" target=\"_blank\">Tiles</a></li>\n<li>Migration developer guidance that covers <a href=\"https://developer.android.com/training/wearables/compose/migrate-to-material3\" target=\"_blank\">apps</a> and <a href=\"https://developer.android.com/training/wearables/tiles/versioning#migrate-tiles-expressive\" target=\"_blank\">tiles</a></li>\n<li><a href=\"https://android-developers.googleblog.com/2025/08/create-delightful-wear-os-widgets-using-sample-tile-layouts.html\" target=\"_blank\">Create delightful Wear OS widgets using sample tile layouts</a> in Material 3 Expressive</li>\n<li>Codelabs for <a href=\"https://developer.android.com/codelabs/compose-for-wear-os#0\" target=\"_blank\">Compose on Wear OS</a> and <a href=\"https://developer.android.com/codelabs/wear-tiles#0\" target=\"_blank\">Tiles on Wear OS</a> for hands-on start</li>\n</ul></ul>\n\n<p>To learn more about Credential Manager on Wear OS check out <a href=\"https://developer.android.com/training/wearables/apps/auth-wear\" target=\"_blank\">developer guidance</a> and <a href=\"https://github.com/android/identity-samples/tree/credman-compose/Shrine\" target=\"_blank\">sample app</a>.</p><p></p>",
    "published": "2025-08-26T09:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Create delightful Wear OS Widgets using sample tile layouts",
    "link": "https://android-developers.googleblog.com/2025/08/create-delightful-wear-os-widgets-using-sample-tile-layouts.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPk4xWx2-SIgJUmyUB_p_H5_dLI3v6xQvtMkUX_x2BJOe5FQPFpx7gCLZtfxwPlEiW_0tg9UVaAVM9Ve-Yvi3UZNwpWRXfQLIhWdd47mWBeVfNaKUH5lqXn_jxJYCQ2I5ZIgMBd73tZ4Wag765lanPdo9Df6oaDP9djHcPVWjnfgzhcFt53ac2hWCkHUg/s1600/golden-tiles-templates%20%281%29.png\" style=\"display: none;\" />\n\n<em>Posted by  Michael Stillwell – Developer Relations Engineer</em>\n\n<div style=\"text-align: center;\"><img alt=\"Golden Tile Templates\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEitfb1ciY51dW1TUTHX-cMFKnVExpYGmhiSPFjY7rFQT-PwfVaodgWs5fqpx0V9dKCDDRxGd8tt2DG3M3yLhPN4uRO8rccetwRr8CjU1bIkhX1nJlxMihEtWjNAX9MEKtlEFuF2KJoD876W4J9y0cpobkAwE1u7qYyM4otbn_brLN-RCZQehjrUZ-s9wyM/s1600/golden-tile-templates.pn\" width=\"100%\" /></div><center><em>Golden Tile Templates</em></center><br />\n\n<blockquote><i>This post is part of <a href=\"https://android-developers.googleblog.com/2025/08/spotlight-week-wear-os.html\" target=\"_blank\">Wear OS Spotlight Week</a>. Today, we're focusing on <b>creating engaging Wear OS tiles with new resources and updated design guidance.</b></i></blockquote>\n\n<p>Wear OS is all about providing users with the right information at the right time. While a full app is great for immersive experiences, sometimes users just need a quick glance at information or a simple way to take action.</p>\n\n<p><a href=\"https://developer.android.com/design/ui/wear/guides/surfaces/tiles\" target=\"_blank\">Tiles</a> are fast, predictable surfaces that users can access with a simple swipe from their watch face. They are designed for quick, frequent tasks like checking the weather, starting a timer, or tracking fitness goals.</p>\n\n<p>To streamline your workflow from concept to launch, we're pleased to announce a collection of resources to help you build beautiful and effective tiles using the <a href=\"https://m3.material.io/\" target=\"_blank\">Material 3 Expressive design system</a>.\n<ul><ul>\n<li><b>For designers</b>, see the <a href=\"https://developer.android.com/design/ui/wear/guides/surfaces/tiles\" target=\"_blank\">design guidance for tiles</a>, <a href=\"https://developer.android.com/design/ui/wear/guides/foundations/common-layouts/tiles\" target=\"_blank\">tile layouts</a> and the <a href=\"https://developer.android.com/design/ui/wear/guides/get-started/design-kits#tiles\" target=\"_blank\">Figma design kit</a>. These resources help you craft expressive, modern tiles that feel like a cohesive and premium part of the Wear OS experience.</li>\n<li><b>For developers</b>, see the <a href=\"https://developer.android.com/training/wearables/tiles\" target=\"_blank\">official documentation</a>, as well as the <a href=\"https://github.com/android/wear-os-samples/tree/main/WearTilesKotlin\" target=\"_blank\">code sample on GitHub</a> — now with <b>a ready-to-use <a href=\"https://github.com/android/wear-os-samples/tree/main/WearTilesKotlin#golden-tiles\" target=\"_blank\">repository of sample layout implementations</a> updated for Material 3 Expressive</b>.</li>\n</ul></ul>\n\n<p>These layouts are an evolution of a previous version based on Material 2.5, now updated to Material 3 Expressive to create a modern, premium feel that makes your tile a more cohesive part of the Wear OS.</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"Material 2.5 and Material 3 Expressive side by side version comparison of goal, media, and ski tiles\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgb_Rc4EBjACzjhW2dG2iEY1KZ24612ZmLX06ob_KN_3TiVU2HPv96lQXt4Ebj0Ee_n7U6aNZSuxnh3O7BF5iA7csemvtbN_xWRCttwLM8yqZgrwxVO2aunIi-W-yizaXgu_9r5aMHWNEbTM9AfP8Shx1ZEt1xI151Gdgptkk8RpDbb8tDna6HWDWUFXcY/s1600/material-2-5-material-3-expressive-comparison.png\" width=\"50%\" /></div><center><em>Material 2.5 and Material 3 Expressive versions of the \"Goal\", \"Media\", and \"Ski\" tiles</em></center><br />\n\n<p>We hope these resources serve as inspiration and a practical starting point, whether you're new to Wear OS development or looking to add a tile to your existing app.</p>\n\n<h2><span style=\"font-size: x-large;\">Get started with sample layouts</span></h2>\n  \n<p>Tiles are built declaratively using the <a href=\"https://developer.android.com/jetpack/androidx/releases/wear-protolayout\" target=\"_blank\">ProtoLayout library</a>. Material 3 Expressive’s Primary Layout is organized around a slot-based architecture. Running from top to bottom, these slots are:</p>\n<ul><ul>\n<li>An optional <span style=\"color: #0d904f ; font-family: courier;\">titleSlot</span> for a header.</li>\n<li>A mandatory <span style=\"color: #0d904f ; font-family: courier;\">mainSlot</span> for your core content.</li>\n<li>An optional <span style=\"color: #0d904f ; font-family: courier;\">bottomSlot</span> for supplemental actions.</li>\n</ul></ul>\n  \n<p>Your app implements a <span style=\"color: #0d904f ; font-family: courier;\">TileService</span>, which returns a layout when requested by the system. This layout is then used to build and render the tile. Learn how to <a href=\"https://developer.android.com/training/wearables/tiles/get_started\" target=\"_blank\">get started with tiles</a>.</p>\n\n<p>As an example, here's the <a href=\"https://github.com/android/wear-os-samples/blob/main/WearTilesKotlin/app/src/debug/java/com/example/wear/tiles/golden/Goal.kt\" target=\"_blank\">\"Goal\" layout</a> for visualizing step count. The <span style=\"color: #0d904f ; font-family: courier;\">titleSlot</span> contains the \"Steps\" text, the <span style=\"color: #0d904f ; font-family: courier;\">mainSlot</span> holds the graphic data card with a progress ring and step data, and the <span style=\"color: #0d904f ; font-family: courier;\">bottomSlot</span> features the \"Track\" edge-hugging button. (The icon that appears at the top of the tile is specified in your app's manifest is and drawn by the system.)</p>\n  \n<div style=\"text-align: center;\"><img alt=\"Daily steps goal tile on a round watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh3nDSElnzv6x8unsIbmEgKuVOAYT4cQKqPKZaFPIUZQ2yYdL3Aa_MgS7kXDku75BinusvMp83vNbwiwojATxZ8A_FlvjvL_H_EXR74G2UXO4AsRmwZkOnqfavbVzAIcPFxPhywTzr_HMzflaB-3KYKEuUOMPIGN2HBQhhbynqB6hTpRqs4zr4Ud_6xGiw/s1600/daily-steps-tile.png\" width=\"30%\" /></div><center><em>Daily steps goal tile</em></center><br />\n \n<p>The code for this layout is structured logically around these slots:</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #008000; font-weight: bold;\">fun</span><span style=\"color: #BBB;\"> </span><span style=\"color: #00F;\">layout</span>(\n<span style=\"color: #BBB;\">    </span>context:<span style=\"color: #BBB;\"> </span>Context,\n<span style=\"color: #BBB;\">    </span>deviceParameters:<span style=\"color: #BBB;\"> </span>DeviceParameters,\n<span style=\"color: #BBB;\">    </span>steps:<span style=\"color: #BBB;\"> </span><span style=\"color: #B00040;\">Int</span>,\n<span style=\"color: #BBB;\">    </span>goal:<span style=\"color: #BBB;\"> </span><span style=\"color: #B00040;\">Int</span>\n)<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">    </span>materialScope(\n<span style=\"color: #BBB;\">        </span>context<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>context,\n<span style=\"color: #BBB;\">        </span>deviceConfiguration<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>deviceParameters\n<span style=\"color: #BBB;\">    </span>)<span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">        </span><span style=\"color: #008000; font-weight: bold;\">val</span><span style=\"color: #BBB;\"> </span><span style=\"color: #19177C;\">stepsString</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>NumberFormat.<span style=\"color: #687822;\">getNumberInstance</span>().<span style=\"color: #687822;\">format</span>(steps)\n<span style=\"color: #BBB;\">        </span><span style=\"color: #008000; font-weight: bold;\">val</span><span style=\"color: #BBB;\"> </span><span style=\"color: #19177C;\">goalString</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>NumberFormat.<span style=\"color: #687822;\">getNumberInstance</span>().<span style=\"color: #687822;\">format</span>(goal)\n<span style=\"color: #BBB;\">        </span>primaryLayout(\n<span style=\"color: #BBB;\">            </span>titleSlot<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{<span style=\"color: #BBB;\"> </span>text(<span style=\"color: #BA2121;\">&quot;Steps&quot;</span>.<span style=\"color: #687822;\">layoutString</span>)<span style=\"color: #BBB;\"> </span>},\n<span style=\"color: #BBB;\">            </span><span style=\"color: #3D7B7B; font-style: italic;\">// Adjust margins to create more space when using fully rounded corners</span>\n<span style=\"color: #BBB;\">            </span>margins<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>PrimaryLayoutMargins.<span style=\"color: #687822;\">MIN_PRIMARY_LAYOUT_MARGIN</span>,\n<span style=\"color: #BBB;\">            </span>mainSlot<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                </span>graphicDataCard(\n<span style=\"color: #BBB;\">                    </span>onClick<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>clickable(),\n<span style=\"color: #BBB;\">                    </span>height<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>expand(),\n<span style=\"color: #BBB;\">                    </span>colors<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>filledTonalCardColors(),\n<span style=\"color: #BBB;\">                    </span>title<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{<span style=\"color: #BBB;\"> </span>text(stepsString.<span style=\"color: #687822;\">layoutString</span>)<span style=\"color: #BBB;\"> </span>},\n<span style=\"color: #BBB;\">                    </span>content<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{<span style=\"color: #BBB;\"> </span>text(<span style=\"color: #BA2121;\">&quot;of </span><span style=\"color: #A45A77; font-weight: bold;\">$</span>goalString<span style=\"color: #BA2121;\">&quot;</span>.<span style=\"color: #687822;\">layoutString</span>)<span style=\"color: #BBB;\"> </span>},\n<span style=\"color: #BBB;\">                    </span>horizontalAlignment<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>LayoutElementBuilders.<span style=\"color: #687822;\">HORIZONTAL_ALIGN_END</span>,\n<span style=\"color: #BBB;\">                    </span>graphic<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                        </span>constructGraphic(\n<span style=\"color: #BBB;\">                            </span>mainContent<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                                </span>circularProgressIndicator(\n<span style=\"color: #BBB;\">                                    </span>staticProgress<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">1F</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">*</span><span style=\"color: #BBB;\"> </span>steps<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">/</span><span style=\"color: #BBB;\"> </span>goal,\n<span style=\"color: #BBB;\">                                    </span><span style=\"color: #3D7B7B; font-style: italic;\">// On supported devices, animate the arc</span>\n<span style=\"color: #BBB;\">                                    </span>dynamicProgress<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">                                    </span>DynamicFloat.<span style=\"color: #687822;\">onCondition</span>(\n<span style=\"color: #BBB;\">                                        </span>PlatformEventSources.<span style=\"color: #687822;\">isLayoutVisible</span>()\n<span style=\"color: #BBB;\">                                    </span>)\n<span style=\"color: #BBB;\">                                        </span>.<span style=\"color: #687822;\">use</span>(<span style=\"color: #666;\">1F</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">*</span><span style=\"color: #BBB;\"> </span>data.<span style=\"color: #687822;\">steps</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">/</span><span style=\"color: #BBB;\"> </span>data.<span style=\"color: #687822;\">goal</span>)\n<span style=\"color: #BBB;\">                                        </span>.<span style=\"color: #687822;\">elseUse</span>(<span style=\"color: #666;\">0F</span>)\n<span style=\"color: #BBB;\">                                        </span>.<span style=\"color: #687822;\">animate</span>(\n<span style=\"color: #BBB;\">                                            </span>CircularProgressIndicatorDefaults\n<span style=\"color: #BBB;\">                                                </span>.<span style=\"color: #687822;\">recommendedAnimationSpec</span>\n<span style=\"color: #BBB;\">                                        </span>),\n<span style=\"color: #BBB;\">                                    </span>startAngleDegrees<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">200F</span>,\n<span style=\"color: #BBB;\">                                    </span>endAngleDegrees<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">520F</span>,\n<span style=\"color: #BBB;\">                                </span>)\n<span style=\"color: #BBB;\">                            </span>},\n<span style=\"color: #BBB;\">                            </span>iconContent<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{<span style=\"color: #BBB;\"> </span>icon(ICON_ID)<span style=\"color: #BBB;\"> </span>},\n<span style=\"color: #BBB;\">                        </span>)\n<span style=\"color: #BBB;\">                    </span>},\n<span style=\"color: #BBB;\">                </span>)\n<span style=\"color: #BBB;\">            </span>},\n<span style=\"color: #BBB;\">            </span>bottomSlot<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                </span>textEdgeButton(onClick<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>clickable())<span style=\"color: #BBB;\"> </span>{<span style=\"color: #BBB;\"> </span>text(<span style=\"color: #BA2121;\">&quot;Track&quot;</span>.<span style=\"color: #687822;\">layoutString</span>)<span style=\"color: #BBB;\"> </span>}\n<span style=\"color: #BBB;\">            </span>},\n<span style=\"color: #BBB;\">        </span>)\n<span style=\"color: #BBB;\">    </span>}\n</pre></div>\n\n<p>With this simple function, you get a great-looking, responsive tile. The ProtoLayout Material3 library handles the heavy lifting, such as setting margins to avoid clipping on round screens and ensuring components adapt smoothly to different display sizes.</p>\n\n<h2><span style=\"font-size: x-large;\">Create custom tile layouts</span></h2>\n\n<p>While our layouts cover many common use cases, you'll sometimes need a unique layout. The <a href=\"https://developer.android.com/training/wearables/tiles/get_started?version=3#ui-components\" target=\"_blank\">Material 3 Expressive components</a> provide a flexible foundation for building custom designs.</p>\n\n<p>To translate designs into code, start with the most visually similar layout and modify it. The following sections explain how to modify an existing layout slot by slot.</p>\n\n<h3><span style=\"font-size: large;\">Customize the title and bottom slots</span></h3>\n\n<p>The <span style=\"color: #0d904f ; font-family: courier;\">titleSlot</span> is often a <span style=\"color: #0d904f ; font-family: courier;\">text()</span> element. To verify that the tap targets of the other elements are interactive, you may wish to hide the title slot on smaller devices. Learn how to <a href=\"https://developer.android.com/training/wearables/tiles/screen-size?version=3\" target=\"_blank\">develop tiles for different screen sizes</a>.</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span>primaryLayout(\n<span style=\"color: #BBB;\">    </span>titleSlot<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">        </span><span style=\"color: #008000; font-weight: bold;\">if</span><span style=\"color: #BBB;\"> </span>(isLargeScreen())<span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">            </span>{<span style=\"color: #BBB;\"> </span>text(<span style=\"color: #BA2121;\">&quot;</span><span style=\"color: #A45A77; font-weight: bold;\">$</span>tasksLeft<span style=\"color: #BA2121;\"> mindful tasks left&quot;</span>.<span style=\"color: #687822;\">layoutString</span>)<span style=\"color: #BBB;\"> </span>}\n<span style=\"color: #BBB;\">        </span>}<span style=\"color: #BBB;\"> </span><span style=\"color: #008000; font-weight: bold;\">else</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">            </span><span style=\"color: #008000; font-weight: bold;\">null</span>\n<span style=\"color: #BBB;\">        </span>},\n<span style=\"color: #BBB;\">    </span><span style=\"color: #3D7B7B; font-style: italic;\">// ...</span>\n)\n</pre></div>\n\n<p>The <span style=\"color: #0d904f ; font-family: courier;\">bottomSlot</span> provides users with a primary action, typically an <span style=\"color: #0d904f ; font-family: courier;\">EdgeButton</span>. You can use a <span style=\"color: #0d904f ; font-family: courier;\">textEdgeButton()</span> for a descriptive action. Alternatively, you can use an icon such as + by using an <span style=\"color: #0d904f ; font-family: courier;\">iconEdgeButton</span>.</p>\n\n<p>Using an icon is a two-step process:</p>\n<ol>\n<li>Define the <span style=\"color: #0d904f ; font-family: courier;\">iconEdgeButton</span> in your layout, giving your icon a unique resource ID string:</li>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span>primaryLayout(\n<span style=\"color: #BBB;\">    </span><span style=\"color: #3D7B7B; font-style: italic;\">// ...</span>\n<span style=\"color: #BBB;\">    </span>bottomSlot<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">        </span>iconEdgeButton(\n<span style=\"color: #BBB;\">            </span>onClick<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>clickable(),\n<span style=\"color: #BBB;\">            </span>modifier<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>LayoutModifier.<span style=\"color: #687822;\">contentDescription</span>(<span style=\"color: #BA2121;\">&quot;Add event&quot;</span>),\n<span style=\"color: #BBB;\">            </span>iconContent<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{<span style=\"color: #BBB;\"> </span>icon(<span style=\"color: #BA2121;\">&quot;icon_plus_id&quot;</span>)<span style=\"color: #BBB;\"> </span>}\n<span style=\"color: #BBB;\">        </span>)\n<span style=\"color: #BBB;\">    </span>}\n)\n</pre></div><br />\n\n<li>Provide the actual drawable resource in <span style=\"color: #0d904f ; font-family: courier;\">onTileResourcesRequest()</span>:</li>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #008000; font-weight: bold;\">override</span><span style=\"color: #BBB;\"> </span><span style=\"color: #008000; font-weight: bold;\">fun</span><span style=\"color: #BBB;\"> </span><span style=\"color: #00F;\">onTileResourcesRequest</span>(\n<span style=\"color: #BBB;\">    </span>requestParams:<span style=\"color: #BBB;\"> </span>RequestBuilders.<span style=\"color: #687822;\">ResourcesRequest</span>\n)<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">    </span>Futures.<span style=\"color: #687822;\">immediateFuture</span>(\n<span style=\"color: #BBB;\">        </span>ResourceBuilders.<span style=\"color: #687822;\">Resources</span>.<span style=\"color: #687822;\">Builder</span>()\n<span style=\"color: #BBB;\">            </span>.<span style=\"color: #687822;\">setVersion</span>(requestParams.<span style=\"color: #687822;\">version</span>)\n<span style=\"color: #BBB;\">            </span>.<span style=\"color: #687822;\">addIdToImageMapping</span>(\n<span style=\"color: #BBB;\">                </span><span style=\"color: #BA2121;\">&quot;plus_icon_id&quot;</span>,\n<span style=\"color: #BBB;\">                </span>ResourceBuilders.<span style=\"color: #687822;\">ImageResource</span>.<span style=\"color: #687822;\">Builder</span>()\n<span style=\"color: #BBB;\">                    </span>.<span style=\"color: #687822;\">setAndroidResourceByResId</span>(\n<span style=\"color: #BBB;\">                        </span>ResourceBuilders.<span style=\"color: #687822;\">AndroidImageResourceByResId</span>.<span style=\"color: #687822;\">Builder</span>()\n<span style=\"color: #BBB;\">                            </span>.<span style=\"color: #687822;\">setResourceId</span>(R.<span style=\"color: #687822;\">drawable</span>.<span style=\"color: #687822;\">outline_add_2_24</span>)\n<span style=\"color: #BBB;\">                            </span>.<span style=\"color: #687822;\">build</span>()\n<span style=\"color: #BBB;\">                    </span>)\n<span style=\"color: #BBB;\">                    </span>.<span style=\"color: #687822;\">build</span>()\n<span style=\"color: #BBB;\">            </span>)\n<span style=\"color: #BBB;\">            </span>.<span style=\"color: #687822;\">build</span>()\n<span style=\"color: #BBB;\">    </span>)\n</pre></div></ol><br />\n\n<p>See <a href=\"https://github.com/android/wear-os-samples/blob/main/WearTilesKotlin/app/src/debug/java/com/example/wear/tiles/golden/Alarm.kt\" target=\"_blank\">Alarm.kt</a> for a full code sample demonstrating this approach.</p>\n\n<h3><span style=\"font-size: large;\">Customize the main slot</span></h3>\n\n<p>The <span style=\"color: #0d904f ; font-family: courier;\">mainSlot</span> is where the core content of your tile lives and where the most significant customization occurs. Let's walk through a few examples.</p>\n\n<h4><span style=\"font-size: medium;\"><b>Case study: Workout tile</b></span></h4>\n\n<div style=\"text-align: center;\"><img alt=\"example of a compact workout tile on a round watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjAkrz4C4Fsa1LB0IMSaZ2agDuwWVFLSCwHq_wuWqHwHwNB5WdIpYvoE_GWNCf-yO73H5nZVLenQB0QH_mJYwakGeMG2jtcNRlZKGOvFrmMCDYGHEVqoH_c3wpLxPR7nmweVJRwPN3hocZBJX8uqM3Kbul2biuuEusGEOHzDnRvgBoKXEhPSSyxHwpV3PY/s1600/compact-workout-tile.png\" width=\"30%\" /></div><center><em>A compact workout tile for smaller Wear OS devices.</em></center><br />\n\n\n<div style=\"text-align: center;\"><img alt=\"example of an expanded workout tile on a round watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh6diehE9lTD-Pc45Sv_4w81f1-Q3B4Q_PKdbQ6-psQLwwUgY6LxU2S_9wlP_TuOpGUsaYj1UGW-q0Ndc-3R5dl9jbwvtaxtaBvYXR0jOaBTA13H4qfpTlPrvWRWbunuK7H50BMZpjTJhLrej41lXnoSFJSFBM8mDHFQ_ZwzS8dYmNOb4vOjD2UYLaDY0w/s1600/expanded-workout-tile.png\" width=\"30%\" /></div><center><em>An expanded workout tile providing more information on larger screens.</em></center><br />\n\n<p>This tile needs to adapt its layout for different screen sizes. For the smaller layout, three simple <span style=\"color: #0d904f ; font-family: courier;\">iconButton</span> components are a perfect fit. In the larger layout, the central button displays more data (duration, unit, and an icon). Even though it's semantically still a button, in this case the <span style=\"color: #0d904f ; font-family: courier;\">iconDataCard</span> element is a better fit. It's specifically designed to display multiple pieces of data, and we can easily adjust its width and height.</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span>iconDataCard(\n<span style=\"color: #BBB;\">    </span>title<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{<span style=\"color: #BBB;\"> </span>text(<span style=\"color: #BA2121;\">&quot;30&quot;</span>.<span style=\"color: #687822;\">layoutString</span>,<span style=\"color: #BBB;\"> </span>typography<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>DISPLAY_MEDIUM)<span style=\"color: #BBB;\"> </span>},\n<span style=\"color: #BBB;\">    </span>content<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{<span style=\"color: #BBB;\"> </span>text(<span style=\"color: #BA2121;\">&quot;Mins&quot;</span>.<span style=\"color: #687822;\">layoutString</span>,<span style=\"color: #BBB;\"> </span>typography<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>TITLE_MEDIUM)<span style=\"color: #BBB;\"> </span>},\n<span style=\"color: #BBB;\">    </span>secondaryIcon<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{<span style=\"color: #BBB;\"> </span>icon(<span style=\"color: #BA2121;\">&quot;icon_run_id&quot;</span>)<span style=\"color: #BBB;\"> </span>},\n<span style=\"color: #BBB;\">    </span>shape<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>shapes.<span style=\"color: #687822;\">large</span>,<span style=\"color: #BBB;\"> </span><span style=\"color: #3D7B7B; font-style: italic;\">// adjust the corner shape</span>\n<span style=\"color: #BBB;\">    </span>onClick<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>clickable(),\n<span style=\"color: #BBB;\">    </span><span style=\"color: #3D7B7B; font-style: italic;\">// make element more prominent on larger screens</span>\n<span style=\"color: #BBB;\">    </span>width<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #008000; font-weight: bold;\">if</span><span style=\"color: #BBB;\"> </span>(isLargeScreen())<span style=\"color: #BBB;\"> </span>weight(<span style=\"color: #666;\">1.5f</span>)<span style=\"color: #BBB;\"> </span><span style=\"color: #008000; font-weight: bold;\">else</span><span style=\"color: #BBB;\"> </span>expand(),\n<span style=\"color: #BBB;\">    </span>height<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>expand(),\n<span style=\"color: #BBB;\">    </span><span style=\"color: #3D7B7B; font-style: italic;\">// ...</span>\n)\n</pre></div>\n\n<p>See <a href=\"https://github.com/android/wear-os-samples/blob/main/WearTilesKotlin/app/src/debug/java/com/example/wear/tiles/golden/Workout.kt\" target=\"_blank\">Workout.kt</a> for the full source code.</p>\n\n<h4><span style=\"font-size: medium;\"><b>Case study: Skiing stats tile</b></span></h4>\n\n\n<div style=\"text-align: center;\"><img alt=\"example of a custom skiing tile on a round watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMjhHhdLK-f5mld5iqPSo6Ni-AQjYy8NjWSqHSxS0NuuxICcAHPq4IrWDmUG2mjVoM2PHZol4TtEfsTHFpVmgNlXt43IDCTmQOz-JrYisTVwNeTHx4k4uFkjWLss-zETRyUDoqa-v9KaKL_RfF-OLL2WBRQPWjqu-aTsirsbo3wHH-qgAwKp2W9a0DoGw/s1600/custom-skiing-tile.png\" width=\"30%\" /></div><center><em>A custom tile for skiing stats</em></center><br />\n\n<p>The design for this tile is built around a pill-shaped element that displays three lines of text, each with unique typography. A <span style=\"font-family: courier;\">textDataCard()</span> is perfect for this, offering slots for a \"title\" (the metric), \"content\" (the value), and \"secondaryText\" (the units). These slots come with default styling that you can override to match your design precisely.</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #008000; font-weight: bold;\">fun</span><span style=\"color: #BBB;\"> </span>MaterialScope.<span style=\"color: #00F;\">statTextButton</span>(stat:<span style=\"color: #BBB;\"> </span>Stat)<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">    </span>textDataCard(\n<span style=\"color: #BBB;\">        </span>onClick<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>clickable(),\n<span style=\"color: #BBB;\">        </span>width<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>expand(),\n<span style=\"color: #BBB;\">        </span>height<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>expand(),\n<span style=\"color: #BBB;\">        </span>shape<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>shapes.<span style=\"color: #687822;\">extraLarge</span>,\n<span style=\"color: #BBB;\">        </span>title<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">            </span>text(\n<span style=\"color: #BBB;\">                </span>stat.<span style=\"color: #687822;\">value</span>.<span style=\"color: #687822;\">layoutString</span>,\n<span style=\"color: #BBB;\">                </span>typography<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">                    </span><span style=\"color: #008000; font-weight: bold;\">if</span><span style=\"color: #BBB;\"> </span>(isLargeScreen())<span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                        </span>Typography.<span style=\"color: #687822;\">NUMERAL_SMALL</span>\n<span style=\"color: #BBB;\">                    </span>}<span style=\"color: #BBB;\"> </span><span style=\"color: #008000; font-weight: bold;\">else</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                        </span>Typography.<span style=\"color: #687822;\">NUMERAL_EXTRA_SMALL</span>\n<span style=\"color: #BBB;\">                    </span>}\n<span style=\"color: #BBB;\">            </span>)\n<span style=\"color: #BBB;\">        </span>},\n<span style=\"color: #BBB;\">        </span>content<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">            </span>text(\n<span style=\"color: #BBB;\">                </span>stat.<span style=\"color: #687822;\">unit</span>.<span style=\"color: #687822;\">layoutString</span>,\n<span style=\"color: #BBB;\">                </span>typography<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">                    </span><span style=\"color: #008000; font-weight: bold;\">if</span><span style=\"color: #BBB;\"> </span>(isLargeScreen())<span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                        </span>Typography.<span style=\"color: #687822;\">TITLE_MEDIUM</span>\n<span style=\"color: #BBB;\">                    </span>}<span style=\"color: #BBB;\"> </span><span style=\"color: #008000; font-weight: bold;\">else</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                        </span>Typography.<span style=\"color: #687822;\">TITLE_SMALL</span>\n<span style=\"color: #BBB;\">                    </span>}\n<span style=\"color: #BBB;\">            </span>)\n<span style=\"color: #BBB;\">        </span>},\n<span style=\"color: #BBB;\">        </span>secondaryText<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">            </span>text(\n<span style=\"color: #BBB;\">                </span>stat.<span style=\"color: #687822;\">label</span>.<span style=\"color: #687822;\">layoutString</span>,\n<span style=\"color: #BBB;\">                </span>typography<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">                    </span><span style=\"color: #008000; font-weight: bold;\">if</span><span style=\"color: #BBB;\"> </span>(isLargeScreen())<span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                        </span>Typography.<span style=\"color: #687822;\">TITLE_MEDIUM</span>\n<span style=\"color: #BBB;\">                    </span>}<span style=\"color: #BBB;\"> </span><span style=\"color: #008000; font-weight: bold;\">else</span><span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">                        </span>Typography.<span style=\"color: #687822;\">TITLE_SMALL</span>\n<span style=\"color: #BBB;\">                    </span>}\n<span style=\"color: #BBB;\">            </span>)\n<span style=\"color: #BBB;\">        </span>}\n<span style=\"color: #BBB;\">    </span>)\n</pre></div>\n\n<p>Notice how the typography constants are varied according to the screen size (<span style=\"color: #0d904f ; font-family: courier;\">TITLE_MEDIUM</span> vs. <span style=\"color: #0d904f ; font-family: courier;\">TITLE_SMALL</span>, for example). Given the variety of screen and font sizes on Wear OS, this is a key technique to keep text legible. Instead of trying to manually tweak your layout for every possible combination, focus on adjusting the typography by using different font size constants.</p>\n\n<p>For a consistent look, try to stick to the same \"category\" of typography constant, such as <span style=\"color: #0d904f ; font-family: courier;\">BODY_MEDIUM</span> on small screens and <span style=\"color: #0d904f ; font-family: courier;\">BODY_LARGE</span> on larger ones. Avoid jumping between different categories, like from <span style=\"color: #0d904f ; font-family: courier;\">LABEL_LARGE</span> to <span style=\"color: #0d904f ; font-family: courier;\">DISPLAY_SMALL</span>, as these constants can vary in more than just size, affecting font weight and other visual properties.</p>\n\n<p>See <a href=\"https://github.com/android/wear-os-samples/blob/main/WearTilesKotlin/app/src/debug/java/com/example/wear/tiles/golden/Ski.kt\" target=\"_blank\">Ski.kt</a> for the full source code.</p>\n\n<p>Another approach to adapting a layout to different screen sizes is simply to add or remove elements depending on the display size, as demonstrated by the <a href=\"https://github.com/android/wear-os-samples/blob/main/WearTilesKotlin/app/src/debug/java/com/example/wear/tiles/golden/Weather.kt\" target=\"_blank\">Weather.kt</a> layout. While both versions display the same current conditions, the larger version adds more information to the forecast.</p>\n\n<div style=\"text-align: center;\"><img alt=\"example of a glanceable weatehr tile on a round watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVtwGWUtOTP664at0myG6P3Py79j9e10EJkiLi-tmFxoGYo-TWRaON4ygZF9UlcetdXSnshOuFfYfkf7B8LsSM4lg46ojsHqeVMvjRarVGo3t59extXqQS2txR_WgBYkQyk6oN4_qT439MzBd2dY_4oZSWWqLJH4k0qHh-J20GHDgzQH6QKTKHJj1F7Z0/s1600/glanceable-weather-tile.png\" width=\"30%\" /></div><center><em>A glanceable weather tile for smaller Wear OS screens</em></center><br />\n\n<div style=\"text-align: center;\"><img alt=\"example of an expanded weather tile on a round watch face\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5Za5I-AoitJkPVltUwBECYAVnx-Sd0W7RCVTvu7upB69f82kZm3oOFlzeBHRHazqH9Sb_-x7lGjsxTz4nXCzOEg7PY35h4ZYpkdP803htzz0vvU236bALMtmb4aMxzcw802B-6GlZ1zRj3FB_utRFKQ7PWLGykAdYXYARi0C0L5A9CcXCFlad-svYyCg/s1600/enhanced-weather-tile.png\" width=\"30%\" /></div><center><em>An enhanced weather tile with forecast details for larger displays.\n</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">Customize colors</span></h2>\n\n<p>You might notice that the templates don't specify a color scheme, yet they adapt to the user's chosen theme on Wear OS 6. This is due to <i>dynamic theming</i>, a system feature that automatically generates a color scheme by extracting seed colors from sources like the user's watch face. For tiles, this is the default behavior.</p>\n\n<div style=\"text-align: center;\"><img alt=\"examples of the same weather app featuring three different system-generated color themes\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgI2UPKhxU_O53u99A63myK8yVWnOIQnp73d5zl2rtNzCTpU7y1V5tOOuO0rJMq09Ke_08FL2XMDE6Ho6r5Kva1dIhHm8dcV294ffu53b5xvPN-3LshjJVYF9iYPhIcmow_7GnDFPg54Wfk1nVV7gime3In6hmpOZQbfzhT_3Kkw6q0PvhcjoEpfN_XXXQ/s1600/weather-tile-system-generated-color-themes.png\" width=\"100%\" /></div><center><em>The same Weather tile under three different system-generated color themes</em></center><br />\n\n<p>As a developer, this gives you two main options for your tile's appearance:</p>\n\n<p><b>Option 1 (recommended): Follow dynamic color theming.</b> A dynamic theme is used by default. In this case, you should provide a <span style=\"color: #0d904f ; font-family: courier;\">defaultColorScheme</span> to be used as a fallback if the user disables dynamic theming or if the device doesn't support it. This approach creates a consistent and cohesive feel, allowing your tile to integrate seamlessly with the system.</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #008000; font-weight: bold;\">val</span><span style=\"color: #BBB;\"> </span><span style=\"color: #19177C;\">myColorScheme</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">    </span>ColorScheme(\n<span style=\"color: #BBB;\">        </span>primary<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>...\n<span style=\"color: #BBB;\">        </span>onPrimary<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>...\n<span style=\"color: #BBB;\">        </span><span style=\"color: #3D7B7B; font-style: italic;\">// 27 more</span>\n<span style=\"color: #BBB;\">    </span>)\n\nmaterialScope(\n<span style=\"color: #BBB;\">  </span>defaultColorScheme<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>myColorScheme\n)<span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">  </span><span style=\"color: #3D7B7B; font-style: italic;\">// If the user selects &quot;no theme&quot; in settings, myColorScheme is used.</span>\n<span style=\"color: #BBB;\">  </span><span style=\"color: #3D7B7B; font-style: italic;\">// Otherwise, the system-provided theme is used.</span>\n}\n</pre></div>\n\n<p><b>Option 2: Use your brand colors.</b> To ensure brand consistency, you can force your tile to always use your custom color scheme by setting <span style=\"color: #0d904f ; font-family: courier;\">allowDynamicTheme</span> to <span style=\"color: #0d904f ; font-family: courier;\">false</span>. In this case, the same colors will always be used, irrespective of the user's selected color theme.</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span>materialScope(\n<span style=\"color: #BBB;\">  </span>allowDynamicTheme<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span><span style=\"color: #008000; font-weight: bold;\">false</span>,\n<span style=\"color: #BBB;\">  </span>defaultColorScheme<span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>myColorScheme\n)<span style=\"color: #BBB;\"> </span>{\n<span style=\"color: #BBB;\">  </span><span style=\"color: #3D7B7B; font-style: italic;\">// myColorScheme is *always* used.</span>\n}\n</pre></div>\n\n<p>See <a href=\"https://developer.android.com/training/wearables/tiles/get_started?version=3#theming\" target=\"_blank\">Theming</a> for more information on the theming system.</p>\n\n<h2><span style=\"font-size: x-large;\">Develop and debug</span></h2>\n\n<p>To speed up your development cycle, Wear OS provides several tools to help you debug and test your tiles directly in Android Studio and on the command line.</p>\n<ul><ul>\n<li><b><a href=\"https://developer.android.com/training/wearables/tiles/debug#preview-tiles\" target=\"_blank\">Preview tiles in Android Studio</a>.</b> This is especially helpful when developing layouts for different screen sizes.</li>\n<li><b><a href=\"https://developer.android.com/training/wearables/tiles/debug#adb\" target=\"_blank\">Manipulate tiles with adb</a></b>. Useful for QA tasks, including screenshot testing.</li>\n</ul></ul>\n \n<h2><span style=\"font-size: x-large;\">Dive in and start building</span></h2>\n<p>These resources are designed to make building high-quality Wear OS tiles easier and more inspiring. We can't wait to see what you create with them.</p>\n\n<p><b>Explore the layouts and get started today by checking out the <a href=\"https://www.figma.com/community/file/1507852095734722321\" target=\"_blank\">Figma design kit</a> or the <a href=\"https://github.com/android/wear-os-samples/tree/main/WearTilesKotlin/app/src/debug/java/com/example/wear/tiles/golden\" target=\"_blank\">code on GitHub</a>.</b></p>",
    "published": "2025-08-26T08:59:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Ever-present and useful: Building complication data sources for Wear OS",
    "link": "https://android-developers.googleblog.com/2025/08/building-complication-data-sources-wear-os.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj8rO4SzM_CIo7QCce6qqmIRM9Pit4UjI_X4s9ZLkIT7bXOh780z7TZ9Bwq519o0AserYN0AJE4GAm6AJoodPzE7wqjin7gK6lV1ya0E0Nj4mHWfgncLgBO2n3nX8QKw__PoQLXleTzE16GQ30tUyTt6vfm4f6icKgzRNxM8p1NmQXwnmjhrih-wKDLBoI/s1600/building-complication-data-sources-Wear%20OS.png\" style=\"display: none;\" />\n\n<em>Posted by Garan Jenkin – Developer Relations Engineer</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjcSWofOBZN1NMVD1G_eQ6cpBNDjBxA7gvqbxuINqOzmAyFeVjIfKvpDxV0qrXm52aMuk-33TW1tfj6ENA4W35mHGn57vqppNtrfxXFgHRqjytQtmZDvQVK5Jo_Wl5VWPHrN5haDztZIPnwG9R5xkWQh68q4CdwM-nNLCua6XeDD07oPQo2IzGG_EHZOqg/s1600/complications-wear-os-banner.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjcSWofOBZN1NMVD1G_eQ6cpBNDjBxA7gvqbxuINqOzmAyFeVjIfKvpDxV0qrXm52aMuk-33TW1tfj6ENA4W35mHGn57vqppNtrfxXFgHRqjytQtmZDvQVK5Jo_Wl5VWPHrN5haDztZIPnwG9R5xkWQh68q4CdwM-nNLCua6XeDD07oPQo2IzGG_EHZOqg/s1600/complications-wear-os-banner.png\" /></a>\n\n<blockquote><i>This post is part of <a href=\"https://android-developers.googleblog.com/2025/08/spotlight-week-wear-os.html\" target=\"_blank\">Wear OS Spotlight Week</a>. Today, we're focusing on <b>creating engaging experiences across the various surfaces available on the wrist</b>.</i></blockquote>\n\n<p>Put your app's unique information directly on a user's watch face by building your own <a href=\"https://developer.android.com/design/ui/wear/guides/m2-5/surfaces/complications\" target=\"_blank\">complications</a>. These are the small, glanceable details on a watch face, like step count, date, or weather, that are used to convey additional information, beyond simply telling the time.</p>\n\n<p>Watches such as the recently-launched <a href=\"https://android-developers.googleblog.com/2025/08/build-your-app-to-meet-users-on-newest-pixel-devices.html\" target=\"_blank\">Pixel Watch 4</a> feature watch faces with as many as 8 complications. These small, powerful display elements are a great way to provide quick, valuable information and keep users connected to your app.</p>\n\n<p>Let’s look at how you can build your own complication data sources, surfacing useful information to the user directly on their watch face, and helping drive engagement with your app.</p>\n\n<div style=\"text-align: center;\"><img alt=\"A round, analog Wear OS watch face showing 8 complications\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgvaLb7IANbofQ3QFb3AIIKHyq_xpenRJDxwf3e6ltzenzfO0zzpV1AJq_u1MmMv_f0GonssUPHORfeGDxwP4MRsKj-DCmQg9ecD1Tg8xY3SgF5MWJ10BQoFjJzN52ZL1nW9JmglU-az2CgemKrOerAl-M6lIpAtIhkK5TE3gRROnXPtul-i74DtqsOJso/s1600/complications-watch-face-wear-os.png\" width=\"30%\" /></div><center><em>A watch face showing 8 complications - 4 arc-style complications around the edge of the watch face, and 4 circular complications within the center of the watch face</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">Key principles of complications</span></h2>\n\n<p>In order to help understand complications, let’s first review some of the key architectural aspects of their design:</p>\n<ul><ul>\n<li>Apps provide only a complication <b>data source</b> - the watch face takes care of all layout and rendering.</li></ul><ul>\n<li>Complication data is <b><a href=\"https://developer.android.com/training/wearables/watch-faces/adding-complications#types-fields\" target=\"_blank\">typed</a></b> - both complication data sources and watch faces specify which types are supported respectively.</li></ul><ul>\n<li>Watch faces define <b>slots</b> - these are spaces on the watch face that can host complications.</li>\n</ul></ul>\n\n<div style=\"text-align: center;\"><img alt=\"A flow chart illustrating the flow of requests and ComplicationData between the Wear OS system, watch face, and complication data source\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh58q6BrYYMnMnQOQDOm1UqbI1LvXGjupDud08gt8CkJtXDE3YkF6R3GMLZH7KRR6LA7SXdJm3p5xcI4lhQ7NoZ9S4pE_PMivHmeEj3XZhdmFJpjg8sSjeRFwXrYAMmtZoRwFjtw8OS05NXPgBN_4W18RcIXe4q-kGFLeJHaa7DTBjvsfwOqKMKJsnlTLA/s1600/complicationdata-requests-flow-chart-wear-os.png\" width=\"100%\" /></div><center><em>The flow of requests and ComplicationData between the Wear OS system, watch face, and complication data source</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">What are complications good for?</span></h2>\n\n<p>Complications are great for providing the user with bite-size data during the course of the day. Additionally, complications can provide a great launch point into your full app experience.</p> \n\n<p><a href=\"https://developer.android.com/design/ui/wear/guides/m2-5/surfaces/complications#types\" target=\"_blank\">Complications Data source types (full list)</a> include <span style=\"color: #0d904f; font-family: courier;\">SHORT_TEXT</span> and <span style=\"color: #0d904f; font-family: courier;\">SMALL_IMAGE</span>. Similarly, watch faces declare what types they can render.</p>\n\n<p>For example, if you’re building an app which includes fitness goals, a good choice for a complication data source might be one that provides the <span style=\"color: #0d904f; font-family: courier;\">GOAL_PROGRESS</span> or <span style=\"color: #0d904f; font-family: courier;\">RANGED_VALUE</span> data types, to show progress toward that goal.</p>\n\n<p>Conversely, complications are less appropriate for larger amounts of data, such as the contents of a chat message. They’re also not suitable for very frequent updates, such as real-time fitness metrics generated by your app.</p>\n\n<h2><span style=\"font-size: x-large;\">Creating a complication data source</span></h2>\n\n<p>Let’s look at creating a complication data source for that fitness goal mentioned above.</p>\n\n<p>First, we create a service that extends <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/watchface/complications/datasource/SuspendingComplicationDataSourceService\" target=\"_blank\">SuspendingComplicationDataSourceService</a></span>:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">class</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue; font-weight: bold;\">MyDataSourceService</span><span style=\"color: #bbbbbb;\"> </span>:<span style=\"color: #bbbbbb;\"> </span>SuspendingComplicationDataSourceService()<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">override</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">suspend</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">onComplicationRequest</span>(request:<span style=\"color: #bbbbbb;\"> </span>ComplicationRequest):<span style=\"color: #bbbbbb;\"> </span>ComplicationData? {\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #3d7b7b; font-style: italic;\">// Handle both GOAL_PROGRESS and RANGED_VALUE</span>\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: green; font-weight: bold;\">return</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">when</span><span style=\"color: #bbbbbb;\"> </span>(request.<span style=\"color: #687822;\">complicationType</span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">            </span>ComplicationType.<span style=\"color: #687822;\">GOAL_PROGRESS</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-&gt;</span><span style=\"color: #bbbbbb;\"> </span>goalProgressComplicationData()\n<span style=\"color: #bbbbbb;\">            </span>ComplicationType.<span style=\"color: #687822;\">RANGED_VALUE</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-&gt;</span><span style=\"color: #bbbbbb;\"> </span>rangedValueComplicationData()\n<span style=\"color: #bbbbbb;\">            </span><span style=\"color: green; font-weight: bold;\">else</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-&gt;</span><span style=\"color: #bbbbbb;\"> </span>NoDataComplicationData()\n<span style=\"color: #bbbbbb;\">        </span>}\n<span style=\"color: #bbbbbb;\">    </span>}\n\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// Apps should override this so that watch face previews contain</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// complication data</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">override</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">getPreviewData</span>(type:<span style=\"color: #bbbbbb;\"> </span>ComplicationType)<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>createPreviewData()\n}\n</pre></div>\n\n<p>To create the actual data to return, we create a <span style=\"color: #0d904f; font-family: courier;\">ComplicationData</span> object, shown here for <span style=\"color: #0d904f; font-family: courier;\">GOAL_PROGRESS</span>:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">goalProgressComplicationData</span>():<span style=\"color: #bbbbbb;\"> </span>ComplicationData<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">goalProgressText</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>PlainComplicationText\n<span style=\"color: #bbbbbb;\">        </span>.<span style=\"color: #687822;\">Builder</span>(<span style=\"color: #ba2121;\">\"</span><span style=\"color: #a45a77; font-weight: bold;\">${</span>goalProgressValue.<span style=\"color: #687822;\">toInt</span>()<span style=\"color: #a45a77; font-weight: bold;\">}</span><span style=\"color: #ba2121;\"> km\"</span>)\n<span style=\"color: #bbbbbb;\">        </span>.<span style=\"color: #687822;\">build</span>()\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">return</span><span style=\"color: #bbbbbb;\"> </span>GoalProgressComplicationData.<span style=\"color: #687822;\">Builder</span>(\n<span style=\"color: #bbbbbb;\">        </span>value<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>goalProgressValue,\n<span style=\"color: #bbbbbb;\">        </span>targetValue<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>goalTarget,\n<span style=\"color: #bbbbbb;\">        </span>contentDescription<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>goalProgressText\n<span style=\"color: #bbbbbb;\">    </span>)\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// Set some additional optional data</span>\n<span style=\"color: #bbbbbb;\">    </span>.<span style=\"color: #687822;\">setText</span>(goalProgressText)\n<span style=\"color: #bbbbbb;\">    </span>.<span style=\"color: #687822;\">setTapAction</span>(tapAction)\n<span style=\"color: #bbbbbb;\">    </span>.<span style=\"color: #687822;\">setMonochromaticImage</span>(...)\n<span style=\"color: #bbbbbb;\">    </span>.<span style=\"color: #687822;\">build</span>()\n}\n</pre></div><br />\n\n<blockquote><i><b>Note:</b> The <span style=\"color: #0d904f; font-family: courier;\">GoalProgressComplicationData</span> has numerous optional fields in addition to the mandatory ones. You should try to populate as many of these as you can.</i></blockquote>\n\n<p>Finally, add the data source to the manifest:</p>\n\n<!--text only--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span>&lt;service\n    android:name=\".WorkoutStatusDataSourceService\"\n    android:exported=\"true\"\n    android:directBootAware=\"true\"\n    android:label=\"@string/status_complication_label\"\n    android:permission=\"com.google.android.wearable.permission.BIND_COMPLICATION_PROVIDER\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"android.support.wearable.complications.ACTION_COMPLICATION_UPDATE_REQUEST\" /&gt;\n    &lt;/intent-filter&gt;\n\n    &lt;!--\n      Supported data types. Note that the preference order of the watch face,\n      not the complication data source, decides which type will be chosen.\n    --&gt;\n    &lt;meta-data\n        android:name=\"android.support.wearable.complications.SUPPORTED_TYPES\"\n        android:value=\"GOAL_PROGRESS,RANGED_VALUE\" /&gt;\n    &lt;meta-data\n        android:name=\"android.support.wearable.complications.UPDATE_PERIOD_SECONDS\"\n        android:value=\"300\" /&gt;\n&lt;/service&gt;\n</pre></div>\n\n<blockquote><b>Note:</b><i> The use of the <span style=\"color: #0d904f; font-family: courier;\">directBootAware</span> attribute on the service lets the complication service run before the user has unlocked the device on boot.</i></blockquote>\n\n<h2><span style=\"font-size: x-large;\">Choosing your update model</span></h2>\n\n<p>Complications support both a push and a pull-style update mechanism. In the example above, <span style=\"color: #0d904f; font-family: courier;\">UPDATE_PERIOD_SECONDS</span> is set such that the data is refreshed every 5 minutes. Wear OS will check the updated value of the complication data source with that frequency.</p>\n\n<p>This works well for a scenario such as a weather complication, but in other scenarios, it may make more sense for the updates to be driven by the app. To achieve this, you can:</p>\n<ol>\n<li>Set <span style=\"color: #0d904f; font-family: courier;\">UPDATE_PERIOD_SECONDS</span> to <span style=\"color: #0d904f; font-family: courier;\">0</span> to indicate that the app will drive the update process.</li>\n<li>Using <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/androidx/wear/watchface/complications/datasource/ComplicationDataSourceUpdateRequester\" target=\"_blank\">ComplicationDataSourceUpdateRequester</a></span> in your app code to signal to the Wear OS system that an update should be requested, for example in a <span style=\"color: #0d904f; font-family: courier;\">WorkManager</span> job, or in <span style=\"color: #0d904f; font-family: courier;\">WearableListenerService</span>.</li></ol>\n\n<h2><span style=\"font-size: x-large;\">Leveraging platform bindings for high-frequency data</span></h2>\n\n<p>Particularly for health-related complications, we can take advantage of platform <a href=\"https://developer.android.com/reference/androidx/wear/protolayout/expression/PlatformHealthSources\" target=\"_blank\">data sources</a>, to improve our goal progress complication. We can use these data sources with dynamic expressions to create complication content which is dynamically re-evaluated every second while the watch face is in interactive mode (that is, when it’s not in system ambient / always-on mode).</p>\n\n<p>Let’s update the complication so that instead of just showing the distance, it shows a celebratory message when the target is reached. First we create a <a href=\"https://developer.android.com/reference/androidx/wear/protolayout/expression/DynamicBuilders.DynamicString\" target=\"_blank\">dynamic string</a> as follows:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">distanceKm</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>PlatformHealthSources.<span style=\"color: #687822;\">dailyDistanceMeters</span>().<span style=\"color: #687822;\">div</span>(<span style=\"color: #666666;\">1000f</span>)\n<span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">formatter</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>DynamicBuilders.<span style=\"color: #687822;\">DynamicFloat</span>.<span style=\"color: #687822;\">FloatFormatter</span>.<span style=\"color: #687822;\">Builder</span>()\n<span style=\"color: #bbbbbb;\">    </span>.<span style=\"color: #687822;\">setMaxFractionDigits</span>(<span style=\"color: #666666;\">2</span>)\n<span style=\"color: #bbbbbb;\">    </span>.<span style=\"color: #687822;\">setMinFractionDigits</span>(<span style=\"color: #666666;\">0</span>)\n<span style=\"color: #bbbbbb;\">    </span>.<span style=\"color: #687822;\">build</span>()\n<span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">goalProgressText</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>DynamicBuilders.<span style=\"color: #687822;\">DynamicString</span>\n<span style=\"color: #bbbbbb;\">    </span>.<span style=\"color: #687822;\">onCondition</span>(distanceKm.<span style=\"color: #687822;\">lt</span>(distanceKmTarget))\n<span style=\"color: #bbbbbb;\">    </span>.<span style=\"color: #687822;\">use</span>(\n<span style=\"color: #bbbbbb;\">        </span>distanceKm\n<span style=\"color: #bbbbbb;\">            </span>.<span style=\"color: #687822;\">format</span>(formatter)\n<span style=\"color: #bbbbbb;\">            </span>.<span style=\"color: #687822;\">concat</span>(DynamicBuilders.<span style=\"color: #687822;\">DynamicString</span>.<span style=\"color: #687822;\">constant</span>(<span style=\"color: #ba2121;\">\" km\"</span>))\n<span style=\"color: #bbbbbb;\">    </span>)\n<span style=\"color: #bbbbbb;\">    </span>.<span style=\"color: #687822;\">elseUse</span>(\n<span style=\"color: #bbbbbb;\">        </span>DynamicBuilders.<span style=\"color: #687822;\">DynamicString</span>.<span style=\"color: #687822;\">constant</span>(<span style=\"color: #ba2121;\">\"Success!\"</span>)\n<span style=\"color: #bbbbbb;\">    </span>)\n</pre></div>\n\n<p>Then we include this text, and the dynamic value <span style=\"color: #0d904f; font-family: courier;\">distanceKm</span>, with the <a href=\"https://developer.android.com/reference/androidx/wear/watchface/complications/data/GoalProgressComplicationData.Builder#Builder%28androidx.wear.protolayout.expression.DynamicBuilders.DynamicFloat,kotlin.Float,kotlin.Float,androidx.wear.watchface.complications.data.ComplicationText%29\" target=\"_blank\">dynamic version of the complication builder</a>.</p>\n\n<p>In this way, the distance is updated every second, with no need for further requests to the data source. This means <span style=\"color: #0d904f; font-family: courier;\">UPDATE_PERIOD_SECONDS</span> can be set to a large value, saving battery, and the celebratory text is immediately shown the moment they pass their target!</p>\n\n<h2><span style=\"font-size: x-large;\">Configuring complications</span></h2>\n\n<p>For some data sources, it is useful to let the user configure what data should be shown. In the fitness goal example, consider that the user might have weekly, monthly, and yearly goals.</p> \n\n<p>Adding a configuration activity allows them to select which goal should be shown by the complication. To do this, add the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/support/wearable/complications/ComplicationProviderService#METADATA_KEY_PROVIDER_CONFIG_ACTION\" target=\"_blank\">PROVIDER_CONFIG_ACTION</a></span> metadata to your service definition, and implement an activity with a filter for this intent, for example:</p>\n\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #666666;\">&lt;</span>service<span style=\"color: #bbbbbb;\"> </span>android:name<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\".MyGoalDataSourceService\"</span><span style=\"color: #bbbbbb;\"> </span>...<span style=\"color: #666666;\">&gt;</span>\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: #666666;\">&lt;!--</span><span style=\"color: #bbbbbb;\"> </span>...<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">--&gt;</span>\n\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: #666666;\">&lt;</span>meta<span style=\"color: #666666;\">-</span>data\n<span style=\"color: #bbbbbb;\">      </span>android:name<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\"android.support.wearable.complications.PROVIDER_CONFIG_ACTION\"</span>\n<span style=\"color: #bbbbbb;\">      </span>android:value<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\"com.myapp.MY_GOAL_CONFIG\"</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">/&gt;</span>\n<span style=\"color: #666666;\">&lt;/</span>service<span style=\"color: #666666;\">&gt;</span>\n\n<span style=\"color: #666666;\">&lt;</span>activity<span style=\"color: #bbbbbb;\"> </span>android:name<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\".MyGoalConfigurationActivity\"</span><span style=\"color: #bbbbbb;\"> </span>...<span style=\"color: #666666;\">&gt;</span>\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: #666666;\">&lt;</span>intent<span style=\"color: #666666;\">-</span>filter<span style=\"color: #666666;\">&gt;</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #666666;\">&lt;</span>action<span style=\"color: #bbbbbb;\"> </span>android:name<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\"com.myapp.MY_GOAL_CONFIG\"</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">/&gt;</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #666666;\">&lt;</span>category<span style=\"color: #bbbbbb;\"> </span>android:name<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\"android.support.wearable.complications.category.PROVIDER_CONFIG\"</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">/&gt;</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #666666;\">&lt;</span>category<span style=\"color: #bbbbbb;\"> </span>android:name<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\"android.intent.category.DEFAULT\"</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">/&gt;</span>\n<span style=\"color: #bbbbbb;\">  </span><span style=\"color: #666666;\">&lt;/</span>intent<span style=\"color: #666666;\">-</span>filter<span style=\"color: #666666;\">&gt;</span>\n<span style=\"color: #666666;\">&lt;/</span>activity<span style=\"color: #666666;\">&gt;</span>\n</pre></div>\n\n<p>In the activity itself, the details of the complication being configured can be extracted from the intent:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #3d7b7b; font-style: italic;\">// Keys defined on ComplicationDataSourceService</span>\n<span style=\"color: #3d7b7b; font-style: italic;\">// (-1 assigned when the ID or type was not available)</span>\n<span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">id</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>intent.<span style=\"color: #687822;\">getIntExtra</span>(EXTRA_CONFIG_COMPLICATION_ID,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-1</span>)\n<span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">type</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>intent.<span style=\"color: #687822;\">getIntExtra</span>(EXTRA_CONFIG_COMPLICATION_TYPE,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-1</span>)\n<span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">source</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>intent.<span style=\"color: #687822;\">getStringExtra</span>(EXTRA_CONFIG_DATA_SOURCE_COMPONENT)\n</pre></div>\n\n<p>To indicate a successful configuration, the activity should set the result when exiting:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span>setResult(Activity.<span style=\"color: #687822;\">RESULT_OK</span>)<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #3d7b7b; font-style: italic;\">// Or RESULT_CANCELED to cancel configuration</span>\nfinish()\n</pre></div>\n\n<p>The ID is the same ID passed in <span style=\"color: #0d904f; font-family: courier;\">ComplicationRequest</span> to the complication data source service. The <span style=\"color: #0d904f; font-family: courier;\">Activity</span> should write any configuration to a data store, using the ID as a key, and the service can retrieve the appropriate configuration to determine what data to return in response to each <span style=\"color: #0d904f; font-family: courier;\">onComplicationRequest()</span>.</p>\n\n<h2><span style=\"font-size: x-large;\">Working efficiently with time and events</span></h2>\n\n<p>In the example above, <span style=\"color: #0d904f; font-family: courier;\">UPDATE_PERIOD_SECONDS</span> is set at 5 minutes - this is the smallest value that can be set for the update period. Ideally this value should be set as large as is acceptable for the use case: This reduces requests and improves battery life.</p>\n\n<p>Consider these examples:</p>\n<ul><ul>\n<li><b>A known list of events -</b>  For example a calendar. In this case, use <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/watchface/complications/datasource/SuspendingTimelineComplicationDataSourceService\" target=\"_blank\">SuspendingTimelineComplicationDataSourceService</a></span>.</li>\n\n<p>This allows you to provide the series of events in advance, with no need for the watch face to request updates. The calendar data source would only need to push updates if a change is made, such as another event being scheduled for the day, offering timeliness and efficiency.</p>\n\n<p><span style=\"color: #0d904f; font-family: courier;\">ComplicationDataTimeline</span> requires a <span style=\"color: #0d904f; font-family: courier;\">defaultComplicationData</span> as well as the list of entries: This is used in the case where none of the timeline entries are valid for the current time. For example, for a calendar it could contain the text “No event” where the user has nothing booked. Where there are overlapping entries, the entry with the shortest interval is chosen.</p></ul></ul>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">override</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">suspend</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">onComplicationRequest</span>(request:<span style=\"color: #bbbbbb;\"> </span>ComplicationRequest):<span style=\"color: #bbbbbb;\"> </span>ComplicationDataTimeline? {\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">return</span><span style=\"color: #bbbbbb;\"> </span>ComplicationDataTimeline(\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #3d7b7b; font-style: italic;\">// The default for when there is no event in the calendar</span>\n<span style=\"color: #bbbbbb;\">        </span>defaultComplicationData<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>noEventComplicationData,\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #3d7b7b; font-style: italic;\">// A list of calendar entries</span>\n<span style=\"color: #bbbbbb;\">        </span>timelineEntries<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>listOf(\n<span style=\"color: #bbbbbb;\">            </span>TimelineEntry(\n<span style=\"color: #bbbbbb;\">                </span>validity<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>TimeInterval(event1.<span style=\"color: #687822;\">start</span>,<span style=\"color: #bbbbbb;\"> </span>event1.<span style=\"color: #687822;\">end</span>),\n<span style=\"color: #bbbbbb;\">                </span>complicationData<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>event1.<span style=\"color: #687822;\">complicationData</span>\n<span style=\"color: #bbbbbb;\">            </span>),\n<span style=\"color: #bbbbbb;\">            </span>TimelineEntry(\n<span style=\"color: #bbbbbb;\">                </span>validity<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>TimeInterval(event2.<span style=\"color: #687822;\">start</span>,<span style=\"color: #bbbbbb;\"> </span>event2.<span style=\"color: #687822;\">end</span>),\n<span style=\"color: #bbbbbb;\">                </span>complicationData<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>event2.<span style=\"color: #687822;\">complicationData</span>\n<span style=\"color: #bbbbbb;\">            </span>)\n<span style=\"color: #bbbbbb;\">        </span>)\n<span style=\"color: #bbbbbb;\">    </span>)\n}\n</pre></div><br />\n\n<ul><ul>\n<li><b>Working with time or timers -</b> If your complication data contains time or a timer, such as a countdown to a particular event, use built-in classes such as <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/androidx/wear/watchface/complications/data/TimeDifferenceComplicationText\" target=\"_blank\">TimeDifferenceComplicationText</a></span> and <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/androidx/wear/watchface/complications/data/TimeFormatComplicationText\" target=\"_blank\">TimeFormatComplicationText</a></span> - this keeps the data up-to-date while avoiding regular requests to the data source service.</li>\n\n<p>For example, to create a countdown to the New Year:</p></ul></ul>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span>TimeDifferenceComplicationText.<span style=\"color: #687822;\">Builder</span>(\n<span style=\"color: #bbbbbb;\">    </span>TimeDifferenceStyle.<span style=\"color: #687822;\">SHORT_SINGLE_UNIT</span>,\n<span style=\"color: #bbbbbb;\">    </span>CountDownTimeReference(newYearInstant)\n)\n.<span style=\"color: #687822;\">setDisplayAsNow</span>(<span style=\"color: green; font-weight: bold;\">true</span>)\n.<span style=\"color: #687822;\">build</span>()\n</pre></div><br />\n\n\n<ul><ul>\n<li><b>Data that should be shown at a specific time and/or duration -</b> use <span style=\"color: #0d904f; font-family: courier;\">setValidTimeRange()</span> to control when complication data should be shown, again avoiding repeated updates.</li>\n\n<p>This can be useful in the case where it is not possible to use a timeline but where data can become stale, allowing you to control the visibility of this data.</p></ul></ul>\n\n\n<h2><span style=\"font-size: x-large;\">Working with activation and deactivation</span></h2>\n\n<p>It can be very useful to track whether your complication is currently in use on the active watch face or not. This can help with:</p>\n\n<ol>\n<li><b>Avoiding unnecessary work -</b> for example, if a weather complication has not been set in the active watch face, then there is no need to enable a <span style=\"color: #0d904f; font-family: courier;\">WorkManager</span> job to periodically fetch weather updates, saving battery and network usage.</li>\n\n<li><b>Aiding discovery -</b> if <span style=\"color: #0d904f; font-family: courier;\">onComplicationActivated</span> has never been called, then the user has never used your complication on a watch face.</li>\n  \n<p>This can be a useful signal to provide an educational moment in your phone or Wear OS app, drawing attention to this feature, and sharing potential benefits with the user that they may not be aware of.</p></ol>\n\n<p>To facilitate these use cases, override the appropriate methods in your complication service:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">class</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue; font-weight: bold;\">MyDataSourceService</span>()<span style=\"color: #bbbbbb;\"> </span>:<span style=\"color: #bbbbbb;\"> </span>SuspendingComplicationDataSourceService()<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">override</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">onComplicationActivated</span>(complicationInstanceId:<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #b00040;\">Int</span>,<span style=\"color: #bbbbbb;\"> </span>type:<span style=\"color: #bbbbbb;\"> </span>ComplicationType)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: green; font-weight: bold;\">super</span>.<span style=\"color: #687822;\">onComplicationActivated</span>(complicationInstanceId,<span style=\"color: #bbbbbb;\"> </span>type)\n\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #3d7b7b; font-style: italic;\">// Keep track of which complication has been enabled, and</span>\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #3d7b7b; font-style: italic;\">// start any necessary work such as registering periodic</span>\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #3d7b7b; font-style: italic;\">// WorkManager jobs</span>\n<span style=\"color: #bbbbbb;\">    </span>}\n<span style=\"color: #bbbbbb;\">    </span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">override</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">onComplicationDeactivated</span>(complicationInstanceId:<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #b00040;\">Int</span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: green; font-weight: bold;\">super</span>.<span style=\"color: #687822;\">onComplicationDeactivated</span>(complicationInstanceId)\n\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #3d7b7b; font-style: italic;\">// Complication instance has been disabled, so remove all</span>\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #3d7b7b; font-style: italic;\">// registered work</span>\n<span style=\"color: #bbbbbb;\">    </span>}\n</pre></div>\n\n<h4><span style=\"font-size: large;\">Some additional points to consider when implementing your data sources:</span></h4>\n\n<ul><ul>\n<li><b>Support multiple types to maximize usefulness and compatibility -</b> Watch faces will support some complication data types, but likely not all of them.</li>\n\n<p>Adding support to your data source for multiple types makes it most useful to the user. In the above example, we implemented both <span style=\"color: #0d904f; font-family: courier;\">RANGED_VALUE</span> and <span style=\"color: #0d904f; font-family: courier;\">GOAL_PROGRESS</span>, as both can be used to represent progress-type data.</p>\n\n<p>Similarly, if you were to implement a calendar complication, you could use both <span style=\"color: #0d904f; font-family: courier;\">SHORT_TEXT</span> and <span style=\"color: #0d904f; font-family: courier;\">LONG_TEXT</span> to maximize compatibility with the available slots on the watch face.</p>\n\n<li><b>Use different data sources for different user journeys -</b> Your app is not limited to providing one complication data source. You should support more than one if you have different use cases to cater for. For example, your health and fitness app might have a complication to provide your progress towards your goals, but also a separate complication to show sleep stats.</li>\n\n<li><b>Avoid heavy work in <span style=\"color: #0d904f; font-family: courier;\">onComplicationRequest()</span> -</b> For example,if the progress toward a fitness goal involves intensive processing of a large number of workouts, do this elsewhere. The request to the complication data source should ideally just return the value with minimal computation.</li>\n\n<li><b>Avoid your service having extensive dependencies on other app components -</b> When in use, your data source service will be started when the Wear OS device starts up, and at other times during the day. You should avoid the service needing too many other components from within your app to be started in order to run, to maintain good system performance.</li>\n\n<li><b>Consider backup and restore -</b> If the complication is configurable, it might make sense to restore these settings - learn <a href=\"https://developer.android.com/reference/kotlin/androidx/wear/watchface/complications/datasource/ComplicationDataSourceService#METADATA_KEY_CONFIG_RESTORE_SUPPORTED%28%29\" target=\"_blank\">how to implement backup and restore</a> for complication data sources.</li>\n\n<li>Think about the discovery journey - Your complications will be available as an option on the user’s watch face when your app is installed on the watch. Consider how you can promote and educate the user on this functionality, both in your phone app and your Wear OS app, and leverage methods such as <span style=\"color: #0d904f; font-family: courier;\">onComplicationActivated()</span> to inform this process.</li>\n\n<h2><span style=\"font-size: x-large;\">Resources for creating complications</span></h2>\n\n<p>Complications are a great way to elevate your app experience for users, and to differentiate your app from others.</p>\n\n<p>Check out these resources for more information on creating complication data sources. We look forward to seeing what you can do.</p>\n<ul><ul>\n<li><a href=\"https://developer.android.com/training/wearables/complications\" target=\"_blank\">Guidance for developers</a></li>\n<li><a href=\"https://github.com/android/wear-os-samples/tree/main/Complications\" target=\"_blank\">Sample app</a> on GitHub</li>\n<li><a href=\"https://developer.android.com/design/ui/wear/guides/m2-5/surfaces/complications\" target=\"_blank\">Guidance for designers</a></li>\n<li><a href=\"https://developer.android.com/training/wearables/complications/exposing-data\" target=\"_blank\">Creating data sources</a></li>\n<li><a href=\"https://developer.android.com/reference/androidx/wear/watchface/complications/datasource/ComplicationDataSourceService\" target=\"_blank\">ComplicationDataSourceService</a> - <i>base class for data sources</i></li>\n<li><a href=\"https://developer.android.com/reference/androidx/wear/watchface/complications/datasource/SuspendingComplicationDataSourceService\" target=\"_blank\">SuspendingComplicationDataSourceService</a> - <i>recommended class for working with Kotlin</i></li>\n<li><a href=\"https://developer.android.com/reference/androidx/wear/protolayout/expression/package-summary\" target=\"_blank\">Dynamic expressions</a></li>\n</ul></ul>\n\n<p><i>Happy Coding!</i></p></ul></ul>",
    "published": "2025-08-26T08:58:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "A new layer of security for certified Android devices",
    "link": "https://android-developers.googleblog.com/2025/08/elevating-android-security.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiUkp5dA-6D3rIQN9qhkGM2jBePBpZEWKzRTYaQQdYEItE8dNavcwQdcLHGCBQKBN65O-TQarjAP_CsMpARFMplATz5_7xf1D-GxZ85DRluju1ZU1E6k9fFHwCEJZp4YgmXCyES18I5kxVBjbwkrt6qhLbctXubpj00gH0dBwAAFTiF8stI05tgk1Ma82Q/s1600/Android-Developer-Verification.png\" style=\"display: none;\" />\n\n<em>Posted by Suzanne Frey – VP, Product, Trust &amp; Growth for Android</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVDLlL6_D8zu5LjIbWDraL1LZVUOoE5dJi9skQjPFemQYocDXVnM8wukbd9tVhUWB_Mbp08ExA4cHulE_vToF52p3OGDssWT5ZDClIb0-DDM29qQeYxj1Zgkrq8TCkyMUKKETlmv2DjtiXC_A7kkL1B_L1MN0ziUGexDCGib5fX5uCnPqQz3rCvysG-Y8/s1600/Android_Verification_Banner02.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVDLlL6_D8zu5LjIbWDraL1LZVUOoE5dJi9skQjPFemQYocDXVnM8wukbd9tVhUWB_Mbp08ExA4cHulE_vToF52p3OGDssWT5ZDClIb0-DDM29qQeYxj1Zgkrq8TCkyMUKKETlmv2DjtiXC_A7kkL1B_L1MN0ziUGexDCGib5fX5uCnPqQz3rCvysG-Y8/s1600/Android_Verification_Banner02.png\" /></a>\n\n<p>You shouldn’t have to choose between open and secure. By engineering security into the core part of the OS, Android has proven that you can have both, and we continue taking new steps in that direction.</p>\n\n<p>As new threats emerge, we’ve continued to evolve our defenses. Following recent attacks, including those targeting people's financial data on their phones, we've worked to increase developer accountability to prevent abuse. We’ve seen how malicious actors hide behind anonymity to harm users by impersonating developers and using their brand image to create convincing fake apps. The scale of this threat is significant: our recent analysis found <b>over 50 times more malware</b> from internet-sideloaded sources than on apps available through Google Play.</p>\n\n<p>To better protect users from repeat bad actors spreading malware and scams, we're adding another layer of security to make installing apps safer for everyone: <b>developer verification</b>.</p>\n\n<p>Starting next year, Android will require all apps to be registered by verified developers in order to be installed by users on <a href=\"https://www.android.com/certified/partners/\" target=\"_blank\">certified Android devices</a>. This creates crucial accountability, making it much harder for malicious actors to quickly distribute another harmful app after we take the first one down. Think of it like an ID check at the airport, which confirms a traveler's identity but is separate from the security screening of their bags; we will be confirming who the developer is, not reviewing the content of their app or where it came from. This change will start in a few select countries specifically impacted by these forms of fraudulent app scams, often from repeat perpetrators.</p> \n\n<p>Since we <a href=\"https://android-developers.googleblog.com/2023/07/boosting-trust-and-transparency-in-google-play.html\" target=\"_blank\">implemented</a> verification requirements on Google Play in 2023, we have seen firsthand how helpful developer identification is in stopping bad actors from exploiting anonymity to distribute malware, commit financial fraud, and steal sensitive data. Bringing a similar process to Android more broadly will provide a <b>consistent, common sense baseline of developer accountability across the ecosystem</b>.</p>\n\n<p>In early discussions about this initiative, we've been encouraged by the supportive initial feedback we've received. In Brazil, the Brazilian Federation of Banks (FEBRABAN) sees it as a “significant advancement in protecting users and encouraging accountability.” This support extends to governments as well, with Indonesia's Ministry of Communications and Digital Affairs praising it for providing a “balanced approach” that protects users while keeping Android open. Similarly, Thailand’s Ministry of Digital Economy and Society sees it as a “positive and proactive measure” that aligns with their national digital safety policies. And partners like the Developer’s Alliance have called this a “critical step” for ensuring “trust, accountability, and security” across the entire ecosystem.</p>\n\n<p>To make this process as streamlined as possible, we are building a <b>new Android Developer Console</b> just for developers who only distribute outside of Google Play, so they can easily complete their verification; get an early look at <a href=\"https://support.google.com/android-developer-console/answer/16450960\" target=\"_blank\">how it works</a>. A note for student and hobbyist developers: we know your needs are different from commercial developers, so we’re creating a separate type of Android Developer Console account for you.</p>\n\n<p>If you distribute apps on Google Play, you’ve likely already met these verification requirements through the existing Play Console process. You can find more information about how these requirements apply to you <a href=\"https://developer.android.com/developer-verification#play-developers\" target=\"_blank\">in our guides</a>.</p>\n\n<p>To be clear, <b>developers will have the same freedom to distribute their apps directly to users through sideloading or to use any app store</b> they prefer. We believe this is how an open system should work—by preserving choice while enhancing security for everyone. Android continues to show that with the right design and security principles, open and secure can go hand in hand. For more details on the specific requirements, visit <a href=\"https://developer.android.com/developer-verification\" target=\"_blank\">our website</a>. We'll share more information in the coming months.</p>\n\n\n<h2><span style=\"font-size: x-large ;\">Timeline and how to prepare</span></h2>\n\n<p>To help you get ready, we encourage all developers who distribute apps on certified Android devices to sign up for early access. This is the best way to prepare and stay informed.</p>\n\n<p>Early participants will also get:</p>\n<ul><ul>\n<li>An invitation to an exclusive community discussion forum.</li>\n<li>Priority support for these new requirements.</li>\n<li>The chance to provide feedback and help us shape the experience.</li>\n</ul></ul><br />\n\n<p><b><a href=\"https://goo.gle/android-verification-early-access\" target=\"_blank\">Sign up for early access now</a></b></p>\n\n<h4><span style=\"font-size: medium ;\">Here is the timeline to help you plan:</span></h4>\n<ul><ul>\n<li><b>October 2025:</b> Early access begins. Invitations will be sent out gradually.</li>\n<li><b>March 2026:</b> Verification opens for all developers.</li>\n<li><b>September 2026:</b> These requirements go into effect in Brazil, Indonesia, Singapore, and Thailand. At this point, any app installed on a certified Android device in these regions must be registered by a verified developer.</li>\n<li><b>2027 and beyond:</b> We will continue to roll out these requirements globally.</li>\n</ul></ul>",
    "published": "2025-08-25T10:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Welcome to Wear OS Spotlight Week",
    "link": "https://android-developers.googleblog.com/2025/08/spotlight-week-wear-os.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhzwh5rbXnmb8Sbhh1QaQ-qvJig2dkDr9vEpFD05mP2wfrhZm0yumVvvsFzYX0JmDzH8rTuklkypR2FiJYw45CzrOu5IJojf-uDMSgBJK3S9x6D0RKgySeJodvynxx6aX6lhPVloMlWrZtQ7gr1z77ZVi0VJlDIiK79vSN4oIS2OkPVMGnevyQOOT6wZRk/s1600/Wear-OS-Spotlight-Week.png\" style=\"display: none;\" />\n\n<em>Posted by Chiara Chiappini – Android Developer Relations Engineer, and Kevin Hufnagle - Android Technical Writer\n</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEig8BfGRfXUcudLlRuAQblxaRrXIU4MWDBx-r7-nUYigOLm6fqnhGvN3VyZIifNDEB0zQq3yBaeVx9IsLomn9FtaWpe5lpInFi1xwmB5HzNkqH07DUd-4uRKG_eMgjXUE-c9ocnCXnY1kbT65OBBPGsQoDWjcnk0t7fjIIu3cVqwN77O5hOJIMgKrmP7J8/s1600/AndroidSpotlightWeek_WearOS_Blog-banner.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEig8BfGRfXUcudLlRuAQblxaRrXIU4MWDBx-r7-nUYigOLm6fqnhGvN3VyZIifNDEB0zQq3yBaeVx9IsLomn9FtaWpe5lpInFi1xwmB5HzNkqH07DUd-4uRKG_eMgjXUE-c9ocnCXnY1kbT65OBBPGsQoDWjcnk0t7fjIIu3cVqwN77O5hOJIMgKrmP7J8/s1600/AndroidSpotlightWeek_WearOS_Blog-banner.png\" /></a>\n\n\n\n<p><a href=\"https://developer.android.com/wear\" target=\"_blank\">Wear OS</a> is rapidly expanding its presence in the market, presenting a unique and significant opportunity for developers. With a growing number of users wearing and interacting with their smartwatches daily, building for Wear OS allows you to reach an even broader audience of Android users and boost your app's engagement more than ever before. The introduction of new hardware like the <a href=\"https://android-developers.googleblog.com/2025/08/build-your-app-to-meet-users-on-newest-pixel-devices.html\" target=\"_blank\">Pixel Watch 4</a> is a key driver of this momentum, enabling developers to bring  premium Wear OS experiences to this expanding user base.</p>\n\n<p>This week, we're putting a special focus on Wear OS: <b>Welcome to Wear OS Spotlight Week!</b></p>\n\n<p>Throughout the week, we'll dive into the different Wear OS surfaces where you can develop on-the-watch experiences. This blog post will be updated throughout the week with links to new announcements and resources, so check back here daily for updates.</p>\n\n<br />\n\n<h4><span style=\"font-size: large;\">Day 1: Material 3 Expressive on Wear OS</span></h4>\n<i>Monday, August 25, 2025</i>\n  \n<p>Learn how you can build beautiful and tailored Wear OS apps and tiles using the <a href=\"https://android-developers.googleblog.com/2025/08/introducing-material-3-expressive-for-wear-os.html\" target=\"_blank\">Material 3 Expressive Design language</a> and Jetpack libraries for Wear OS.</p>\n\n<p>To further explore the key principles and main features of Wear OS’s new design system, consult our <a href=\"https://developer.android.com/design/ui/wear\" target=\"_blank\">updated design guidance on the Android developer documentation website.</a></p>\n\n<h4><span style=\"font-size: large;\">Day 2: Build apps, tiles, and complication on Wear OS</span></h4>\n<i>Tuesday, August 26, 2025</i>\n\n<p>Discover how to <a href=\"https://android-developers.googleblog.com/2025/08/building-experiences-for-wear-os.html\" target=\"_blank\">build engaging experiences across Wear OS’s surfaces, including apps, tiles, complications, and notifications</a>. Learn how to create quick, glanceable content using familiar tools like Jetpack Compose and the ProtoLayout library, all while leveraging the beautiful new Material 3 Expressive design system.</p>\n\n<p>Next, understand how to build beautiful and effective Wear OS tiles using the <a href=\"https://developer.android.com/design/ui/wear/guides/get-started/apply\" target=\"_blank\">Material 3 Expressive design system</a> and <a href=\"https://android-developers.googleblog.com/2025/08/create-delightful-wear-os-widgets-using-sample-tile-layouts.html\" target=\"_blank\">a new collection of resources</a><b>.</b></p>\n\n<p>Dive deep into <a href=\"https://android-developers.googleblog.com/2025/08/building-complication-data-sources-wear-os.html\" target=\"_blank\">building complications that support data sources</a> which helps you show useful information to the user directly on the watch face, and can drive engagement with your app.</p>\n\n<p>Lastly, find out how <a href=\"https://android-developers.googleblog.com/2025/08/todoists-journey-to-modernize-wear-os-experience-with-material-3-expressive-credential-manager.html\" target=\"_blank\">Todoist has applied the latest updates on Wear OS</a> including new integrations with <a href=\"https://developer.android.com/design/ui/wear/guides/get-started/apply\" target=\"_blank\">Material 3 Expressive</a> and <a href=\"https://developer.android.com/training/wearables/apps/auth-wear\" target=\"_blank\">Credential Manager</a>. Improvements like these have helped Todoist become the world’s top task and time management app.</p>\n\n<h4><span style=\"font-size: large;\">Day 3: Watch faces</span></h4>\n<i>Wednesday, August 27, 2025</i>\n\n<p>Explore the wonderful world of watch faces! The <a href=\"https://android-developers.googleblog.com/2025/08/further-explorations-with-watch-face-push.html\" target=\"_blank\">Watch Face Push API for Wear OS 6</a> is here to unlock a world of dynamic watch faces. This powerful tool lets you create your own marketplace experience for the watch faces you create. Dive in and explore how you can promote your engaging watch faces today! 🎨. </p>\n\n<p>Next, <a href=\"https://android-developers.googleblog.com/2025/08/migrating-to-watch-face-format-amoledwatchfaces.html\" target=\"_blank\">discover how Amoledwatchfaces, a leading creator, successfully migrated to the Watch Face Format</a> for their 190+ watch faces. This switch led to faster development, improved battery life, and more customizable designs.</p>\n\n<p>Lastly, learn about <a href=\"https://android-developers.googleblog.com/2025/08/introducing-watch-face-designer.html\" target=\"_blank\">Watch Face Designer</a>, a new Figma plugin that’s available for watch face designers and developers to create watch faces with greater ease.</p>\n\n<h4><span style=\"font-size: large;\">Day 4: Credential Manager on Wear OS</span></h4>\n<i>Thursday, August 28, 2025</i>\n\n<p>Discover how to streamline authentication on your Wear OS app by using Credential Manager.</p>\n\n<p>We’ve got some great new resources to help you learn how everything works, and to help you get started crafting your own implementation:</p>\n\n<ul><ul>\n<li>Watch our <a href=\"https://youtu.be/SfkxK-rFeNM\" target=\"_blank\">Credential Manager video guide</a> and read about how <a href=\"https://android-developers.googleblog.com/2025/08/the-evolution-of-wear-os-authentication.html\" target=\"_blank\">Credential Manager on Wear OS revolutionizes user authentication</a> to learn more about implementation points and helpful insights from our development team.</li>\n<li>To see how real applications are using Credential Manager, watch this <a href=\"https://youtu.be/lgo5hRLVUow\" target=\"_blank\">video showcasing how Dashlane is using the Credential Provider interface to manage credentials for other applications</a>.</li>\n<li>Finally, <a href=\"https://github.com/android/identity-samples/tree/credman-compose/Shrine\" target=\"_blank\">explore our new sample app</a> to see how you can implement this modern, unified authentication flow.</li>\n</ul></ul>\n\n<h4><span style=\"font-size: large;\">Day 5: #AskAndroid</span></h4>\n<i>Friday, August 29, 2025</i>\n\n<p>Join us for a <a href=\"https://www.youtube.com/live/JWXMywahxEg\" target=\"_blank\">live Q&amp;A on Wear OS</a>! Ask your questions at <a href=\"https://x.com/Android\" target=\"_blank\">Android Developers on X</a> and <a href=\"https://www.linkedin.com/showcase/android_by_google/\" target=\"_blank\">Android by Google at Linkedin</a> using the tag #AskAndroid.</p>\n\n<h2><span style=\"font-size: x-large;\">Explore and create your own experiences with Wear OS</span></h2>\n\n<p>Explore the latest updates for Wear OS, and delve into the wealth of resources shared during the week. We’re excited to see the results of your explorations with building apps, tiles and watch faces for Wear OS.</p>\n\n<p><i>Happy coding!</i></p>",
    "published": "2025-08-25T09:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Designing with personality: Introducing Material 3 Expressive for Wear OS",
    "link": "https://android-developers.googleblog.com/2025/08/introducing-material-3-expressive-for-wear-os.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEipsiq8ENEhGJZIvuOnmmz08pAIigl5c1yqbBmFot-Soe9DdB1gZkcVIi7nSlAECqJZwM7DIVywF55zhRvJMzr8C79ozqdWEYbrcHXW1AC15snbCm8lAY1__KkDrKCACshHzPMba7japYv7j7DEwsTGR4lqLmln0fR0GLXHRZLjOyvzOrl8QZfjoPNX8nU/s1600/material-3-expressive-design-wear-os-spotlight.gif\" style=\"display: none;\" />\n\n<em>Posted by Chiara Chiappini – Android Developer Relations Engineer, and Kevin Hufnagle - Android Technical Writer\n</em>\n\n<blockquote><i>This post is part of <a href=\"https://android-developers.googleblog.com/2025/08/spotlight-week-wear-os.html\" target=\"_blank\">Wear OS Spotlight Week</a>. Today, we're focusing on creating modern, premium designs using the <b>Material 3 Expressive design system</b>.</i></blockquote>\n\n<p>When crafting the user interface for your Wear OS app or tile, consider how your experience <b>expresses your brand while respecting the performance guidelines</b> for watches, particularly battery use. With the new Material 3 Expressive design system, you can build performant UIs that truly shine on a wearable device.</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"A gallery of Wear OS screens that demonstrate Material 3 Expressive, including a curved edge button, a wavy progress circle, and different shapes for “cancel” and “confirm” buttons.\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEiKjUOvVipBfVLc63BnN0aStSHhxxn_M48DVcCrjPyRIuDU-pE-8Ko1AHSB3Bd7bDMwtYUCIG7nMTEFyXNQHMYRY6IitGCJCR1_s3OohnIRZ0E0_h527kK0XQE7X_N6HC1ykFuHcCPulUsoy73fF_4RQ6w_FMt4Afz96vcO93fsAWjbJ3-OcxbG-z91Y/s16000/material-3-expressive-design-library-wear-os-spotlight.png\" /></div><center><em>A gallery of Material 3 Expressive experiences on Wear OS</em></center>\n\n\n<p>This blog post walks you through the key principles of this new design system and how you can implement them to create more engaging and intuitive user experiences.</p>\n\n<h2><span style=\"font-size: x-large;\">What’s new in Material 3 Expressive?</span></h2>\n\n<p>As mentioned in our <a href=\"https://android-developers.googleblog.com/2025/05/whats-new-in-wear-os-6.html\" target=\"_blank\">announcement at I/O earlier this year</a> and our <a href=\"https://android-developers.googleblog.com/2025/08/build-your-app-to-meet-users-on-newest-pixel-devices.html\" target=\"_blank\">unveiling of Google Pixel Watch 4</a> last week, Material 3 Expressive introduces several fundamental improvements from previous Wear OS design guidance, which aim to give your apps and tiles more personality and help users feel confident that they’re successfully taking quick actions on a round screen.</p>\n\n<p>The key design principles include the following:</p>\n<ul><ul>\n<li><b>Embrace the round form factor:</b> Use the full screen with components like the edge-hugging button to complement the watch's form factor. This makes the UI feel well-suited for a user's wrist.</li></ul><ul>\n<li><b>Apply the proper screen layout on each surface:</b> Take advantage of the new layouts and components—such as the 3-slot tile PrimaryLayout and the <span style=\"color: #0d904f; font-family: courier;\">TransformingLazyColumn</span> – to create more consistent, glanceable, and fluid user experiences for tiles and apps.</li></ul><ul>\n<li><b>Elevate your experience:</b> The dynamic color system provides a richer palette for more vibrant themes in apps. Variable fonts allow for dynamic, customizable typography.</li></ul><ul>\n<li><b>Show off expressive animations:</b> Light up your Wear OS experience with meaningful movement, such as spring animations and shape morphing.</li>\n</ul><ul>\n\n<h2><span style=\"font-size: x-large;\">Embrace the round form factor</span></h2>\n  \n<p>Material 3 Expressive for Wear OS differentiates itself from systems designed for rectangular screens, offering a framework of components that are <b>designed specifically for round screens</b>, using the entire circular canvas to its full potential.</p>\n  \n<div style=\"text-align: center;\"><img alt=\"A button that appears near the bottom of the screen has a flat top but a curved bottom, forming a half-moon shape that better fits the circular screen.\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEipsiq8ENEhGJZIvuOnmmz08pAIigl5c1yqbBmFot-Soe9DdB1gZkcVIi7nSlAECqJZwM7DIVywF55zhRvJMzr8C79ozqdWEYbrcHXW1AC15snbCm8lAY1__KkDrKCACshHzPMba7japYv7j7DEwsTGR4lqLmln0fR0GLXHRZLjOyvzOrl8QZfjoPNX8nU/s1600/material-3-expressive-design-wear-os-spotlight.gif\" /></div><center><em>The edge-hugging button’s animated entrance and shape emphasizes the round form factor</em></center>\n  \n<p>One of the most noticeable examples of this is the <b>edge-hugging button</b>. It features a curved bottom edge that perfectly complements the round display. It’s a small but significant detail that helps make Material 3 Expressive feel right at home on your users’ wrists.</p>\n\n<h2><span style=\"font-size: x-large;\">Apply the proper screen layout on each surface</span></h2>\n  \n<h3><span style=\"font-size: large;\">Apps</span></h3>\n  \n<p>For apps that let users scroll through content, Material 3 Expressive introduces the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/foundation/lazy/package-summary#TransformingLazyColumn%28androidx.compose.ui.Modifier,androidx.wear.compose.foundation.lazy.TransformingLazyColumnState,androidx.compose.foundation.layout.PaddingValues,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,androidx.wear.compose.foundation.rotary.RotaryScrollableBehavior,androidx.compose.foundation.OverscrollEffect,kotlin.Function1%29\" target=\"_blank\">TransformingLazyColumn</a></span> component. It provides built-in support for expressive and fluid scrolling animations that follow the side edges of the display. We’ve also added a new <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/material3/package-summary#ScrollIndicator%28androidx.wear.compose.foundation.lazy.TransformingLazyColumnState,androidx.compose.ui.Modifier,androidx.wear.compose.material3.ScrollIndicatorColors,kotlin.Boolean,androidx.compose.animation.core.AnimationSpec%29\" target=\"_blank\">ScrollIndicator</a></span> that provides a clear visual cue of the user’s position within a list. (This appears automatically when you use <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/material3/package-summary#ScreenScaffold%28androidx.wear.compose.foundation.lazy.ScalingLazyListState,kotlin.Function1,androidx.compose.ui.Modifier,androidx.compose.foundation.layout.PaddingValues,kotlin.Function0,kotlin.Function1,androidx.compose.ui.unit.Dp,androidx.compose.foundation.OverscrollEffect,kotlin.Function2%29\" target=\"_blank\">ScreenScaffold</a></span>.) This, combined with the fluid animations of the <span style=\"color: #0d904f; font-family: courier;\">TransformingLazyColumn</span>, creates a more intuitive and engaging scrolling experience.</p>\n  \n  \n<div style=\"text-align: center;\"><img alt=\"When the user scrolls through the list, the items near the top and bottom shrink in width.\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgTkwx7OlWDoCmOsbuTrCMYkacxxqk8A4ytfDeeokVdhJQcHA6rfmCXhpbeAOqBNG02fBlTtsZwtJRFfqVv29gHyEKhdL8Ji4ONWoqRvwCEc_CdRjZs4LSSemq5wtwWEMYGZzf9W4SAWZIeMjkcFfsfxy4AfODUiUJCVJHs6zcQbXlMnwq9rEXATlpmWiQ/s1600/transforminglazycolumn-round-watch-face-wear-os-spotlight.gif\" width=\"40%\" /></div><center><em>When using a <span style=\"color: #0d904f; font-family: courier;\">TransformingLazyColumn</span>, elements appear to get smaller as they get close to the top and bottom edge of the screen</em></center>\n  \n<p>For apps that don’t require scrolling, such as media players or confirmation dialogs, Material 3 Expressive provides templates that are optimized for glanceability and focus. These layouts rely on breakpoints and pagination to present a single task or set of controls to the user, minimizing distractions.</p>\n  \n<h3><span style=\"font-size: large;\">Tiles</span></h3>\n\n<p>The Material 3 Expressive design system also lets designers and developers create tiles that are both functional and visually engaging:</p>\n  \n<div style=\"text-align: center;\"><img alt=\"The middle part of the tile shows information about the current number of glasses of water having been consumed today, and the bottom part includes a button that lets users add another glass.\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgMNjPZ0iJfkHHDH4Fco7eYTKggewFy47w2WZweWt05EEa9T2RQYEbQKH5pP-zevoEIcBusAq62BXg8ZuaYA69Xo8JOpI-pXhTg22yrHC74k_GKZ98OKvOkHyYKSTEFtDELTe4w7j7bXByZBgV_1B2Z3bw1NeWIwFRM4PSqfinIj8mgjHNWSlUDl0Y-gq8/s16000/material-3-expressive-tiles-wear-os-spotlight.png\" /></div><center><em>Tiles offer at-a-glance information and support quick actions to indicate progress on a task, such as drinking more water</em></center>\n  \n<p>Tiles can show a static message about a recent update, invite users to get started, and show progress of an ongoing activity related to fitness, media, and more.</p>\n\n<p>The new <b>3-slot tile layout</b> is designed to work for each of these use cases, as well as across a range of screen sizes, to provide a clear and consistent structure for your tile’s content.</p>\n\n<h2><span style=\"font-size: x-large;\">Elevate your experience</span></h2>\n  \n<p>Give your app or tile a signature look using extended color palettes and custom typography.</p>\n  \n<h3><span style=\"font-size: large;\">Color</span></h3>\n  \n<p>The updated <a href=\"https://developer.android.com/design/ui/wear/guides/styles/color/system\" target=\"_blank\">color system</a> in Material 3 Expressive supports more colors—such as tertiary colors—to let you better reflect your brand’s personality and create a more immersive user experience. Use this color system to create themes that perfectly capture the mood of your brand, whether that’s a calming meditation app, the high-energy vibe of a fitness tracker, or something in between.</p>\n\n<p>With Material 3 Expressive, apps and tiles can either follow the dynamic system color or stick to the brand colors. We especially recommend following the dynamic system colors in your tiles, for higher cohesion with other tiles. You can embrace dynamic colors in your app as well, for instance exposing settings to the user.</p>\n\n<div style=\"text-align: center;\"><img alt=\"Based on the main colors in the user’s chosen watch face, the design system extracts the 2 most common hues and dynamically chooses several more complementary colors. These colors are applied to the tiles that appear on the user’s watch.\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgzd-kClQ7ZOZix1v5C_CNJk8_U7ZILp5nypXhuesEidReJLHGFHbx04il3XZnE2PI_gJ8JkJYwKTEedo17vTkEI_GeK7UPVS0DX1SKSAjE3QSEL3YmMKMj__Ma_NnqJru0l4JkHcL_kHAxysCOSpdPvsgXMP1KuaXEpDxwvzlR1gGGd3vMaoODj_g5RGs/s16000/dynamic-color-themes-material-3-expressive-wear-os-spotlight.png\" /></div><center><em>Dynamic color theme derived from the user-selected watch face (left), applied to a tile (right)</em></center>\n  \n<h3><span style=\"font-size: large;\">Typography</span></h3>\n\n<p>Typography is another key element of expressive design. Material 3 Expressive moves beyond static font weights and styles and embraces the versatility of <b>variable fonts</b>.</p>\n\n<p>A single font contains <a href=\"https://developer.android.com/design/ui/wear/guides/styles/typography/fonts#adjustable-axes\" target=\"_blank\">adjustable axes</a>, including weight and width. With Material 3 Expressive, you can tap into these customized looks to create dynamic and delightful typographic experiences.</p>\n  \n\n<div style=\"text-align: center;\"><img alt=\"The text “book club” is thicker than normal, using a larger font weight.\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPb145_uHzIxSxZsPGi2oo9edzrNtYynTlP7jKjZiNV8tsRJPWQhkvUYUgETEU0XhvESMipsR-JrkT6lztvBxDIt7gkjMSh8DZag2MV2B8pi_0eeqPA3Pto0AIFBHdfzgWckv8-NJk9XDPQMoPQM0lciEC2CuJXXuyHiyly7GlZCND5EWBykji8iWXpZY/s1600/adjusted-font-weight-material-3-expressive-design-wear-os-spotlight.png\" width=\"45%\" /></div><center><em>A font that uses an adjusted weight. If desired, you can also use a different width to s t r e t c h the text.</em></center>\n  \n<h2><span style=\"font-size: x-large;\">Show off expressive animations</span></h2>\n  \n<p>A foundational pillar of Material 3 Expressive’s animation capabilities is the concept of <b>fluid motion</b>, made possible primarily through <a href=\"https://www.youtube.com/watch?v=qEEo6AwgBjU\" target=\"_blank\">shape morphing</a>.</p>\n  \n<div style=\"text-align: center;\"><img alt=\"In the 3x3 grid of buttons 1 through 9, when the 9 button is pressed, its left edge moves to the left, and the 8 button shrinks its width to accommodate.\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgV36oyU54SCUG545xLoulH5x0fDiPja9UL7hBuJphb4Bb5XRvICuqjzItCovR0A5SnknMorOO9qEixqXLcMjKh6FKO9d9l9ZMcyq7pzDZTDjz0SdRIPXS831NgTU9jia9TIfQHKv8I8WH5WOsDR_jJ9IaQ2YajQfLduKmgWjELt4nK22CJ_tUhLhRky5c/s1600/fluid-motion-material-3-expressive-design-wear-os-spotlight.png\" /></div><center><em>When the “9” button is pressed, the “8” button moves out of the way to accommodate the expanded size of the “9” button.</em></center>\n  \n<p>Components no longer have to be rigid – they can now dynamically change their shape in response to user input! Buttons, in particular, can transform shape and size to achieve eye-catching springy animation effects and provide more visual contrast between states such as “play” and “pause.” This not only makes the UI more visually interesting but also helps in guiding the user’s attention and providing clear feedback.</p>\n\n<h2><span style=\"font-size: x-large;\">An experience that’s ready for prime time!</span></h2>\n\n<p>By adopting the Material 3 Expressive design system, you can create Wear OS apps and tiles that feel more dynamic, personal, and intuitive. By applying principles like rounded components, screen layouts, richer color palettes, and spring animations, you can build experiences that feel perfectly designed for use on a user’s wrist.</p>\n\n<p>To get you inspired, we’ve included some examples from some of Google’s apps below:</p>\n  \n  \n<div style=\"text-align: center;\"><img alt=\"On the left, the accept call button is a bottom edge-hugging button; on the right-hand side of each item in the list, there’s a toggle button to turn a given alarm on and off.\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhw8zcmlhaDpXW4rYhhmDzny2jDdMkGppCwN_zgtyYLEE0zyyACPMJpIL4v22PSeSkwS4elHyq1owh9f8d7C16oL_RjCfnPgAxV3Ddis8KOLiCUXXSGmcD33ZkeAE-YDQfd3PF6RuqRtlJj_66Hq-qnepXtHmODW99IMSeOBohl_jRRo_4W9g5-q8q4PmM/s1600/edge-hugging-button-and%20toggle-buttons-material-3-expressive-design-wear-os-spotlight.png\" /></div><center><em>Edge-hugging button for an incoming call using the Phone app (left); toggle buttons in the Alarms app (right)</em></center>\n  \n<div style=\"text-align: center;\"><img alt=\"On the left, The tile includes selectable icons in the middle, such as navigating home, and a bottom edge-hugging button that lets you search for a particular destination; on the right A wavy progress bar moves around the play/pause button in the middle of the tile.\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhnFelzXEaTdUPs8kDUMQmNHyUz2C38hYzfnYxcDmWejH1HquXWaCznhvUbODxh4VdU_6VS-XGfFrUIold61-aRBnW1NgnG8oJZukFHZQWydhiCilFCnWAnMZzkbyiuwys99GqwxRhjqFCVII7SgNlY5jlke3POuFbzZWwGTcrJDZfPyKW4Swzz2Oa0hEU/s1600/at-a-glance-actions-within-tile-google-maps-app-material-3-expressive-design-wear-os-spotlight.png\" /></div><center><em>At-a-glance actions within the tile for the Google Maps app (left); progress of ongoing audio playback in the Media Controls (right)</em></center><br />\n  \n<h2><span style=\"font-size: x-large;\">Get started with Material 3 Expressive for Wear OS</span></h2>\n  \n<p>To learn more, explore the following resources:</p>\n<ul><ul> \n<li>Recently-updated <a href=\"https://developer.android.com/design/ui/wear/guides/get-started\" target=\"_blank\">design documentation</a></li> \n<li><a href=\"https://developer.android.com/design/ui/wear/guides/get-started/design-kits\" target=\"_blank\">Design kits</a> for apps and tiles in Figma</li> \n<li>Codelabs for <a href=\"https://developer.android.com/codelabs/compose-for-wear-os#0\" target=\"_blank\">Compose on Wear OS</a> and <a href=\"https://developer.android.com/codelabs/wear-tiles#0\" target=\"_blank\">Tiles on Wear OS</a></li> \n<li>Best practices for <a href=\"https://developer.android.com/training/wearables/compose/migrate-to-material3\" target=\"_blank\">migrating app UI to Material 3 Expressive</a> and <a href=\"https://developer.android.com/training/wearables/tiles/versioning#migrate-tiles-expressive\" target=\"_blank\">migrating tiles to Material 3 Expressive</a></li> \n<li><a href=\"https://github.com/android/wear-os-samples\" target=\"_blank\">Sample apps</a> on GitHub</li> \n</ul></ul> \n\n<p>We can’t wait to see the designs that you create and share with the Wear OS community!</p> </ul></ul>",
    "published": "2025-08-25T08:59:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "The latest Gemini Nano with on-device ML Kit GenAI APIs",
    "link": "https://android-developers.googleblog.com/2025/08/the-latest-gemini-nano-with-on-device-ml-kit-genai-apis.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjx-b7W3hM_0hhBTzsSVx7R0fqmOY-7TGUiWj61mqPUvr83xNMsm1XjJ4XzQu8FCCMeno9tKLr3j2LlJ5lKtgLkMCOiwYzzhE6ZrCTQxbzZvEBAcAFulPR_yiute3DQty_itwOI6N9xuDmuPz6S2iT71KWuf84HAaYYdJV0R18oI17A02__3M_VmTNQXX4/s1600/Gemini-Nano-on-Android.png\" style=\"display: none;\" />\n\n<em>Posted by Caren Chang – Developer Relations Engineer, Joanna (Qiong) Huang - Software Engineer, and Chengji Yan - Software Engineer</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5Zj_BA7WbV_aES5kXV4y0MCKoVamBpNtHhFmBTkbUO0gQL545YeHqXNcx_j_YbdC1Lf2UZt7LhzXjGoVi1BB_8PzwTqMTSVFNmZpgOhSYuXqXbCi0XIBu9JJ6ZncnrudVNAY1M8OgGK7rvROJn0zCVHX1_f7rRT8k5YfNfMUipUvStWJDHl5c9xlMLkA/s1600/Android_Evergreen_Hero_Banner_AI_WebandApps.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5Zj_BA7WbV_aES5kXV4y0MCKoVamBpNtHhFmBTkbUO0gQL545YeHqXNcx_j_YbdC1Lf2UZt7LhzXjGoVi1BB_8PzwTqMTSVFNmZpgOhSYuXqXbCi0XIBu9JJ6ZncnrudVNAY1M8OgGK7rvROJn0zCVHX1_f7rRT8k5YfNfMUipUvStWJDHl5c9xlMLkA/s1600/Android_Evergreen_Hero_Banner_AI_WebandApps.png\" /></a>\n\n\n\n<p>The latest version of Gemini Nano, our most powerful multi-modal on-device model, <a href=\"https://blog.google/products/pixel/tensor-g5-pixel-10/\" target=\"_blank\">just launched on the Pixel 10 device series</a> and is now accessible through the <a href=\"https://developers.google.com/ml-kit/genai\" target=\"_blank\">ML Kit GenAI APIs</a>. Integrate capabilities such as <a href=\"https://android-developers.googleblog.com/2025/05/on-device-gen-ai-apis-ml-kit-gemini-nano.html\" target=\"_blank\">summarization, proofreading, rewriting, and image description directly into your apps</a>.</p>\n\n<p>With GenAI APIs we’re focused on giving you access to the latest version of Gemini Nano while providing consistent quality across devices and model upgrades.  Here’s a sneak peak behind the scenes of some of the things we’ve done to achieve this.</p>\n\n<h2><span style=\"font-size: x-large;\">Adapting GenAI APIs for the latest Gemini Nano</span></h2>\n\n<p>We want to make it as easy as possible for you to build AI powered features, using the most powerful models. To ensure GenAI APIs provide consistent quality across different model versions, we make many behind the scenes improvements including rigorous evals and adapter training.</p>\n<ol>\n<li><b>Evaluation pipeline:</b> For each supported language, we prepare an evaluation dataset. We then benchmark the evals through a combination of: LLM-based raters, statistical metrics and human raters.</li>\n<li><b>Adapter training:</b> With results from the evaluation pipeline, we then determine if we need to train feature-specific LoRA adapters to be deployed on top of the Gemini Nano base model. By shipping GenAI APIs with LoRA adapters, we ensure each API meets our quality bar regardless of the version of Gemini Nano running on a device.</li>\n</ol>\n\n<h2><span style=\"font-size: x-large;\">The latest Gemini Nano performance</span></h2>\n  \n<p>One area we're excited about is how this updated version of Gemini Nano pushes performance even higher, especially the prefix speed - that is how fast the model processes input.</p> \n\n<p>For example, here are results when running text-to-text and image-to-text benchmarks on a Pixel 10 Pro.</p>\n\n \n<div align=\"left\">\n    <table class=\"fr-table-selection-hover\" style=\"border-collapse: collapse; border: none; width: 100%;\">\n        <tbody>\n            <tr>\n                <td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">\n                </td>\n                <td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">\n                  <b>Prefix Speed - Gemini <span style=\"color: #0d904f ; font-family: courier;\">nano-v2</span> on Pixel 9 Pro</b>\n                </td>\n              \t\t<td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">\n                  \t<b>Prefix Speed - Gemini <span style=\"color: #0d904f ; font-family: courier;\">nano-v2<sup>*</sup></span> on Pixel 10 Pro</b>\n                \t</td>\n              \t\t\t<td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">\n                  \t<b>Prefix Speed - Gemini <span style=\"color: #0d904f ; font-family: courier;\">nano-v3</span> on Pixel 10 Pro</b>\n                \t</td>\n          \t\t</tr>\n            \t<tr>\n                <td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">Text-to-text\n                </td>\n                <td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">510 tokens/second\n                </td>\n                  <td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">610 tokens/second\n                </td>\n                  <td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">940 tokens/second\n                </td>\n            </tr>\n            <tr>\n                <td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">Image-to-text\n                </td>\n                <td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">510 tokens/second + 0.8 seconds for image encoding\n                </td>\n              \t\t<td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">610 tokens/second + 0.7 seconds for image encoding\n                </td>\n              \t<td style=\"border: 1pt solid rgb(0, 0, 0); width: 25%;\">940 tokens/second + 0.6 seconds for image encoding\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<center><sup>*</sup><small><em>Experimentation with Gemini <span style=\"color: #0d904f ; font-family: courier;\">nano-v2</span> on Pixel 10 Pro for benchmarking purposes. All Pixel 10 Pros launched with Gemini <span style=\"color: #0d904f ; font-family: courier;\">nano-v3</span>.</em></small></center>\n\n<h2><span style=\"font-size: x-large;\">The future of Gemini Nano with GenAI APIs</span></h2>\n\n<p>As we continue to improve the Gemini Nano model, the team is committed to using the same process to ensure consistent and high quality results from GenAI APIs.</p> \n\n<p>We hope this will significantly reduce the effort to integrate Gemini Nano in your Android apps while still allowing you to take full advantage of new versions and their improved capabilites.</p>\n\n<h2><span style=\"font-size: x-large;\">Learn more about GenAI APIs</span></h2>\n\n<p>Start implementing GenAI APIs in your Android apps today with guidance from our official <a href=\"https://developers.google.com/ml-kit/genai\" target=\"_blank\">documentation</a> and samples: <a href=\"https://github.com/android/ai-samples/tree/main/ai-catalog/samples\" target=\"_blank\">GenAI API Catalog</a> and <a href=\"https://github.com/googlesamples/mlkit/tree/master/android/genai\" target=\"_blank\">ML Kit GenAI APIs quickstart samples</a>.</p>",
    "published": "2025-08-22T09:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "64-bit app compatibility for Google TV and Android TV",
    "link": "https://android-developers.googleblog.com/2025/08/64-bit-app-compatibility-for-google-tv-android-tv.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvmObDTm_UvKKZP8bDM_YVpknfPh2MBo1pZun6Vc_0CTOsoxvFAq0O_tIa33owHNckOXqKEGGf35C7PccmUFU9gA9VX7djih13zWISVNwdqAHY7waJ7tcWoZJUSuCwSnrLCmhQzNCr21e61IJ_8PLUzj6eKApPrxmK-cwMHrYp-iCbQ6XPyiLxIKvRZPU/s1600/Jetpack%20Adaptive%20Compose%20Metadata.png\" style=\"display: none;\" />\n\n<em>Posted by Fahad Durrani – Product Management, Google TV</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiq-xjyTG_ks5AfowEaHg8NFwpTVt0EqH59N_7RExbYOHp8WESDEmFbRFPB7kc3_tP0B7XGARTbDvX6woNwZgRtwX2xH8xJI0uq4w7T3b2JFOjzB3qfU6EZC-MpYSZ537orOmLoI5VY69Fc-h9XMiJ3MRe7rk66yTMcEdDxSWlrOY71cQ04-kxG-kFalms/s1600/Jetpack%20Adaptive%20Compose%20%281%29.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiq-xjyTG_ks5AfowEaHg8NFwpTVt0EqH59N_7RExbYOHp8WESDEmFbRFPB7kc3_tP0B7XGARTbDvX6woNwZgRtwX2xH8xJI0uq4w7T3b2JFOjzB3qfU6EZC-MpYSZ537orOmLoI5VY69Fc-h9XMiJ3MRe7rk66yTMcEdDxSWlrOY71cQ04-kxG-kFalms/s1600/Jetpack%20Adaptive%20Compose%20%281%29.png\" /></a>\n\n<h2>Google TV and Android TV will require 64-bit app compatibility to support upcoming 64-bit TV devices starting August 2026.</h2> \n\n<p>Following <a href=\"https://android-developers.googleblog.com/2019/01/get-your-apps-ready-for-64-bit.html\" target=\"_blank\">other Android form factors</a>, Google TV and Android TV devices will soon support 64-bit app compatibility. 64-bit apps will offer improved performance, shorter start times, and new viewing experiences on upcoming 64-bit Google TV and Android TV devices.</p>\n\n<p><b>Starting August 1st, 2026:</b></p>\n<ul><ul>\n<li>Any new app or app update that includes native code is required to provide 64-bit (<span style=\"color: #0d904f ; font-family: courier;\">arm64</span>) versions in addition to 32-bit (<span style=\"color: #0d904f ; font-family: courier;\">armeabi-v7a</span>) versions when submitted to Google Play. You can mitigate the size increase of your App Bundle. For more details, see <a href=\"https://developer.android.com/google/play/requirements/64-bit#android-app-bundle\" target=\"_blank\">Support 64-bit architectures</a>.</li></ul><ul>\n<li>If you're targeting Android 15 (API level 35) or higher, your 64-bit app version must be compatible with <a href=\"https://developer.android.com/guide/practices/page-sizes\" target=\"_blank\">16 KB memory page sizes</a>. For more details, see <a href=\"https://android-developers.googleblog.com/2025/05/prepare-play-apps-for-devices-with-16kb-page-size.html\" target=\"_blank\">Prepare your apps for Google Play’s 16 KB page size compatibility requirement</a>.</li>\n</ul></ul>\n\n<p>We’re not making any changes to 32-bit support, and Google Play will continue to deliver apps to 32-bit devices. The 64-bit requirement means that apps with 32-bit native code will need a 64-bit version as well. You should continue to provide 32-bit binaries alongside 64-bit binaries by using ABI splits in App Bundles.</p>\n\n<h2><span style=\"font-size: x-large;\">How to transition</span></h2> \n\n<p>This requirement only impacts apps that utilize native code. You can check if your app has native code (<span style=\"color: #0d904f ; font-family: courier;\">.so</span> files) with the <a href=\"https://developer.android.com/studio/debug/apk-analyzer\" target=\"_blank\">APK Analyzer</a>. For ARM devices, you can find native libraries in <span style=\"color: #0d904f ; font-family: courier;\">lib/armeabi-v7a</span> (32-bit) or <span style=\"color: #0d904f ; font-family: courier;\">lib/arm64-v8a</span> (64-bit).</p>\n\n<p>For detailed guidance on transitioning to 64-bit, see <a href=\"https://developer.android.com/google/play/requirements/64-bit\" target=\"_blank\">Support 64-bit architectures</a>.</p>\n\n<h2><span style=\"font-size: x-large;\">How to test</span></h2> \n<ul><ul>\n<li>The <a href=\"https://developer.android.com/studio/run/emulator\" target=\"_blank\">Google TV emulator</a> image for macOS devices with Apple Silicon is configured for a 64-bit userspace and may be used for app testing and verification.</li></ul><ul>\n<li>The <a href=\"https://en.wikipedia.org/wiki/Nvidia_Shield_TV\" target=\"_blank\">Nvidia Shield</a> (models P2571, P2897 and P2897) have both 32-bit and 64-bit userspace compatibility and may be used for testing on physical hardware. If your app contains 64-bit libraries, they will be used automatically.</li></ul><ul>\n<li>64-bit TV apps may be sideloaded to Pixel (7 or newer) phones after constraining the view window to TV resolution and DPI:</li>\n  <ul><ul>\n<span style=\"color: #0d904f ; font-family: courier;\">adb shell wm size 1080x1920</span></ul><ul>\n<span style=\"color: #0d904f ; font-family: courier;\">adb shell wm density 231 #tvdpi</span></ul><ul>\n<span style=\"color: #0d904f ; font-family: courier;\">adb install &lt;package.apk&gt;</span>\n</ul></ul></ul></ul>\n\n<h2><span style=\"font-size: x-large;\">Next steps</span></h2> \n\n<p>Prepare your TV apps to comply with 64-bit requirements by August 1st, 2026:</p>\n<ol>\n<li>Use the <a href=\"https://developer.android.com/studio/debug/apk-analyzer\" target=\"_blank\">APK Analyzer</a> to check if your app has native code.</li>\n<li>Update your native code to support <a href=\"https://developer.android.com/google/play/requirements/64-bit\" target=\"_blank\">64-bit</a> and <a href=\"https://android-developers.googleblog.com/2025/05/prepare-play-apps-for-devices-with-16kb-page-size.html\" target=\"_blank\">16 KB memory page size</a>.</li>\n<li>Test and verify that your changes work as intended.</li>\n<li>Submit your app update to Google Play.</li>\n</ol>",
    "published": "2025-08-21T14:30:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Build your app to meet users in every moment on the newest Pixel devices, from wearables to foldables, and more",
    "link": "https://android-developers.googleblog.com/2025/08/build-your-app-to-meet-users-on-newest-pixel-devices.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhFzZHK29H0eYRDzcoK6K9dIkDRSK_bBTM-juAyuIgplkSihvAss8O6dkfq36tAfAwM3xeqhl5p9YENpG5vsaS4vgWHKgqluaH4PXEgvc0n6OHsITj5832IL1OQfDa-HC8DQpmJ_evJdr5WTw4JfkIvQC5kzpvrmCmRLkYS19KCF0wHnLf7y8aELWWQuCU/s1600/made-by-google-meta.png\" style=\"display: none;\" />\n\n<em>Posted by Fahd Imtiaz – Senior Product Manager and <a href=\"https://uk.linkedin.com/in/kseniiashumelchyk\" target=\"_blank\">Kseniia Shumelchyk</a> – Engineering Manager, Developer Relations</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjGrVweht2djnA0gxq8Rqh_jy3SGVHCDL08mL2M3DHwVkZf7xSgBAEblvGpzuy_5VbZeDdWmTxqrqZUGXrK4RqDbCWeTkJgYJDp-nWhRrGcfJHgLOutG1UDfqS94WXal5_gxdkFUujDyF8ATKp3bOguQmS1HyKSSXpvtJznPGj9CC4G-STlA8jbtif6ViI/s1600/made-by-google-banner.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjGrVweht2djnA0gxq8Rqh_jy3SGVHCDL08mL2M3DHwVkZf7xSgBAEblvGpzuy_5VbZeDdWmTxqrqZUGXrK4RqDbCWeTkJgYJDp-nWhRrGcfJHgLOutG1UDfqS94WXal5_gxdkFUujDyF8ATKp3bOguQmS1HyKSSXpvtJznPGj9CC4G-STlA8jbtif6ViI/s1600/made-by-google-banner.png\" /></a>\n\n\n<p>This week at <a href=\"https://www.youtube.com/live/JXCXTQIIvM0\" target=\"_blank\">Made by Google</a>, we introduced the new suite of Pixel devices, including the Pixel 10 Pro Fold and <a href=\"https://blog.google/products/pixel/pixel-watch-4/\" target=\"_blank\">Pixel Watch 4</a>. These devices are more than just an evolution in hardware; they are built to showcase the <a href=\"https://android-developers.googleblog.com/2025/06/android-16-is-here.html\" target=\"_blank\">latest updates in Android</a>, creating new possibilities for you to build experiences that are more helpful, personal, and adaptive than before.</p>\n\n<p>Let's explore what this moment means for your apps and how you can start building today.</p>\n\n<h2><span style=\"font-size: x-large;\">Give your app more room to shine on foldable and large screens</span></h2>\n\n<div style=\"text-align: center;\"><img alt=\"Pixel 10 pro fold open on the left and back view, closed, on the right\" border=\"0\" height=\"426\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhVXNxe6IR2Aekyd9ZSjCUrHfFEd87YF5scQgtmwKvYRuQK6YYXb_NAzgk0-B_6kv9bxhyRxILHmONd7RqktwzbuoyAoARlZooYp-PAmg8Q4JuNYxskd5U366rFCftQvWq3FfJaBGvi9wwMZkadPSL8-v-1zNfjsPBRZ0ZMMmqb9LmtXxOVxKo3gzIUpcA/s1600/made-by-google-foldable-large-screen.png\" width=\"100%\" /></div>\n\n<p>The new <a href=\"https://store.google.com/product/pixel_10_pro_fold?utm_source=keyword&amp;utm_medium=google_oo&amp;utm_campaign=GS108535&amp;hl=en-US\" target=\"_blank\">Pixel 10 Pro Fold</a> represents the next step in mobile computing, inviting you to think beyond a single screen. With a stunning 8-inch inner display that unfolds to create an immersive, large screen experience and a fully-capable 6.4-inch outer display, your apps have a powerful and flexible stage to shine. Its advanced durability and all-day battery life make this form factor ready for everyday use, raising user expectations for premium app experiences.</p>\n\n<p><a href=\"https://developer.android.com/develop/ui/compose/build-adaptive-apps\" target=\"_blank\">Building a truly adaptive app</a> is how you unlock the full potential of this hardware. On the new Pixel 10 Pro Fold, users will multitask with enhanced Split Screen and drag-and-drop, or use hands-free tabletop modes for entertainment. Your app must <a href=\"https://developer.android.com/develop/ui/compose/layouts/adaptive/app-orientation-aspect-ratio-resizability?hl=en\" target=\"_blank\">support resizability</a> and both portrait and landscape orientations to deliver the seamless, dynamic layouts these new experiences demand. Following the <a href=\"https://android-developers.googleblog.com/2025/05/adaptiveapps-io25.html\" target=\"_blank\">best practices on adaptive development</a> is the key to providing an optimal experience on every screen and in every posture.</p>\n\n<div style=\"text-align: center;\"><img alt=\"woman wearing a blue sweater and blue ombre skirt uses a Pixel 10 pro fold\" border=\"0\" height=\"480\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEghcr-tQHnSVWyrzl9WJn4QqSwQS2RXc8Hpj5cl63WyWTz1AjonzxeOjgGt-l-ATglH2dmlLBDPH6vJu11XWYBsfEqw6RBW5tdAs_XAYmlpxIhi5XiQz_UUANgtTzo3dL1lvYCa_3OO5MuXSFEjPOvB6-Vlcf_xEgom_fi0LfUiZUTYrcrEcwl9v_NgemY/w640-h480/pixel-fold-user-made-by-google.png\" width=\"640\" /></div>\n\n<p>To help you build these adaptive experiences, we offer a suite of powerful tools. You can use existing tools like <a href=\"https://developer.android.com/jetpack/androidx/releases/window?hl=en\" target=\"_blank\">Jetpack Window Manager</a> and the <a href=\"https://developer.android.com/develop/ui/compose/layouts/adaptive?hl=en\" target=\"_blank\">Compose Adaptive Layouts Libraries</a> today. And coming soon to beta, Compose Adaptive Layout Library 1.2 will introduce new adaption strategies like Levitate and Reflow, plus support for Large and Extra Large width Window Class Sizes.</p>\n\n<p>The goal is to not be confined to a single screen, but build one app that works great everywhere, from phones and foldables to tablets and other large screens. This is your opportunity to expand your app’s reach and deliver the dynamic experiences users now expect. With the tools at your fingertips, you can start building for every screen today. Learn how you can unlock your app's full potential with adaptive development at <a href=\"https://developer.android.com/adaptive-apps\" target=\"_blank\">developer.android.com/adaptive-apps</a>.</p>\n\n<h2><span style=\"font-size: x-large;\">Bring your most expressive apps to the wrist</span></h2>\n\n<div style=\"text-align: center;\"><img alt=\"a Google Pixel Watch 4 on a user's wrist\" border=\"0\" height=\"480\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh7YvbHpkK9IFUuyL_R99Da4_ToXsfefKwzZuCrxI_JmXi2einBSGbSTt3_8L2Pgdo5dLMQPHiyG5Yb1tVZBO_A3t_voBuyCKLrW0mj0io3I28SFaQRhKUrOFQUb97EoRNYqn-6DFkfwnq5Z8LFMpngkoX516FwID3sjOjVaVMnmLpHPUyRsoovwRTpfjs/s1600/pixel-watch-on-user-made-by-google.jpg\" width=\"640\" /></div>\n\n<p>The new <a href=\"https://store.google.com/us/product/pixel_watch_4?utm_source=keyword&amp;utm_medium=google_oo&amp;utm_campaign=GS108535&amp;hl=en-US\" target=\"_blank\">Pixel Watch 4</a> is here, and it’s the first smartwatch built to showcase the full power of <a href=\"https://developer.android.com/design/ui/wear/guides/get-started\" target=\"_blank\">Material 3 Expressive</a> on <a href=\"https://developer.android.com/training/wearables/versions/6\" target=\"_blank\">Wear OS 6</a>. This is where the vision for the platform truly comes to life, allowing you to <a href=\"https://developer.android.com/wear\" target=\"_blank\">build stunning, modern apps and tiles</a> without compromising on performance. With this release, you no longer have to choose between beautiful animations and battery life; with Wear OS 6, you can build experiences that are beautiful, helpful, and powerful, all at once.</p>\n\n<p>To get that modern look, you can use the new <a href=\"https://developer.android.com/jetpack/androidx/releases/wear-compose-m3\" target=\"_blank\">Material 3 Expressive libraries for Compose on Wear OS</a>, which provide powerful components like the <span style=\"color: #0d904f; font-family: courier;\">TransformingLazyColumn</span>uid lists and the <span style=\"color: #0d904f; font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/wear/compose/material3/package-summary#EdgeButton%28kotlin.Function0,androidx.compose.ui.Modifier,androidx.wear.compose.material3.EdgeButtonSize,kotlin.Boolean,androidx.wear.compose.material3.ButtonColors,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1%29\" target=\"_blank\">EdgeButton</a></span> to create UIs that feel natively built for the wrist.</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"moving image of Material 3 Expressive libraries for Compose on Wear OS demo\" border=\"0\" height=\"480\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhijnn9FEdfN2ufO3fHbM1eORwm3ZH5rGXZeDQ5yEmom_gpEbqbKKcRvDVbWZp093-RdlP_9QR8oOJo2ar_h8kaEFONhhY2dNgeI7osH_7HKABZBJH5zRFgK6_36UXWBFsKOUFvTc64Ou6GqplYHEj0poaSIvRaNP4gi_dLbch1U66ZR-CKbiD5EXagHTQ/s1600/material-3-expresive-library-compose-wear-os-.gif\" width=\"100%\" /></div>\n\n<p>This focus on design naturally extends to the centerpiece of the user’s experience, the watch face itself. To give you more creative control, we've introduced version 4 of the <a href=\"https://developer.android.com/training/wearables/wff\" target=\"_blank\">Watch Face Format</a>, which unlocks possibilities like fluid, animated state transitions and lets users select their own photos for the background. And to help developers  create their own watch face marketplaces, we’ve introduced the <a href=\"https://developer.android.com/training/wearables/watch-face-push\" target=\"_blank\">Watch Face Push API</a>. We’ve partnered with well-known watch face developers – including Facer, TIMEFLIK, WatchMaker, and Pujie – who are bringing their unique watch face experiences to the new devices that users can already get today.</p>\n\n<p>All of this is built on a more reliable and efficient foundation, with watches updating to <a href=\"https://developer.android.com/training/wearables/versions/6\" target=\"_blank\">Wear OS 6</a> seeing up to a 10% improvement in battery life and quicker app launches. This gives you the confidence to use these new creative tools, knowing your app will perform beautifully. Start building apps for the wrist using the resources and guidance at <a href=\"https://developer.android.com/wear\" target=\"_blank\">developer.android.com/wear</a>.</p>\n\n<h2><span style=\"font-size: x-large;\">Ready to build for every screen today?</span></h2>\n\n<div style=\"text-align: center;\"><img alt=\"open Pixel 10 Fold on the left and Pixel Watch 4 on the right\" border=\"0\" height=\"480\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgNu-7skohLVf6OvoBjoCOgIR84M4F19KcjiLddqGd-2id2JQRFsLe0Sgvbda13t0brdkrnNUCmYrg_SsqWlomo4qWuwcwLrbJoGT7C_jNsA8mEcDZGVM1YZYi1Zt77bXvGwZTtjBY2u0OH_iEIgnuDs5IVhE48OGDcyRtHkBL5Ke9Y7iNh2VSvA_SEXTU/s1600/made-by-google-form-factors.png\" width=\"100%\" /></div>\n\n<p>The opportunities for your app are bigger than ever, and you can start today. See how your app performs across screen sizes by using the <a href=\"https://developer.android.com/studio/run/resizable-emulator\" target=\"_blank\">resizable emulator in Android Studio</a>, and explore our <a href=\"https://developer.android.com/large-screens/gallery\" target=\"_blank\">large-screen design gallery</a> for inspiration.</p>\n\n<p>For your wearables, the best way to begin is by upgrading your UI with the new <a href=\"https://developer.android.com/jetpack/androidx/releases/wear-compose-m3\" target=\"_blank\">Material 3 Expressive libraries for Compose on Wear OS</a> and exploring the engaging experiences you can build with the Watch Face Push API. Finally, use the Wear OS 6 emulator to test and verify your app's experience.</p>\n\n<p>You can find all the resources you need, including documentation, samples, and guides at <a href=\"http://developer.android.com/adaptive-apps\" target=\"_blank\">developer.android.com/adaptive-apps</a> and <a href=\"https://developer.android.com/wear\" target=\"_blank\">developer.android.com/wear</a>.</p>\n\n<p>We can’t wait to see what you develop next!</p>",
    "published": "2025-08-21T09:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "#WeArePlay: How Maliyo Games is turning local culture into global hits",
    "link": "https://android-developers.googleblog.com/2025/08/weareplay-milayo-games-turning-local-culture-into-global-hits.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgscwfC-F8tX_RZ6yeOF79tNnhhi40qgwz4zSCg2oYZIXn9anbvBSNZ0LCnXFA0eGw43YLSUZqZAAs7_xSFtPB-7uZy8xgai7JmkF3y0EWtYVhZddz4VkFGqt8jR_wWc_IG8WrHe0eGSGU11-7_rVNLW2DXymaCUsc-0Dy6ADpGEfayJ9usUvscLLtDub0/s1600/weareplay-maliyo-games-hugo.png\" style=\"display: none;\" />\n\n<em>Posted by Robbie McLachlan – Developer Marketing</em>\n\n<div><br /></div>\n\n\n<p>In our latest <a href=\"https://play.google.com/console/about/weareplay/\" target=\"_blank\">#WeArePlay</a> film, which celebrates the people behind apps and games on Google Play, we meet Hugo, the founder of <a href=\"https://play.google.com/store/apps/dev?id=7388683869055327292&amp;hl=en_GB\" target=\"_blank\">Maliyo Games</a>. He is on a mission to put African stories and talent on the global gaming map by creating vibrant games inspired by local life and culture. Discover how he is building not just games, but an entire ecosystem for game development on the continent.</p>\n\n<br />\n\n<h4><span style=\"font-size: large;\">You went from a career in finance to becoming a pioneer in Africa's games industry. What inspired that leap?</span></h4>\n\n<p>I’ve always had a passion for economics and business, but after some years in finance, I wanted to move back to Nigeria and help build something new. I noticed a problem on our continent: we were huge consumers of digital content but not creators. Seeing the passion for our local music and film, I knew we could bring that same energy to gaming. My mission became clear: to shift us from being 'net consumers' to 'net creators,' using games as a medium to take our unique stories and culture to the world.</p>\n\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"Hugo, founder of Maliyo Games, Nigeria\" border=\"0\" height=\"426\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgOExVd9XzchS1qZj_wqJn2jqFc7rQ_JZ6u_JyHgvf0DWv3PPVQY0H8AQaiPKwsZ5IxjBuJV4SzcMfUIUFpdJfHk4ckeD8HlTo4GsNBh6-MLR_ttUoTmBO2wPWw4XOKWVdYsaZinq5GMBypDfps3Qxy1oGJG4TSkqXAgTZcjMIR_0GpdWCR5NLdn8Nu3ww/s1600/05_NIGERIA_MALIYO%20GAMES_FOUNDER_HUGO%20OBI_edited.png\" width=\"100%\" /></a></div>\n\n<h4><span style=\"font-size: large;\">Your games are bursting with African culture. Why is it so important to you to tell these specific stories?</span></h4>\n\n<p>Because these are our stories to tell! I think of us as storytellers first, and games are our medium. We create games based on shared experiences from our childhoods, we feature things everyone can relate to like our love for property development and redesign in <a href=\"https://play.google.com/store/apps/details?id=com.maliyo.safaricity&amp;hl=en_GB\" target=\"_blank\">Safari City</a>.</p>\n\n<p>When people in Africa play our games, the reaction is pure joy and surprise. They say, “I can’t believe you guys built this!” because they see themselves and their lives reflected. It's not just about enjoyment; it’s about a deeper, emotional connection.</p>\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"a user holds a mobile device with a Maliyo game on screen\" border=\"0\" height=\"426\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhHyJh7cEZ3vcurDNLIYmJNyUQYVTrcAPSArNvCL4SNzgz-zs_3WaPg3JBPWkc6Oofsx15o8vwGJ3i3NH_-ZbPgpt6GqfrzRCYKMVdd89ewZZRdS_IbqUJLEMk0Yp__SRG6wsyeRAhyphenhyphenwtfS9ohyphenhyphenb097OAog84IMSTV1mbYQWhtAatX9hamBuQMB0sP446I/s1600/07_NIGERIA_MALIYO%20GAMES_FOUNDER_HUGO%20OBI.jpg\" width=\"100%\" /></a></div>\n\n<h4><span style=\"font-size: large;\">Building a game studio where there was no established industry must have been tough. How did you tackle the challenge of finding and nurturing talent on the continent?</span></h4>\n\n<p>It was definitely hard. When we started in 2012, the biggest challenge wasn't just finding skills, but finding the right mindset; so we started <a href=\"https://gameupafrica.com/\" target=\"_blank\">GameUp Africa</a>, a free, pan-African training program. It was a longer road, for sure, but it has transformed everything. Today, 90% of our team came through that program. We're now a team of about 30 people from Nigeria, Ghana, Kenya, and more. Seeing these young, brilliant creators, some as young as 17, building their careers with us is the most satisfying part of what I do.</p>\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"a Game Up Africa cohort along with Hugo surrounds a student to observe their screen\" border=\"0\" height=\"426\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgeopQiWdqI0bcwtMnNeFd_qUW0iKFDK9KvTZDjIaSYzJHKL7BZTQmwV8oV0CszIDuIbQOSE4wTkhsuf8WuCo7BiaLh-pM_o4xMikBUJojKcXTBCyzSvUBuhDGqBjo5-cKJzf7pNPtLCU0mZn1VPKJ5T7EaVyoZLCDY6NB4kVfxI0vEttX2OwqgCC5ZNkY/s1600/06_NIGERIA_MALIYO%20GAMES_FOUNDER_HUGO%20OBI.jpg\" width=\"100%\" /></a></div>\n\n<h4><span style=\"font-size: large;\">How has Google Play helped you achieve global reach from your base in Lagos?</span></h4>\n\n<p>For us, Google Play was a no-brainer. Africa is primarily an Android market, so it's our primary distribution platform to reach our audience here and in the diaspora. But it's more than just a storefront; it’s the entire infrastructure. We use the full suite of tools: Firebase’s analytics give us incredible insights into player behaviour, Google AdMob helps us monetize, and the testing tools let us experiment with new features. Google Play makes it possible for a studio in Lagos to build, scale, and operate as a truly global company without having to build that foundation ourselves.</p>\n\n<h4><span style=\"font-size: large;\">What is next for Maliyo Games?</span></h4>\n\n<p>Now, our sights are set on growth. The next big goal is to get one of our games to one million monthly active users, as we build towards our long-term ambition of reaching an engaged community of 500 million by 2030.</p><br />\n\n<p>Discover other inspiring app and game founders featured in <a href=\"https://play.google.com/console/about/weareplay/\" target=\"_blank\">#WeArePlay</a>.</p>\n\n<div><br /><br /></div>\n\n<div style=\"text-align: center;\"><img alt=\"Google Play logo\" border=\"0\" height=\"41\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxnvf5XzyebGljqgi8J7by9XsvaL5WWLNamSyTg4w_c0kPHjY1B1no1FQsdSfUHUwNw0UuYfXuo6i7K6VpdyV2-K8ms4VFmZA438ujm6qwtZMt5rJfMGymhQ_iCX2Z8h0MuJo7gXUQ4Hb-hjKYK1isibMZZxCyX_vo3kGoP5tieK2PI2ZhYdGh4gsqhwA/w200-h41/lockup_ic_Google_Play_H_260x53px_clr.png\" width=\"200\" /></div>",
    "published": "2025-08-21T06:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Android 16 QPR2 Beta 1 is here",
    "link": "https://android-developers.googleblog.com/2025/08/android-16-qpr2-beta-1-is-here.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiS4ubVQL0hsVmbuMRCMgCsA64s6F0Wig_D5T3m3AS0DHuvr7A9BwniaktsYZpZ7LCU4NxdZNKSYvCM_lIjFav4DQxB-gDQo_hmz871Od0QQ3lsyoAgnLtiMTXkPdv80cubXkIsUBlkjU7f1Tmk-zErZ3ztQGsuxUgOs7y4e4HBVjr66m7W9MuUq5Sc9FE/s1600/A16-wordmark.png\" style=\"display: none;\" />\n\n<em>Posted by Matthew McCullough – VP of Product Management, Android Developer</em>\n\n<div><br /></div>\n\n<p>Today we're releasing <b>Android 16 quarterly platform release 2 (QPR2) Beta 1</b>, providing you with an early opportunity to try out the APIs and features that are moving Android forward. This beta focuses on several key improvements:</p>\n<ul><ul>\n<li>Enhanced User Experience: A better experience across all form factors, from phones to foldables and tablets.</li></ul><ul>\n<li>Enabling Richer Apps: New APIs for creative expression, productivity, media, and connectivity.</li></ul><ul>\n<li>Developer Productivity: new platform features to help you debug and test your apps.</li>\n</ul></ul>\n\n\n<h2><span style=\"font-size: x-large;\">A minor SDK version</span></h2>\n\n<p>This release marks the first Android beta with a minor SDK version allowing us to more rapidly innovate with new platform APIs provided outside of our usual once-yearly timeline. Unlike the major platform release in Q2 that included behavior changes that impact app compatibility, the changes in this release are largely additive and designed to minimize the need for additional app testing.</p>\n\n<div style=\"text-align: center;\"><img alt=\"Android 16 SDK release cadence\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi08BSp5rhpK_ux7TCYUW02KjKqjLXCsla9VGZ7V0nicsX9S6ySNwD2dmjaQbPJJ0EWdeAbUe77WUitxemEzDuP33SgIynUppkthk47yaM6TCq4vdb4l1bOPS-vvo8c57HOOyrpnYw8emeze-h49FwQ-X0xl7vGgDimFE9ggKTLXjwBfUFr_t3zBLkYyyU/s16000/Android-16-SDK-releases-2025-timeline.png\" width=\"100%\" /></div>\n\n<p>Your app can safely call the new APIs on devices where they are available by using <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/os/Build.VERSION#SDK_INT_FULL\" target=\"_blank\">SDK_INT_FULL</a></span> and the respective value from the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/os/Build.VERSION_CODES_FULL\" target=\"_blank\">VERSION_CODES_FULL</a></span> enumeration.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">if</span><span style=\"color: #bbbbbb;\"> </span>(Build.<span style=\"color: #687822;\">VERSION</span>.<span style=\"color: #687822;\">SDK_INT_FULL</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">&gt;=</span><span style=\"color: #bbbbbb;\"> </span>Build.<span style=\"color: #687822;\">VERSION_CODES_FULL</span>.<span style=\"color: #687822;\">BAKLAVA_1</span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// Call new APIs from the Android 16 QPR2 release</span>\n}\n</pre></div>\n\n<p>You can also use the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/os/Build#getMinorSdkVersion%28int%29\" target=\"_blank\">Build.getMinorSdkVersion()</a></span> method to get just the minor SDK version number.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">minorSdkVersion</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Build.<span style=\"color: #687822;\">getMinorSdkVersion</span>(VERSION_CODES_FULL.<span style=\"color: #687822;\">BAKLAVA</span>)\n</pre></div>\n\n<p>The original <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/os/Build.VERSION_CODES\" target=\"_blank\">VERSION_CODES</a></span> enumeration can still be used to compare against the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/os/Build.VERSION#SDK_INT\" target=\"_blank\">SDK_INT</a></span> enumeration for APIs declared in non minor releases.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">if</span><span style=\"color: #bbbbbb;\"> </span>(Build.<span style=\"color: #687822;\">VERSION</span>.<span style=\"color: #687822;\">SDK_INT</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">&gt;=</span><span style=\"color: #bbbbbb;\"> </span>Build.<span style=\"color: #687822;\">VERSION_CODES</span>.<span style=\"color: #687822;\">BAKLAVA</span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// Call new APIs from the Android 16 release</span>\n}\n</pre></div>\n\n<p>Since minor releases aren't intended to have breaking behavior changes, they cannot be used in the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/guide/topics/manifest/uses-sdk-element\" target=\"_blank\">uses-sdk manifest attributes</a></span>.</p>\n\n\n<h2><span style=\"font-size: x-large;\">UI, system experience, and accessibility</span></h2>\n\n<p>This release introduces refinements to the system UI, user experience, and accessibility, from theming changes to input handling to new APIs for adaptive apps.</p>\n\n<h3><span style=\"font-size: large;\">Dark theme’s new expanded option</span></h3>\n\n<p>To create a more consistent user experience for users who have low vision, photosensitivity, or simply those who prefer a dark system-wide appearance, an expanded option under dark theme is being introduced. When enabled by a user, the system will intelligently invert the UI of apps that appear light despite users having selected the dark theme.</p>\n\n<div style=\"text-align: center;\"><img alt=\"A split image showing standard light theme on the left and expanded dark theme on the right on a pixel device\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjn5QlWz1OXH86lGWtBWhcbZKeS1vCNC5IPuf_0s1zHSm1j_qnTTkBJVDFXJmvPWUSdmNiHpfah8_7Ob3YNlKF4HOW8IxSPfAk8U8Ohvog9BhNIP34PBSGlxFDMXdmr5dUc5Q41s6G4V2MOf0mBOIijYOkfYKyqHjPWi1iSfAUjxqSWblbNjutZDIlkYZo/s16000/android-16-dark-theme-expanded-option.png\" width=\"100%\" /></div>\n\n<p>The system uses your app's <span style=\"color: #0d904f; font-family: courier;\">isLightTheme</span> theme attribute to determine whether to apply inversion. If your app <a href=\"https://developer.android.com/develop/ui/views/theming/darktheme#support-dark-theme\" target=\"_blank\">inherits from one of the standard DayNight themes</a>, this is done automatically for you, otherwise make sure to declare <span style=\"color: #0d904f; font-family: courier;\">isLightTheme=\"false\"</span> in your dark theme to ensure your app is not inadvertently inverted. Standard Android Views, Composables, and WebViews will be inverted, while custom rendering engines like Flutter will not. The system also automatically darkens your app's splash screen and adjusts the status bar color for contrast.</p>\n\n<p>This is largely intended as an accessibility feature. We strongly recommend implementing a native dark theme, which gives you full control over your app's appearance;  you can protect your brand's identity, ensure text is always readable, and prevent any visual glitches from happening when your UI is automatically inverted, guaranteeing a polished, reliable experience for your users.</p>\n\n<h3><span style=\"font-size: large;\">Auto-themed app icons</span></h3>\n\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhLfrd6h-AlVOau0u8ukrkCdZQIs7bYdQPAPw9Q-f7JjC5qeOZiWrdK2AGUslijUOakGglchyCMLiYj0qNw4hbi5r6Vo7h76Zbpcw83dK3fj87MnnXP704qeUCAcgVga8kw9rZzLZjeFfvQJg31RcHkEPTnnUq1k4qFygupmiLZwjKQW3jfRyDdNUnHk-g/s1216/android-16-auto-themed-app-icons.gif\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"320\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhLfrd6h-AlVOau0u8ukrkCdZQIs7bYdQPAPw9Q-f7JjC5qeOZiWrdK2AGUslijUOakGglchyCMLiYj0qNw4hbi5r6Vo7h76Zbpcw83dK3fj87MnnXP704qeUCAcgVga8kw9rZzLZjeFfvQJg31RcHkEPTnnUq1k4qFygupmiLZwjKQW3jfRyDdNUnHk-g/s320/android-16-auto-themed-app-icons.gif\" width=\"65%\" /></a></div><p></p><p>We recommend that apps control the design of their themed app icon by including a <a href=\"https://developer.android.com/develop/ui/views/launch/icon_design_adaptive#add-to-your-app\" target=\"_blank\">monochrome</a> layer within their adaptive icon. You can <a href=\"https://developer.android.com/studio/releases/past-releases/as-meerkat-feature-drop-release-notes#themed-icon-support\" target=\"_blank\">preview</a> the themed version of your app icon using Android Studio.</p>\n\n<p>Android 16 QPR2 can automatically generate a themed icon for your app if you don't provide a dedicated one. The system applies a color filtering algorithm to your existing launcher icon to render it in a monochrome style, allowing it to integrate with the user's chosen theme.</p><div style=\"text-align: left;\"><br /></div>\n\n<h3><span style=\"font-size: large;\">Interactive chooser sessions</span></h3>\n\n<p>This new capability allows your app's UI to remain fully interactive when the system sharesheet is open. You can display custom UI, dynamically update the content or targets in the Chooser, and programmatically control its state. You'll use the new <span style=\"color: #0d904f; font-family: courier;\">ChooserManager</span> to start an interactive session and the <span style=\"color: #0d904f; font-family: courier;\">ChooserSession</span> object to manage it.</p>\n\n<h3><span style=\"font-size: large;\">Smoother Android migrations</span></h3>\n\n<p>A new 3rd-party Data Transfer API is being introduced to enable more reliable and secure data migration between Android and iOS devices. Your app can now opt-in to participate in cross-platform data transfers. This requires updating your app's data extraction rules XML with a new <span style=\"color: #0d904f; font-family: courier;\">&lt;cross-platform-transfer&gt;</span> tag and implementing custom logic in the <span style=\"color: #0d904f; font-family: courier;\">BackupAgent</span> to export and import app data to and from other platforms. New methods are also being added to <span style=\"color: #0d904f; font-family: courier;\">BackupAgent</span>, such as <span style=\"color: #0d904f; font-family: courier;\">onMeasureFullBackup</span>, to give you more control over the backup process for large datasets.</p>\n\n<h3><span style=\"font-size: large;\">PDF document editing</span></h3>\n\n<p>The <span style=\"color: #0d904f; font-family: courier;\">android.graphics.pdf</span> package has been significantly expanded to support annotating and editing PDF documents. This class provides core APIs for apps that wish to create their own PDF user experience, and is the foundation for the <a href=\"https://developer.android.com/jetpack/androidx/releases/pdf\" target=\"_blank\">Jetpack PDF library</a>, which also provides the UI for an embedded PDF viewer. The <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page\" target=\"_blank\">PdfRenderer.Page</a></span> class now allows you to:</p>\n<ul><ul>\n<li><b>Edit Annotations:</b> <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page#addPageAnnotation%28android.graphics.pdf.component.PdfAnnotation%29\" target=\"_blank\">Add</a>, <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page#removePageAnnotation%28int%29\" target=\"_blank\">remove</a>, and <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page#updatePageAnnotation%28int,%20android.graphics.pdf.component.PdfAnnotation%29\" target=\"_blank\">update</a> annotations like <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/graphics/pdf/component/HighlightAnnotation\" target=\"_blank\">HighlightAnnotation</a></span>, <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/graphics/pdf/component/StampAnnotation\" target=\"_blank\">StampAnnotation</a></span>, and <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/graphics/pdf/component/FreeTextAnnotation\" target=\"_blank\">FreeTextAnnotation</a></span>.</li></ul><ul>\n<li><b>Edit Page Content:</b> Add, update, or remove page objects, including <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/graphics/pdf/component/PdfPageImageObject\" target=\"_blank\">PdfPageImageObject</a></span>, <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/graphics/pdf/component/PdfPagePathObject\" target=\"_blank\">PdfPagePathObject</a></span>, and <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/graphics/pdf/component/PdfPageTextObject\" target=\"_blank\">PdfPageTextObject</a></span>.</li></ul><ul>\n<li><b>Query Page Objects:</b> Use <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page#getPageObjects%28%29\" target=\"_blank\">getPageObjects</a>()</span> to get a list of page objects, and <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page#getTopPageObjectAtPosition%28android.graphics.PointF,%20int[]%29\" target=\"_blank\">getTopPageObjectAtPosition()</a></span> to identify what object is at a specific coordinate.</li>\n</ul></ul> \n\n<p>With these new APIs, your apps can support use cases such as form filling, document signing, document review/collaboration, interactive study/note taking, and more. We're also working to bring these annotation and editing capabilities to the Jetpack PDF library to further simplify the integration of these features.</p>\n\n<h3><span style=\"font-size: large;\">Display Topology API</span></h3>\n\n<p>To support advanced multi-display experiences, the new Display Topology API provides your app with information about how multiple displays are arranged — their relative positions and absolute bounds. A new <span style=\"color: #0d904f; font-family: courier;\">Display.isInternal()</span> method helps distinguish between built-in and other screens. You can also register a <span style=\"color: #0d904f; font-family: courier;\">TopologyListener</span> to receive real-time updates when the display setup changes.</p>\n\n<h3><span style=\"font-size: large;\">Device-aware ViewConfiguration</span></h3>\n\n<p><span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/view/ViewConfiguration\" target=\"_blank\">ViewConfiguration</a></span> values (e.g., touch slop, long press timeout) can now be tailored to individual virtual devices. This means that an app running on a virtual device will now use configuration values appropriate for that device's characteristics, not the host device's.</p>\n\n<p>To ensure your app behaves correctly in multi-display scenarios (e.g., an activity on the phone and another on a connected smart display), you should migrate from static <span style=\"color: #0d904f; font-family: courier;\">ViewConfiguration</span> methods to instance-based methods by calling <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/view/ViewConfiguration#get%28android.content.Context%29\" target=\"_blank\">ViewConfiguration.get(context)</a></span>.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #3d7b7b; font-style: italic;\">// Instead of this:</span>\n<span style=\"color: #3d7b7b; font-style: italic;\">// val longPressTimeout = ViewConfiguration.getLongPressTimeout()</span>\n\n<span style=\"color: #3d7b7b; font-style: italic;\">// Do this, using the specific Activity's context:</span>\n<span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">vc</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>ViewConfiguration.<span style=\"color: #687822;\">get</span>(myActivityContext)\n<span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">longPressTimeout</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>vc.<span style=\"color: #687822;\">longPressTimeout</span>\n</pre></div>\n\n\n<h3><span style=\"font-size: large;\">More granular haptic feedback control</span></h3>\n\n<p>A new API allows you to specify the usage in terms of <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/os/VibrationAttributes\" target=\"_blank\">VibrationAttributes</a></span> (e.g., <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/os/vibrator/HapticFeedbackRequest.Builder#setUsage(int):~:text=VibrationAttributes.USAGE_TOUCH\" target=\"_blank\">USAGE_TOUCH</a></span>) when triggering haptic feedback. This ensures your app's vibrations align more precisely with user-defined intensity settings for different contexts, like touch vs. accessibility.</p>\n\n<p>Use the new <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/view/View#performHapticFeedback(android.os.vibrator.HapticFeedbackRequest)\" target=\"_blank\">View.performHapticFeedback(HapticFeedbackRequest)</a></span> method to pass a request that specifies both the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/os/vibrator/HapticFeedbackRequest.Builder#setFlags(int)\" target=\"_blank\">HapticFeedbackConstant</a></span> and the desired <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/os/vibrator/HapticFeedbackRequest.Builder#setUsage(int)\" target=\"_blank\">Usage</a></span>. Existing calls will continue to work as before.</p>\n\n<h3><span style=\"font-size: large;\">Quick Settings Tile categories</span></h3>\n\n<p>To improve the discoverability of your app's Quick Settings tiles, you can now optionally assign them to a predefined category. By adding a <span style=\"color: #0d904f; font-family: courier;\">&lt;meta-data&gt;</span> tag to your <span style=\"color: #0d904f; font-family: courier;\">TileService</span> declaration in the <span style=\"color: #0d904f; font-family: courier;\">AndroidManifest.xml</span>, your tile can be grouped with similar system tiles in the Quick Settings Edit mode.</p>\n  \n<p>Example for a connectivity-related tile:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #666666;\">&lt;</span>service\n<span style=\"color: #bbbbbb;\">    </span>android:name<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\".MyConnectivityTileService\"</span>\n<span style=\"color: #bbbbbb;\">    </span>...<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">&gt;</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #666666;\">&lt;</span>intent<span style=\"color: #666666;\">-</span>filter<span style=\"color: #666666;\">&gt;</span>\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #666666;\">&lt;</span>action<span style=\"color: #bbbbbb;\"> </span>android:name<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\"android.service.quicksettings.action.QS_TILE\"</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">/&gt;</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #666666;\">&lt;/</span>intent<span style=\"color: #666666;\">-</span>filter<span style=\"color: #666666;\">&gt;</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #666666;\">&lt;</span>meta<span style=\"color: #666666;\">-</span>data\n<span style=\"color: #bbbbbb;\">        </span>android:name<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\"android.service.quicksettings.TILE_CATEGORY\"</span>\n<span style=\"color: #bbbbbb;\">        </span>android:value<span style=\"color: #666666;\">=</span><span style=\"color: #ba2121;\">\"android.service.quicksettings.CATEGORY_CONNECTIVITY\"</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">/&gt;</span>\n<span style=\"color: #666666;\">&lt;/</span>service<span style=\"color: #666666;\">&gt;</span>\n</pre></div>\n\n<h3><span style=\"font-size: large;\">Additional UI and System Experience updates</span></h3>\n<ul><ul>\n<li><b>Controlled Mouse Scrolling:</b> A new mouse system setting allows users to enable \"Controlled Scrolling\" for external mice, which makes scrolling speed directly proportional to the physical wheel movement.</li></ul><ul>\n<li><b>Picture-in-Picture (PiP) Refactoring:</b> The underlying mechanics of PiP transitions have been refactored, resulting in smoother and more reliable animations.</li></ul><ul>\n<li><b>Public System Update Intent:</b> The <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/provider/Settings#ACTION_SYSTEM_UPDATE_SETTINGS\" target=\"_blank\">android.settings.ACTION_SYSTEM_UPDATE_SETTINGS</a></span> intent action is now a public API, providing a standardized way for apps to direct users to their device's system update page. See the documentation for how to launch this intent securely.</li></ul><ul>\n<li><b>Time Zone Notifications:</b> The system will now notify users when their time zone is automatically changed.</li></ul><ul>\n<li><b>Files Desktop UX:</b> The DocumentsUI file manager is receiving a Material 3 Expressive design refresh and will show \"Visual Signals\" for file operations.</li></ul><ul>\n<li><b>Printer Info Screen:</b> The Android Default Print Service now displays a more comprehensive printer information screen, including status and supply levels.</li>\n</ul></ul>\n\n<h2><span style=\"font-size: x-large;\">Media and Audio</span></h2>\n\n<p>This release brings support for new audio formats, provides more granular control over audio playback, and enhances the volume experience for voice interactions.</p>\n\n<h3><span style=\"font-size: large;\">IAMF decoding support</span></h3>\n\n<p>Android 16 QPR2 adds software decoding for Immersive Audio Model and Formats (IAMF) audio. IAMF is a new open-source spatial audio format, available under a royalty free license from Alliance for Open Media. The IAMF decoder supports Opus, PCM, AAC and FLAC audio within IAMF files, in full compliance with the IAMF specification. You can leverage IAMF to deliver rich, immersive audio experiences in your Android apps.</p>\n\n<p>ExoPlayer will automatically use the framework IAMF decoder when available.  For backwards compatibility, the <a href=\"https://github.com/androidx/media/tree/release/libraries/decoder_iamf\" target=\"_blank\">IAMF ExoPlayer Extension</a> can also be used to decode IAMF.</p>\n\n<h3><span style=\"font-size: large;\">Personal Audio Sharing in Output Switcher</span></h3>\n\n<p>Personal Audio Sharing for Bluetooth Low Energy (LE) Audio devices is now integrated directly into the system's Output Switcher. This system-level UI enhancement provides a more intuitive and consistent way for users to manage and share audio from your app to multiple LE Audio devices without requiring any changes to your existing audio playback code.</p>\n\n<h3><span style=\"font-size: large;\">New AAudio APIs for performance and control</span></h3>\n\n<p>The native AAudio library for high-performance audio has been updated. These new APIs provide more control and better performance for demanding audio applications that rely on the NDK, especially those focused on power-efficient, high-quality playback.</p>\n<ul><ul>\n<li><b>Partial Buffer Processing in Callbacks:</b> A new data callback, <span style=\"color: #0d904f; font-family: courier;\">AAudioStream_partialDataCallback</span>, allows your app to specify exactly how many frames it has processed. This gives you more flexibility when working with large data buffers (like in compressed offload scenarios), as you no longer need to provide the entire requested buffer at once.</li></ul><ul>\n  \n<li><b>PCM Offload over MMAP:</b> To improve power efficiency, AAudio now supports PCM offload over the MMAP path. You can request this by setting the performance mode to <span style=\"color: #0d904f; font-family: courier;\">AAUDIO_PERFORMANCE_MODE_POWER_SAVING_OFFLOADED</span>. A new API, <span style=\"color: #0d904f; font-family: courier;\">AAudioStream_flushFromFrame</span>, is also available for MMAP offload streams to reset the playback position when a user seeks or skips a track.</li>\n</ul></ul>\n  \n  \n<h3><span style=\"font-size: large;\">Additional Media and Audio updates</span></h3>\n<ul><ul>  \n<li><b>HDR/SDR Brightness Slider:</b> A new system-level slider allows users to adjust the perceived brightness of HDR content. Your app's HDR content will automatically adapt to this user preference without any required code changes.</li></ul><ul>\n<li><b>LE Audio Enhancements:</b> Support has been added for LE Audio connection subrating to speed up reconfiguration (<span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback#onSubrateChange(android.bluetooth.BluetoothGatt,%20int,%20int)\" target=\"_blank\">onSubrateChange</a></span>). The platform also now also supports the OPUS Hi-Res (<span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothLeAudioCodecConfig#SOURCE_CODEC_TYPE_OPUS_HI_RES\" target=\"_blank\">SOURCE_CODEC_TYPE_OPUS_HI_RES</a></span>) codec.</li></ul><ul>\n<li><b>Photo Picker:</b> The Photo Picker can now be launched with a specific album or search query highlighted using extras like <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/provider/MediaStore#EXTRA_PICK_IMAGES_HIGHLIGHT_ALBUM\" target=\"_blank\">EXTRA_PICK_IMAGES_HIGHLIGHT_ALBUM</a></span> and <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/provider/MediaStore#EXTRA_PICK_IMAGES_HIGHLIGHT_SEARCH_RESULTS\" target=\"_blank\">EXTRA_PICK_IMAGES_HIGHLIGHT_SEARCH_RESULTS</a></span>.</li>\n</ul></ul>\n  \n<h2><span style=\"font-size: x-large;\">Connectivity</span></h2>\n\n<p>New APIs are available to support emerging connectivity standards, enhance device management, and give users more control over network privacy.</p>\n\n<h3><span style=\"font-size: large;\">Companion Device Management enhancements</span></h3>\n\n<p>The <a href=\"https://developer.android.com/reference/android/companion/CompanionDeviceManager\" target=\"_blank\">Companion Device Manager</a> (CDM) is receiving several updates to improve cross-app interactions and user control in system Settings.</p>\n\n<ul><ul> \n<li><b>Custom device icons:</b> Your app can now  provide a custom icon for self-managed device associations by supplying a Bitmap using the new <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/companion/AssociationRequest.Builder#setDeviceIcon(android.graphics.drawable.Icon)\" target=\"_blank\">setDeviceIcon()</a></span> method on the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/companion/AssociationRequest.Builder\" target=\"_blank\">AssociationRequest.Builder</a></span>. The icon will be displayed in system dialogs and settings, creating a more recognizable and trusted user experience. You can also retrieve the icon for an existing association using <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/companion/AssociationRequest#getDeviceIcon()\" target=\"_blank\">AssociationInfo.getDeviceIcon()</a></span>.</li></ul><ul>\n\n  \n<li><b>Association removal notifications:</b> Your app can now listen for the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/companion/DevicePresenceEvent#EVENT_ASSOCIATION_REMOVED\" target=\"_blank\">EVENT_ASSOCIATION_REMOVED</a></span> callback via <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/companion/CompanionDeviceManager#startObservingDevicePresence(android.companion.ObservingDevicePresenceRequest)\" target=\"_blank\">startObservingDevicePresence</a></span>. This event fires when a user \"forgets\" a device in system Settings or when your app's data is cleared, allowing your app to maintain an accurate connection state.</li></ul><ul>\n  \n  \n<li><b>Cross-App verification:</b> System apps can now verify if your companion app has a legitimate association with a device and monitor the presence of devices managed by your app using the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/companion/DeviceId\" target=\"_blank\">DeviceId</a></span> created during association with the new <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/companion/CompanionDeviceManager#createAndSetDeviceId(int,%20android.companion.DeviceId)\" target=\"_blank\">createAndSetDeviceId</a></span> API.</li>\n</ul></ul>\n\n<h3><span style=\"font-size: large;\">Additional connectivity updates</span></h3>\n\n<ul><ul> \n<li><b>Bluetooth:</b> <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner\" target=\"_blank\">BluetoothLeScanner</a></span> now supports passive scanning by delivering advertising packets without sending a scan response, using <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/bluetooth/le/ScanSettings#SCAN_TYPE_PASSIVE\" target=\"_blank\">ScanSettings.SCAN_TYPE_PASSIVE</a></span>. A reason for bond loss is now provided via <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothDevice#EXTRA_BOND_LOSS_REASON\" target=\"_blank\">BluetoothDevice.EXTRA_BOND_LOSS_REASON</a></span>. You can also now retrieve service UUIDs directly from BLE advertising data using the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothDevice#EXTRA_UUID_LE\" target=\"_blank\">BluetoothDevice.EXTRA_UUID_LE</a></span> extra.</li></ul><ul>\n\n<li><b>Wi-Fi RTT Ranging:</b> The ranging stack has been updated with new classes and parameters to support Wi-Fi Round-Trip-Time (RTT) ranging against stations (<span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/ranging/wifi/rtt/RttStationRangingParams\" target=\"_blank\">RttStationRangingParams</a></span>, <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/ranging/wifi/rtt/RttStationRangingParams.Builder\" target=\"_blank\">RttStationRangingParams.Builder</a></span>).</li></ul><ul>\n\n<li><b>Phone Number Parsing:</b> A new <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/telephony/PhoneNumberManager\" target=\"_blank\">PhoneNumberManager</a></span> is available for parsing and validating phone numbers from an IMS P-Associated-URI header. You can access it via <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/content/Context#getSystemService(java.lang.String)\" target=\"_blank\">getSystemService</a></span> with the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/content/Context#TELEPHONY_PHONE_NUMBER_SERVICE\" target=\"_blank\">TELEPHONY_PHONE_NUMBER_SERVICE</a></span> parameter . The <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/telephony/ParsedPhoneNumber\" target=\"_blank\">ParsedPhoneNumber</a></span> class uses the passed-in country ISO setting to return an E.164 representation of a parsed number.</li>\n</ul></ul>\n\n  \n<h3><span style=\"font-size: large;\">MediaRouter Network Privacy improvements</span></h3>\n\n<p>To support casting to devices over new mediums like Bluetooth and UWB, the MediaRouter framework is evolving. Your app can now cast to a wider array of devices, including in-car displays and gym equipment, while contributing to a more privacy-preserving discovery model.</p>\n\n<p>The recommended approach is to use the <b>system Output Switcher</b>, which handles discovery over sensitive mediums without requiring your app to hold extra permissions. If your app uses a custom in-app picker and you want to discover devices over these new mediums, you will need to request permissions from the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/Manifest.permission_group#NEARBY_DEVICES\" target=\"_blank\">NEARBY_DEVICES</a></span> permission group (e.g., <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/Manifest.permission#BLUETOOTH_SCAN\" target=\"_blank\">BLUETOOTH_SCAN</a></span>). New <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/media/MediaRoute2Info.Builder\" target=\"_blank\">MediaRoute2Info.Builder</a></span> methods are available for route providers to <a href=\"https://developer.android.com/reference/android/media/MediaRoute2Info.Builder#setRequiredPermissions%28java.util.Set%3Cjava.lang.String%3E%29\" target=\"_blank\">declare required permissions</a>.</p>\n\n<h2><span style=\"font-size: x-large;\">Privacy and Security</span></h2>\n\n<p>This release continues to enhance user privacy and device security with new features for locking devices and managing sensitive data.</p>\n\n<h3><span style=\"font-size: large;\">Secure Lock Device</span></h3>\n\n<p>A new system-level security state, Secure Lock Device, is being introduced. When enabled (e.g., remotely via \"Find My Device\"), the device locks immediately and requires the primary PIN, pattern, or password to unlock, heightening security. When active, notifications and quick affordances on the lock screen will be hidden, and biometric unlock may be temporarily disabled.</p>\n\n<h3><span style=\"font-size: large;\">Phone Theft Protection toggle</span></h3>\n\n<p>A user-facing toggle is being added to Theft Protection Settings, allowing users to enable or disable the \"Failed Authentication Lock\" security feature (introduced in Android 15) that automatically locks down your device after multiple failed login attempts.</p>\n\n<h3><span style=\"font-size: large;\">Additional Security updates</span></h3>\n<ul><ul> \n<li><b>Biometric fallback Options:</b> <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder\" target=\"_blank\">BiometricPrompt.Builder</a></span> can now add fallback authentication options (e.g., using a password or QR code) with <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder#addFallbackOption(java.lang.CharSequence,%20int,%20java.util.concurrent.Executor,%20android.content.DialogInterface.OnClickListener)\" target=\"_blank\">addFallbackOption()</a></span>.</li></ul><ul>\n<li><b>Keyinfo Improvement:</b> The <span style=\"color: #0d904f ; font-family: courier;\">KeyInfo</span> class now provides a method <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/security/keystore/KeyInfo#isUnlockedDeviceRequired()\" target=\"_blank\">isUnlockedDeviceRequired()</a></span> which checks whether the key can be used only when the device is unlocked.</li>\n</ul></ul>\n\n<h2><span style=\"font-size: x-large;\">Developer productivity</span></h2>\n\n<p>New features and APIs are available to streamline debugging, testing, and profiling.</p>\n\n<h3><span style=\"font-size: large;\">Widget engagement metrics</span></h3>\n\n<p>New AppWidgetManager APIs allow you to query for user interaction events with your widgets within a given time range, including clicks, scrolls, and impressions, providing data you can use to help you improve your widget's design.</p>\n\n<h3><span style=\"font-size: large;\">Early warnings for 16KB page size compatibility</span></h3>\n\n<p>To help you prepare for the future requirement that all apps are 16 KB page-aligned, Android will now show alignment warnings on 4 KB production devices for debuggable apps installed via ADB. If your app is not 16 KB-aligned, a dialog will appear at launch, listing the specific native libraries that need to be fixed — allowing you to address them ahead of the Play Store deadline.</p>\n\n<div style=\"text-align: center;\"><img alt=\"Android 16 program timeline highlighting beta releases in August\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEheWDkshcr50gqr54wnu93YNq6eoBhNVUV1hbEcPrSqchmNT6j8i4icLICKa_x38U0ErpQ8irMym6_ksJH4LPpDLdOUVUuqmOkLJb3u7_jJEzWfLuOXgiAhVgCq3_vKheLL2tNrPXvJFT7Ra_Vx-2KAsYcnm6NK3LR5Kzaaz5K2sQscsjg4rk-trQejpf4/s1600/android-16-early-warning-16-kb-page-size-compatibility.png\" width=\"45%\" /></div>\n\n<h3><span style=\"font-size: large;\">Enhanced profiling with new system triggers</span></h3>\n\n<p>The <span style=\"color: #0d904f; font-family: courier;\">ProfilingManager</span> has added support for new system-initiated profiling triggers, including when your app is killed by the user from the Recents screen, Force Stop, or the task manager. You can also now request the currently running background system trace using <span style=\"color: #0d904f; font-family: courier;\">ProfilingManager.requestRunningSystemTrace()</span>, allowing you to capture profiling that has occurred before the request takes place.  Note that the background trace runs intermittently and will not be available all the time.</p>\n  \n<h3><span style=\"font-size: large;\">Debug printing with a new developer toggle</span></h3>\n\n<p>A new \"Verbose print logging\" toggle is now available in Developer Options. When enabled, the Android Print Framework and associated services will output additional debug information to logcat, which can help you troubleshoot printing-related issues in your apps.</p>\n\n<h3><span style=\"font-size: large;\">More robust testing for desktop and multi-display experiences</span></h3>\n\n<p>To facilitate more robust testing of your apps on connected displays, new public APIs are available in <span style=\"color: #0d904f; font-family: courier;\">UiAutomation</span> to programmatically capture screenshots on non-default displays. Additionally, the <span style=\"color: #0d904f; font-family: courier;\">AccessibilityWindowInfo.refresh()</span> method is now public, allowing accessibility services to ensure they are working with the most up-to-date window information.</p>\n\n<p>You can integrate these new UiAutomation capabilities into your test suites to expand coverage for your app's desktop mode or external monitor use cases. For accessibility service developers, calling <span style=\"color: #0d904f; font-family: courier;\">refresh()</span> can improve the reliability of your service.</p>\n\n<ul><ul>\n<li><b>API for Backported Fixes:</b> Android 16 QPR2 contains support for the upcoming <span style=\"color: #0d904f; font-family: courier;\">androidx.core:core-backported-fixes</span> library, which will allow your app to programmatically query if a specific critical bug has been fixed on a device, enabling you to roll out features that depend on the fix much faster, without waiting for an OS release.</li></ul><ul> \n<li><b>GUI Apps in Linux Terminal:</b> The Linux terminal feature is being expanded to support running <b>Linux GUI applications</b> directly within the terminal environment virtual machine.</li></ul><ul>\n<li><b>RootView Changed Listener:</b> The <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/view/inspector/WindowInspector\" target=\"_blank\">WindowInspector</a></span> class now includes <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/view/inspector/WindowInspector#addGlobalWindowViewsListener%28java.util.concurrent.Executor,%20java.util.function.Consumer%3Cjava.util.List%3Candroid.view.View%3E%3E%29\" target=\"_blank\">addGlobalWindowViewsListener()</a></span>, which allows your app or testing framework to be notified in real-time when root views (like Toasts) are added or removed, improving telemetry and test efficiency.</li>\n</ul></ul>\n  \n<h2><span style=\"font-size: x-large;\">Program timeline</span></h2>\n<p>The Android 16 QPR2 beta program runs from August 2025 until the final public release in Q4. At key development milestones, we'll deliver updates for your development and testing environments. Each update includes SDK tools, system images, emulators, API reference, and API diffs. We'll highlight new APIs and features for you to try out as they are ready to test in blogs and on the <a href=\"https://developer.android.com/about/versions/16/qpr2\" target=\"_blank\">Android 16 developer website</a>.</p>\n\n<div style=\"text-align: center;\"><img alt=\"Android 16 program timeline highlighting beta releases in August\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiuq0VtnTwnvgYH1oxXwGz9GcYYTmVYY0xx71Pjy3GuFc6J3q_wKadB4pM4wS2psLNuef8iBkjYMO_QFpXVYoJDsoyaktMuBWV7vF4HlBBVdE87ejZjO9ukK_Gb86EJiSTCqZQdtOi1XF0Ro3TgxtmptD0rSeVaGB5K7LMQbP0f4a4W9oRDPCMIaQStdt0/s1600/android-16-program-timeline-beta-releases.png\" width=\"100%\" /></div>\n\n<p>We’re targeting October of 2025 for our Platform Stability milestone. At this milestone, we’ll deliver final SDK/NDK APIs. From that time you’ll have several months before the final release to complete any integrations. Check out the <a href=\"https://developer.android.com/about/versions/16/qpr2/overview#timeline\" target=\"_blank\">release timeline details</a> for milestones and updates.</p>\n\n\n<h1>Get started with the Android 16 QPR2 beta</h1>\n\n<p>You can <a href=\"https://www.google.com/android/beta\" target=\"_blank\">enroll any supported Pixel device</a> to get this and future Android Beta updates over-the-air. If you don’t have a Pixel device, you can <a href=\"https://developer.android.com/about/versions/16/qpr2/get#on_emulator\" target=\"_blank\">use the 64-bit system images with the Android Emulator</a> in Android Studio.  If you are already in the Android Beta program, you will be offered an over-the-air update to Beta 1. We’ll update the <a href=\"https://developer.android.com/about/versions/16/qpr2/download\" target=\"_blank\">system images</a> and SDK regularly throughout the Android 16 QPR2 release cycle.</p>\n\n<p><b>If you are in the Canary program and would like to enter the Beta program, you will need to wipe your device and manually flash it to the beta release.</b></p>\n\n<p>For the best development experience with Android 16 QPR2, we recommend that you use the latest Canary of the feature drop of <a href=\"https://developer.android.com/studio/preview\" target=\"_blank\">Android Studio (Narwhal)</a>.</p>\n\n<p>We're looking for your feedback so please <a href=\"https://developer.android.com/about/versions/16/qpr2/feedback\" target=\"_blank\">report issues and submit feature requests</a> on the <a href=\"https://developer.android.com/about/versions/16/qpr2/feedback\" target=\"_blank\">feedback page</a>. The earlier we get your feedback, the more we can include in our work on the final release.</p>\n\n<p>Thank you for helping to shape the future of the Android platform.</p>",
    "published": "2025-08-20T11:28:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Accelerating development with monthly releases for Android Studio - releasing 2X more often than before",
    "link": "https://android-developers.googleblog.com/2025/08/accelerating-development-with-monthly-releases-android-studio-2x-more-than-before.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisQw6egXaAVjWSqqVQLLh0WvsD5QR5EXayNB3pkXzzsG-gxdGpqZKwzEqhqAGDAGkx0e4q0tEfwLW3fh_qiD2RzM3EjykjormzP19QR8ZFDtn4p9g-KrtkLQRPo3e0kFlqdwfLXmjOifLHlvvmzL3r2ezBDCCOoFW8q5nEj95ZpI4tBFw_P4hgrwcmqmI/s1600/AndroidStudio%201%20-%20Metadata.png\" style=\"display: none;\" />\n\n<em>Posted by Xavier Ducrohet – Tech Lead, Android Studio and Adarsh Fernando – Group Product Manager, Android Studio</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiTBGbwvybbv7EUtmhFZmUbHwEKnxfweKll9-p_4okWG6IyCZ5PuAb3umszZ4ogZdTIVz1Q4C8OmdVZhVxgTTRchur4LTl5YQrDFoKEElULo_fWVJH82dgmr4OTi77-TnvPh2OEFVBcOhIoriZwXuBEl-D8815d8Yws-2edWXhz9Cy9UxI3QHmsDAKD-lI/s1600/AndroidStudio%201.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiTBGbwvybbv7EUtmhFZmUbHwEKnxfweKll9-p_4okWG6IyCZ5PuAb3umszZ4ogZdTIVz1Q4C8OmdVZhVxgTTRchur4LTl5YQrDFoKEElULo_fWVJH82dgmr4OTi77-TnvPh2OEFVBcOhIoriZwXuBEl-D8815d8Yws-2edWXhz9Cy9UxI3QHmsDAKD-lI/s1600/AndroidStudio%201.png\" /></a>\n\n<p>Last year, we doubled our release frequency for Android Studio with the introduction of Feature Drops, a change designed to bring you new features and improvements more quickly. Today, we're excited to announce the next evolution in our release schedule: we're moving to <b>monthly stable releases</b> of Android Studio.</p>\n\n\n<p>This new cadence means you’ll be able to get your hands on the latest features and critical improvements, faster than ever before. Here's what you can expect: every few months, we’ll introduce a version that contains the latest IntelliJ platform version, such as Android Studio Narwhal based on IntelliJ 2025.1. You’ll then see Feature Drops each month that include important bug fixes and new functionality you’ll want to try out, until it’s time to release Android Studio with the next platform version of IntelliJ.</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"Android Studio Narwhal release cadence 2025\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhQf64bFiRoMUAklE-IQcmWV6vta1JarLjyvIMZjwBO6lVGkVIwm4gvCm3fY44Gf5rQ7kCDquojCiWMzDdyXHAnT4MEquNT24n_eEI5f13yNQSXtQVaJ8BKuiS0wI_SLaSdICqPTqqWzzdgsoJReLwie2JKseFfFbuD7Bwll97_DoZpitrrpkROPUs0hjA/s16000/android-studio-narwhal-release-timeline-2025.png\" /></div>\n\n\n<p>You’ve actually already experienced this new release cadence with Android Studio Narwhal! In the last Feature Drop release we were able to take features such as Agent Mode from Canary to the Stable channel faster than ever before, making it possible for you to try out new features, faster!</p>\n\n<h2><span style=\"font-size: x-large;\">Why Monthly Releases?</span></h2>\n\n<p>You told us waiting for the next major release to get a critical bug fix or a quality-of-life improvement can be frustrating. With the move to monthly releases, we can deliver these updates to you without the long delays. This means you'll have access to the features you want and the fixes you need, right when you need them.\nIt's important to note that the Android Emulator and the Android Gradle Plugin will continue to be updated separately from Android Studio at a pace of every two months. And, as always, you don't need to update these components to download and use the latest stable version of the IDE each month.</p>\n\n<h2><span style=\"font-size: x-large;\">Our Commitment to Quality</span></h2>\n\n<p>A faster release cadence doesn't mean a compromise on quality. In fact, our ability to release more frequently is a direct result of our long-term investment in our testing infrastructure. This effort began with <a href=\"https://android-developers.googleblog.com/2019/08/android-studio-35-project-marble-goes.html\" target=\"_blank\">Project Marble</a>, a concerted effort to improve the quality and testing of Android Studio. Since then, we've been continuously improving and tooling our testing strategy to be more reliable, and to get feedback from those tests faster. Last year, we reached a point where we could confidently double our releases, and now, we're ready to take the next step with monthly updates. This means you’ll see releases 2X more often than before!</p>\n  \n<p>We're also continuing to provide early access to stable-ready releases. Previously, we’ve provided these opportunities first through Beta releases. With our investments in detecting and addressing issues earlier, we’re able to take a release from Canary directly into our Release Candidate (RC) channel with a stable-ready level of quality and polish. This gives you a chance to try out the latest features and improvements before they're released to the stable channel and to provide us with valuable feedback.</p>\n\n<h2><span style=\"font-size: x-large;\">Update Monthly and Help Us Improve</span></h2>\n\n<p>We encourage you to update to the latest stable version of Android Studio each month to take advantage of the latest features and improvements. Your feedback is essential to helping us make Android Studio the best it can be.</p>\n\n<p>Here's how you can get involved:</p>\n<ul><ul>\n<li><b><a href=\"http://d.android.com/studio/preview\" target=\"_blank\">Download Android Studio Narwhal 3 Feature Drop</a>:</b> It’s currently available in the Canary channel and is the best way to get early access to new features and to provide us with feedback before a release is finalized. If you want a more stable build, download this version as soon as the Release Candidate becomes available.</li></ul><ul>\n  \n<li><b>Report a bug:</b> If you encounter an issue, please let us know by <a href=\"https://developer.android.com/studio/report-bugs\" target=\"_blank\">reporting a bug</a>. This helps us to identify and fix issues more quickly.</li>\n</ul></ul>\n\n<p>We're excited about this new chapter for Android Studio and we're confident that it will help you to build better apps, faster. As always, you can be part of our vibrant Android developer community on <a href=\"https://www.linkedin.com/showcase/androiddev/posts/?feedView=all\" target=\"_blank\">LinkedIn</a>, <a href=\"https://medium.com/androiddevelopers\" target=\"_blank\">Medium</a>, <a href=\"https://www.youtube.com/c/AndroidDevelopers/videos\" target=\"_blank\">YouTube</a>, or <a href=\"https://twitter.com/androidstudio\" target=\"_blank\">X</a>.</p>",
    "published": "2025-08-14T10:01:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Test on a fleet of physical devices with Android Device Streaming, now with Android Partner Device Labs",
    "link": "https://android-developers.googleblog.com/2025/08/test-with-android-device-streaming-now-with-android-partner-device-labs.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj_v28NauqVewHhLLxJHBft7KlyM4LusrURF3-lIvajbswFQ2Y6b1Z-ryreZf3rgazf8p0vYNfTCJIXrkOnpAJV4TvVh9tJQ49Aa4zj9LfAmMZV96kfx89Pe69DbqgL3JsJQjS88qkr48oh6Laf8xGFXhbhvEs8OaNYEztnEgVqWRseAEknRE3Xp97k2vs/s1600/mobile-app-development.png\" style=\"display: none;\" />\n\n<em>Posted by Adarsh Fernando – Group Product Manager, Android Studio, and Grant Yang – Sr. Product Manager, Omnilab</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimQUH6AvW4dMk5JHhq997mvi_Btm6MgsvFaIMblhyphenhyphenPodN-QiWKjOSkgiItjXRG6ggo4sk1aP1wIsjw9Rd17MXwALWu4rcVEImVFV123_Okr1DNqS1L9do8F3A7V1Sgnu9uKEpp1ool1sSvvR_GUftOLqf_QDZfqt0ncVl_V9O8_bnTQBwLtXi6l2vo7vo/s1600/mobile-app-development-banner.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimQUH6AvW4dMk5JHhq997mvi_Btm6MgsvFaIMblhyphenhyphenPodN-QiWKjOSkgiItjXRG6ggo4sk1aP1wIsjw9Rd17MXwALWu4rcVEImVFV123_Okr1DNqS1L9do8F3A7V1Sgnu9uKEpp1ool1sSvvR_GUftOLqf_QDZfqt0ncVl_V9O8_bnTQBwLtXi6l2vo7vo/s1600/mobile-app-development-banner.png\" /></a>\n\n\n<p>Today, we're excited to give you an update on <a href=\"https://developer.android.com/studio/run/android-device-streaming\" target=\"_blank\">Android Device Streaming</a> and announce that <b>Android Partner Device Labs are now stable</b> and available in the latest stable release of <a href=\"https://developer.android.com/studio/releases#partner-device-labs\" target=\"_blank\">Android Studio Narwhal Feature Drop</a>!</p>\n\n<div style=\"text-align: center;\"><img alt=\"moving image of Android Device Streaming functionality in Android Studio Narwhal Feature Drop\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg-dcTiEXAKN0VXoa6hYAeJCuqYPv96msWxCdfysOBMecLlTPcIkcszANUVGDhCM-NJlJEceLtKwmVcwBxD08e1qeMUw0XPo-xBN825uf5XVMML5l2IYvmL5aPTQF3OLR9CJ_e1IJtbhUU1H4tAucwKpMmMJMwJ2Uk-t9nY9e8iqYG_WHgQMmPr3td3_0I/s16000/ads-animation.gif\" /></div>\n\n<h2><span style=\"font-size: x-large;\">Streamline your testing with Android Device Streaming</span></h2>\n\n<p><a href=\"https://developer.android.com/studio/run/android-device-streaming\" target=\"_blank\">Android Device Streaming, powered by Firebase</a>, allows you to securely connect to remote physical Android devices hosted in Google's secure data centers. This means you can test your app on a wide variety of devices and Android versions without leaving Android Studio, or having to purchase every device you want to test. This helps you:</p>\n<ul><ul>\n<li><b>Test on the latest hardware:</b> Get your hands on the newest devices, including those not yet available to the public.</li></ul><ul>\n<li><b>Cover a wide range of devices:</b> Test on various form factors, from phones to foldables, from a multitude of manufacturers.</li></ul><ul>\n<li><b>Improve developer productivity:</b> Save time and resources by testing on real devices directly from your development environment.</li>\n</ul></ul>\n\n<p>At Google I/O 2025 earlier this year, we announced that Android Device Streaming graduated to stable. With that, we added the latest Google Pixel devices to the catalog, including the <b>Pixel 9, Pixel 9 Pro, Pixel 9 Pro XL, and Pixel 9 Pro Fold</b>. We are also working to add the upcoming <b>Pixel 10 devices</b> to the catalog soon.</p>\n\n\n<p>We also announced that we are partnering with leading OEMs to bring you an even greater selection of devices through Android Partner Device Labs. And best of all, with our monthly quota of minutes, you can <b>start testing Android Device Streaming with a wide range of devices at no cost</b>. Usage beyond the monthly quota of minutes may incur a charge, as described on the <a href=\"https://firebase.google.com/docs/test-lab/usage-quotas-pricing#device-streaming\" target=\"_blank\">Firebase pricing page</a>.</p>\n\n\n<h2><span style=\"font-size: x-large;\">Introducing Android Partner Device Labs</span></h2>\n\n<p><b>Android Partner Device Labs are now stable</b> and available in <a href=\"http://d.android.com/studio\" target=\"_blank\">Android Studio Narwhal Feature Drop</a>. Android Partner Device Labs give you access to a fleet of physical devices from our OEM partners, including <b>Samsung, Xiaomi, OPPO, OnePlus, vivo, and more</b>. This gives you the ability to test your apps on the specific devices your users have, ensuring a better user experience for everyone.</p>\n\n<p>Here are some of the devices available today through our partners:</p>\n\n<div style=\"text-align: center;\"><img alt=\"Android Partner Device Labs featuring a fleet of physical devices from our OEM partners, including OPPO, OnePlus, Samsung, Xiaomi, and vivo, in Android Studio Narwhal Feature Drop\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh46ATrMk1EDSHWF13oV89CNbhCUS38kGsWhic8SjWigPTlkRag1wvRXxvZnPhnTPnDrucdLD11ReZQJguNvCP2XlFxS_s909EIJpQ0pODwWtLKTC3ORDZZbTqB0Lv6QnenCzmnODvmCc8F9JcKEFEnKMWSbNX6XTXpPe8OUzzMNxBN2PeNqmEBXmRGeto/s1600/android-partner-device-labs-featuring-OEM-partners.png\" /></div>\n\n<h2><span style=\"font-size: x-large;\">Get started with partner devices</span></h2>\n\n<p>To start using devices from Android Partner Device Labs, follow these steps in Android Studio:</p>\n<ol>\n<li>Open the <b>Device Manager</b> by navigating to <b>View &gt; Tool Windows &gt; Device Manager</b>.</li>\n<li>Click on the <b>Firebase</b> icon and log in to your Google Developer account.</li>\n<li>Select a Firebase project with billing enabled.</li>\n<li>You will now see the list of available devices, including those from our partners.</li>\n</ol>\n\n  \n<p>For team development, a Firebase project administrator (Owner or Editor) will need to enable access to each OEM's lab of devices. To do so, the admin should go to the <a href=\"https://console.cloud.google.com/omnilab/partner-lab\" target=\"_blank\">Google Cloud project page</a>, ensure the correct project is selected, and then enable the desired device lab by using the toggle and following the on-screen prompts. Once enabled, the entire team will have access to those devices in Android Studio.</p>\n  \n<h2><span style=\"font-size: x-large;\">Android Device Streaming Pricing</span></h2>\n  \n<p>You can learn more about Android Device Streaming quota and pricing on the <a href=\"https://firebase.google.com/docs/test-lab/usage-quotas-pricing#device-streaming\" target=\"_blank\">Firebase pricing page</a>. Devices in the Android Partner Device Labs are available at the same pricing and with the same monthly quota of minutes at no cost as all other devices in the Android Device Streaming catalog (unless otherwise specified).</p>\n  \n<h2><span style=\"font-size: x-large;\">Wrapping it up</span></h2>\n  \n<p>Android Device Streaming, now with the addition of Android Partner Device Labs, gives you an unparalleled selection of physical devices to test your apps. With a growing catalog of devices from Google and our OEM device partners, you can ensure your app works flawlessly for all your users.</p>\n  \n<p>We invite you to download <a href=\"http://d.android.com/studio\" target=\"_blank\">the latest stable release of Android Studio</a> and try out Android Device Streaming and the new Android Partner Device Labs. With our generous monthly quota, you can start testing on a wide range of devices at no cost. We are constantly updating the device catalog, so be sure to check back often for new additions.</p>\n  \n<p>Happy streaming!</p>",
    "published": "2025-08-14T10:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "What’s new in the Jetpack Compose August ’25 release",
    "link": "https://android-developers.googleblog.com/2025/08/whats-new-in-jetpack-compose-august-25-release.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgRQ1jqjKgegNQIov75-nK2IxHnoFNyHqFQK__P5EeK3NR8UX-Ninf_dPE_2Qm_JKzjrosNN5tW-4HFqerJIqCakaZ0bxy3MJbUH695NiLb_D1viAoxmuOcVU1C6bn3hc008BR1ZMAp_i63EZSMy7UcqlFh5TJo-ANYKcJBTN4mE_yG3GZut0OW2eUCPnc/s1600/Jetpack%20Compose%201%20-%20Metadata.png\" style=\"display: none;\" />\n\n<em>Posted by Meghan Mehta – Developer Relations Engineer and Nick Butcher – Product Manager</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjydwozpgYhFJnWocHWrgtMq5MS5_mKL6ieqbl3eDhsPFhrz5wv8jNxwxQ9Vfw3KW956caLKtrXeO7k4b2JTczwfNx3BNZrg1KsPCtt3Ti2GdR8CMGemYoYTDBHj3obpIcs3fE4UNWJX8A3KSofYw0dNAgRjquxwnQdOB21XE9nlANzmijSKHkW0w9k72w/s1600/Jetpack%20Compose%201.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjydwozpgYhFJnWocHWrgtMq5MS5_mKL6ieqbl3eDhsPFhrz5wv8jNxwxQ9Vfw3KW956caLKtrXeO7k4b2JTczwfNx3BNZrg1KsPCtt3Ti2GdR8CMGemYoYTDBHj3obpIcs3fE4UNWJX8A3KSofYw0dNAgRjquxwnQdOB21XE9nlANzmijSKHkW0w9k72w/s1600/Jetpack%20Compose%201.png\" /></a>\n\n<p>Today, the <a href=\"https://developer.android.com/jetpack/androidx/releases/compose\" target=\"_blank\">Jetpack Compose August ‘25 release</a> is stable. This release contains version 1.9 of core compose modules (see the full <a href=\"https://developer.android.com/develop/ui/compose/bom/bom-mapping\" target=\"_blank\">BOM mapping</a>), introducing new APIs for rendering shadows, 2D scrolling, rich styling of text transformations, improved list performance, and more!</p>\n\n<p>To use today’s release, upgrade your <a href=\"https://developer.android.com/develop/ui/compose/bom\" target=\"_blank\">Compose BOM</a> version to 2025.08.00:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span>implementation(platform(<span style=\"color: #ba2121;\">\"androidx.compose:compose-bom:2025.08.00\"</span>))\n</pre></div>\n\n<h2><span style=\"font-size: x-large;\">Shadows</span></h2>\n\n<p>We're happy to introduce two highly requested modifiers: <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier#%28androidx.compose.ui.Modifier%29.dropShadow%28androidx.compose.ui.graphics.Shape,kotlin.Function1%29\" target=\"_blank\">Modifier.dropShadow()</a></span> and <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier#%28androidx.compose.ui.Modifier%29.innerShadow%28androidx.compose.ui.graphics.Shape,kotlin.Function1%29\" target=\"_blank\">Modifier.innerShadow()</a></span> allowing you to render box-shadow effects (compared to the existing <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier#%28androidx.compose.ui.Modifier%29.shadow%28androidx.compose.ui.unit.Dp,androidx.compose.ui.graphics.Shape,kotlin.Boolean,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color%29\" target=\"_blank\">Modifier.shadow()</a></span> which renders elevation based shadows based on a lighting model).</p>\n\n<h3><span style=\"font-family: courier; font-size: large;\">Modifier.dropShadow()</span></h3>\n\n<p>The <span style=\"color: #0d904f; font-family: courier;\">dropShadow()</span> modifier draws a shadow behind your content. You can add it to your composable chain and specify the radius, color, and spread. Remember, content that should appear on top of the shadow (like a background) should be drawn <i><a href=\"https://developer.android.com/develop/ui/compose/modifiers#order-modifier-matters\" target=\"_blank\">after</a></i> the <span style=\"color: #0d904f; font-family: courier;\">dropShadow()</span> modifier.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #aa22ff;\">@Composable</span>\n<span style=\"color: #aa22ff;\">@Preview</span>(showBackground<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">true</span>)\n<span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">SimpleDropShadowUsage</span>()<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">pinkColor</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Color(<span style=\"color: #666666;\">0</span>xFFe91e63)\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">purpleColor</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Color(<span style=\"color: #666666;\">0</span>xFF9c27b0)\n<span style=\"color: #bbbbbb;\">    </span>Box(Modifier.<span style=\"color: #687822;\">fillMaxSize</span>())<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span>Box(\n<span style=\"color: #bbbbbb;\">            </span>Modifier\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">size</span>(<span style=\"color: #666666;\">200.</span>dp)\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">align</span>(Alignment.<span style=\"color: #687822;\">Center</span>)\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">dropShadow</span>(\n<span style=\"color: #bbbbbb;\">                    </span>RoundedCornerShape(<span style=\"color: #666666;\">20.</span>dp),\n<span style=\"color: #bbbbbb;\">                    </span>dropShadow<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>DropShadow(\n<span style=\"color: #bbbbbb;\">                        </span><span style=\"color: #666666;\">15.</span>dp,\n<span style=\"color: #bbbbbb;\">                        </span>color<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>pinkColor,\n<span style=\"color: #bbbbbb;\">                        </span>spread<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">10.</span>dp,\n<span style=\"color: #bbbbbb;\">                        </span>alpha<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">0.5f</span>\n<span style=\"color: #bbbbbb;\">                    </span>)\n<span style=\"color: #bbbbbb;\">                </span>)\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">background</span>(\n<span style=\"color: #bbbbbb;\">                    </span>purpleColor,\n<span style=\"color: #bbbbbb;\">                    </span>shape<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>RoundedCornerShape(<span style=\"color: #666666;\">20.</span>dp)\n<span style=\"color: #bbbbbb;\">                </span>)\n<span style=\"color: #bbbbbb;\">        </span>)\n<span style=\"color: #bbbbbb;\">    </span>}\n}\n</pre></div>\n\n<div style=\"text-align: center;\"><img alt=\"drop shadow drawn all around shape\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhkx0O88QPkKmPmYP7DQioF7lLapqzNBTczqqHtzEc2VeDnQ8GRsri6-hU-O4OWMGfyQ9rMzz-S03NG30CXtXkJkh6Y-zkmtr1ZQsOYVWLC7AwC1ZWD73I93jvMRGZ0VP-5HlPbOU_S-77Aorc7RIqQbNZlBqKL4kvwa5hX8yVTYZHyCLBzMU85Yy3LKI4/s1600/drop-shadow-compose-1-9-release.png\" width=\"50%\" /></div><center><em><b>Figure 1.</b> Drop shadow drawn all around shape</em></center><br />\n\n<h3><span style=\"font-family: courier; font-size: large;\">Modifier.innerShadow()</span></h3>\n\n<p>The <span style=\"color: #0d904f; font-family: courier;\">Modifier.innerShadow()</span> draws shadows on the inset of the provided shape:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #aa22ff;\">@Composable</span>\n<span style=\"color: #aa22ff;\">@Preview</span>(showBackground<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">true</span>)\n<span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">SimpleInnerShadowUsage</span>()<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">pinkColor</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Color(<span style=\"color: #666666;\">0</span>xFFe91e63)\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">purpleColor</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Color(<span style=\"color: #666666;\">0</span>xFF9c27b0)\n<span style=\"color: #bbbbbb;\">    </span>Box(Modifier.<span style=\"color: #687822;\">fillMaxSize</span>())<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span>Box(\n<span style=\"color: #bbbbbb;\">            </span>Modifier\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">size</span>(<span style=\"color: #666666;\">200.</span>dp)\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">align</span>(Alignment.<span style=\"color: #687822;\">Center</span>)\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">background</span>(\n<span style=\"color: #bbbbbb;\">                    </span>purpleColor,\n<span style=\"color: #bbbbbb;\">                    </span>shape<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>RoundedCornerShape(<span style=\"color: #666666;\">20.</span>dp)\n<span style=\"color: #bbbbbb;\">                </span>)\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">innerShadow</span>(\n<span style=\"color: #bbbbbb;\">                    </span>RoundedCornerShape(<span style=\"color: #666666;\">20.</span>dp),\n<span style=\"color: #bbbbbb;\">                    </span>innerShadow<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>InnerShadow(\n<span style=\"color: #bbbbbb;\">                        </span><span style=\"color: #666666;\">15.</span>dp,\n<span style=\"color: #bbbbbb;\">                        </span>color<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Color.<span style=\"color: #687822;\">Black</span>,\n<span style=\"color: #bbbbbb;\">                        </span>spread<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">10.</span>dp,\n<span style=\"color: #bbbbbb;\">                        </span>alpha<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">0.5f</span>\n<span style=\"color: #bbbbbb;\">                    </span>)\n<span style=\"color: #bbbbbb;\">                </span>)\n<span style=\"color: #bbbbbb;\">        </span>)\n<span style=\"color: #bbbbbb;\">    </span>}\n}\n</pre></div>\n\n<div style=\"text-align: center;\"><img alt=\"modifier.innerShadow() applied to a shape\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhP-0J86CPxEGq41sFEpALbcJxPSAtQHaY-j7GT10vx8ig6U6yLtxgzfrO-FXwIcrJPRlWVN9hHwvREL62yWf6tUN8-UH4XU4b-5TFKG_hkTJcZPaxgJRXYa8z-03jePXgm0ebRgL7ugMAlFZhIfs0gaRXhU1E2J6Zvp3hx1s80Bns19KGQWr76dtWmdUA/s1600/modifier-innershadow-applied-to-shape-compose-1-9-release.png\" width=\"50%\" /></div><center><em><b>Figure 2.</b> <span style=\"color: #0d904f; font-family: courier;\">Modifier.innerShadow()</span> applied to a shape</em></center><br />\n\n<p>The order for inner shadows is very important. The inner shadow draws on top of the content, so for the example above, we needed to move the inner shadow modifier after the background modifier. We’d need to do something similar when using it on top of something like an <span style=\"color: #0d904f; font-family: courier;\">Image</span>. In this example, we’ve placed a separate <span style=\"color: #0d904f; font-family: courier;\">Box</span> to render the shadow in the layer above the image:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #aa22ff;\">@Composable</span>\n<span style=\"color: #aa22ff;\">@Preview</span>(showBackground<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">true</span>)\n<span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">PhotoInnerShadowExample</span>()<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span>Box(Modifier.<span style=\"color: #687822;\">fillMaxSize</span>())<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">shape</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>RoundedCornerShape(<span style=\"color: #666666;\">20.</span>dp)\n<span style=\"color: #bbbbbb;\">        </span>Box(\n<span style=\"color: #bbbbbb;\">            </span>Modifier\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">size</span>(<span style=\"color: #666666;\">200.</span>dp)\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">align</span>(Alignment.<span style=\"color: #687822;\">Center</span>)\n<span style=\"color: #bbbbbb;\">        </span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">            </span>Image(\n<span style=\"color: #bbbbbb;\">                </span>painter<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>painterResource(id<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>R.<span style=\"color: #687822;\">drawable</span>.<span style=\"color: #687822;\">cape_town</span>),\n<span style=\"color: #bbbbbb;\">                </span>contentDescription<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #ba2121;\">\"Image with Inner Shadow\"</span>,\n<span style=\"color: #bbbbbb;\">                </span>contentScale<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>ContentScale.<span style=\"color: #687822;\">Crop</span>,\n<span style=\"color: #bbbbbb;\">                </span>modifier<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Modifier.<span style=\"color: #687822;\">fillMaxSize</span>()\n<span style=\"color: #bbbbbb;\">                    </span>.<span style=\"color: #687822;\">clip</span>(shape)\n<span style=\"color: #bbbbbb;\">            </span>)\n<span style=\"color: #bbbbbb;\">            </span>Box(\n<span style=\"color: #bbbbbb;\">                </span>modifier<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Modifier.<span style=\"color: #687822;\">fillMaxSize</span>()\n<span style=\"color: #bbbbbb;\">                    </span>.<span style=\"color: #687822;\">innerShadow</span>(\n<span style=\"color: #bbbbbb;\">                        </span>shape,\n<span style=\"color: #bbbbbb;\">                        </span>innerShadow<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>InnerShadow(<span style=\"color: #666666;\">15.</span>dp,\n<span style=\"color: #bbbbbb;\">                            </span>spread<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">15.</span>dp)\n<span style=\"color: #bbbbbb;\">                    </span>)\n<span style=\"color: #bbbbbb;\">            </span>)\n<span style=\"color: #bbbbbb;\">        </span>}\n<span style=\"color: #bbbbbb;\">    </span>}\n}\n</pre></div>\n\n<div style=\"text-align: center;\"><img alt=\"Inner shadow on top of an image\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEginsTdhyaUmfOAc3xxHg7b2inaQx8WChTxUQGdFLsU4J8aZuWBlqCudumE4092OxYJyoMOKQ7mUMMHae9pHPvi3caLZ-LYHfAGqfuww8Dgl2MK3_mPmHQmuX2iyW35-aVpQZB5FZiv60Np9rGa2r1vqvaTHvhTRGilg6JMzpdfeYvJgHgqQPR5c9NWAWA/s1600/inner-shadow-on-top-image-compose-1-9-release.png\" width=\"50%\" /></div><center><em><b>Figure 3.</b>Inner shadow on top of an image</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">New Visibility modifiers</span></h2>\n\n<p>Compose UI 1.8 introduced <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier#%28androidx.compose.ui.Modifier%29.onLayoutRectChanged%28kotlin.Long,kotlin.Long,kotlin.Function1%29\" target=\"_blank\">onLayoutRectChanged</a></span>, a new performant way to track the location of elements on screen. We're building on top of this API to support common use cases by introducing <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier#%28androidx.compose.ui.Modifier%29.onVisibilityChanged%28kotlin.Long,kotlin.Float,androidx.compose.ui.layout.LayoutBoundsHolder,kotlin.Function1%29\" target=\"_blank\">onVisibilityChanged</a></span> and <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier#%28androidx.compose.ui.Modifier%29.onFirstVisible%28kotlin.Long,kotlin.Float,androidx.compose.ui.layout.LayoutBoundsHolder,kotlin.Function0%29\" target=\"_blank\">onFirstVisible</a></span>.  These APIs accept optional parameters for the minimum fraction or amount of time the item has been visible for before invoking your action.</p>\n\n<p>Use <span style=\"color: #0d904f; font-family: courier;\">onVisibilityChanged</span> for UI changes or side effects that should happen based on visibility, like automatically playing and pausing videos or starting an animation:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span>LazyColumn<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">  </span>items(feedData)<span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span>video<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-&gt;</span>\n<span style=\"color: #bbbbbb;\">    </span>VideoRow(\n<span style=\"color: #bbbbbb;\">        </span>video,\n<span style=\"color: #bbbbbb;\">        </span>Modifier.<span style=\"color: #687822;\">onVisibilityChanged</span>(minDurationMs<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">500</span>,<span style=\"color: #bbbbbb;\"> </span>minFractionVisible<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">1f</span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">          </span>visible<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-&gt;</span>\n<span style=\"color: #bbbbbb;\">            </span><span style=\"color: green; font-weight: bold;\">if</span><span style=\"color: #bbbbbb;\"> </span>(visible)<span style=\"color: #bbbbbb;\"> </span>video.<span style=\"color: #687822;\">play</span>()<span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">else</span><span style=\"color: #bbbbbb;\"> </span>video.<span style=\"color: #687822;\">pause</span>()\n<span style=\"color: #bbbbbb;\">          </span>},\n<span style=\"color: #bbbbbb;\">    </span>)\n<span style=\"color: #bbbbbb;\">  </span>}\n}\n</pre></div>\n\n\n<p>Use <span style=\"color: #0d904f; font-family: courier;\">onFirstVisible</span> for use cases when you wish to react to an element first becoming visible on screen for example to log impressions:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span>LazyColumn<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span>items(<span style=\"color: #666666;\">100</span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span>Box(\n<span style=\"color: #bbbbbb;\">            </span>Modifier\n<span style=\"color: #bbbbbb;\">                </span><span style=\"color: #3d7b7b; font-style: italic;\">// Log impressions when item has been visible for 500ms</span>\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">onFirstVisible</span>(minDurationMs<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">500</span>)<span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #3d7b7b; font-style: italic;\">/* log impression */</span><span style=\"color: #bbbbbb;\"> </span>}\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">clip</span>(RoundedCornerShape(<span style=\"color: #666666;\">16.</span>dp))\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">drawBehind</span><span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span>drawRect(backgroundColor)<span style=\"color: #bbbbbb;\"> </span>}\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">fillMaxWidth</span>()\n<span style=\"color: #bbbbbb;\">                </span>.<span style=\"color: #687822;\">height</span>(<span style=\"color: #666666;\">100.</span>dp)\n<span style=\"color: #bbbbbb;\">        </span>)\n<span style=\"color: #bbbbbb;\">    </span>}\n}\n</pre></div>\n\n<h2><span style=\"font-size: x-large;\">Rich styling in <span style=\"font-family: courier;\">OutputTransformation</span></span></h2>\n\n<p><span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/text/package-summary#BasicTextField%28androidx.compose.foundation.text.input.TextFieldState,androidx.compose.ui.Modifier,kotlin.Boolean,kotlin.Boolean,androidx.compose.foundation.text.input.InputTransformation,androidx.compose.ui.text.TextStyle,androidx.compose.foundation.text.KeyboardOptions,androidx.compose.foundation.text.input.KeyboardActionHandler,androidx.compose.foundation.text.input.TextFieldLineLimits,kotlin.Function2,androidx.compose.foundation.interaction.MutableInteractionSource,androidx.compose.ui.graphics.Brush,androidx.compose.foundation.text.input.OutputTransformation,androidx.compose.foundation.text.input.TextFieldDecorator,androidx.compose.foundation.ScrollState%29\" target=\"_blank\">BasicTextField</a></span> now supports applying styles like color and font weight from within an <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/text/input/OutputTransformation\" target=\"_blank\">OutputTransformation</a></span>.</p>\n\n<p>The new <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/text/input/TextFieldBuffer?hl=en#public-functions_1\" target=\"_blank\">TextFieldBuffer.addStyle()</a></span> methods let you apply a <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/text/SpanStyle\" target=\"_blank\">SpanStyle</a></span> or <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/text/ParagraphStyle\" target=\"_blank\">ParagraphStyle</a></span> to change the appearance of text, without changing the underlying <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/text/input/TextFieldState\" target=\"_blank\">TextFieldState</a></span>. This is useful for visually formatting input, like phone numbers or credit cards. This method can only be called inside an <span style=\"color: #0d904f; font-family: courier;\">OutputTransformation</span>.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #3d7b7b; font-style: italic;\">// Format a phone number and color the punctuation</span>\n<span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">phoneTransformation</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>OutputTransformation<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// 1234567890 -&gt; (123) 456-7890</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">if</span><span style=\"color: #bbbbbb;\"> </span>(length<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">==</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">10</span>)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span>insert(<span style=\"color: #666666;\">0</span>,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #ba2121;\">\"(\"</span>)\n<span style=\"color: #bbbbbb;\">        </span>insert(<span style=\"color: #666666;\">4</span>,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #ba2121;\">\") \"</span>)\n<span style=\"color: #bbbbbb;\">        </span>insert(<span style=\"color: #666666;\">9</span>,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #ba2121;\">\"-\"</span>)\n\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #3d7b7b; font-style: italic;\">// Color the added punctuation</span>\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">gray</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Color(<span style=\"color: #666666;\">0</span>xFF666666)\n<span style=\"color: #bbbbbb;\">        </span>addStyle(SpanStyle(color<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>gray),<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">0</span>,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">1</span>)\n<span style=\"color: #bbbbbb;\">        </span>addStyle(SpanStyle(color<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>gray),<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">4</span>,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">5</span>)\n<span style=\"color: #bbbbbb;\">        </span>addStyle(SpanStyle(color<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>gray),<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">9</span>,<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">10</span>)\n<span style=\"color: #bbbbbb;\">    </span>}\n}\n\nBasicTextField(\n<span style=\"color: #bbbbbb;\">    </span>state<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>myTextFieldState,\n<span style=\"color: #bbbbbb;\">    </span>outputTransformation<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>phoneTransformation\n)\n</pre></div>\n\n<h2><span style=\"font-size: x-large;\">LazyLayout</span></h2>\n\n<p>The building blocks of <span style=\"color: #0d904f; font-family: courier;\">LazyLayout</span> are all now stable! Check out <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/layout/LazyLayoutMeasurePolicy\" target=\"_blank\">LazyLayoutMeasurePolicy</a></span>, <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/layout/LazyLayoutItemProvider\" target=\"_blank\">LazyLayoutItemProvider</a></span>, and <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/layout/LazyLayoutPrefetchState\" target=\"_blank\">LazyLayoutPrefetchState</a></span> to build your own Lazy components.</p>\n\n<h3><span style=\"font-size: large;\">Prefetch Improvements</span></h3>\n\n<p>There are now significant scroll performance improvements in <a href=\"https://developer.android.com/develop/ui/compose/lists#lazy\" target=\"_blank\">Lazy List</a> and <a href=\"https://developer.android.com/develop/ui/compose/lists#lazy-grids\" target=\"_blank\">Lazy Grid</a> with the introduction of new prefetch behavior. You can now define a <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/layout/LazyLayoutCacheWindow\" target=\"_blank\">LazyLayoutCacheWindow</a></span> to prefetch more content. By default, only one item is composed ahead of time in the direction of scrolling, and after something scrolls off screen it is discarded. You can now customize the amount of items ahead to prefetch and behind to retain through a fraction of the viewport or dp size. When you opt into using <span style=\"color: #0d904f; font-family: courier;\">LazyLayoutCacheWindow</span>, items begin prefetching in the ahead area straight away.</p> \n\n<p>The configuration entry point for this is on <span style=\"color: #0d904f; font-family: courier;\">LazyListState</span>, which takes in the cache window size:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: #aa22ff;\">@OptIn</span>(ExperimentalFoundationApi<span style=\"color: #666666;\">::</span>class)\n<span style=\"color: #aa22ff;\">@Composable</span>\n<span style=\"color: green; font-weight: bold;\">private</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">LazyColumnCacheWindowDemo</span>()<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// Prefetch items 150.dp ahead and retain items 100.dp behind the visible viewport</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">dpCacheWindow</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>LazyLayoutCacheWindow(ahead<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">150.</span>dp,<span style=\"color: #bbbbbb;\"> </span>behind<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">100.</span>dp)\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// Alternatively, prefetch/retain items as a fraction of the list size</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: #3d7b7b; font-style: italic;\">// val fractionCacheWindow = LazyLayoutCacheWindow(aheadFraction = 1f, behindFraction = 0.5f)</span>\n<span style=\"color: #bbbbbb;\">    </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">state</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>rememberLazyListState(cacheWindow<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>dpCacheWindow)\n<span style=\"color: #bbbbbb;\">    </span>LazyColumn(state<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>state)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span>items(<span style=\"color: #666666;\">1000</span>)<span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span>Text(text<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #ba2121;\">\"</span><span style=\"color: #a45a77; font-weight: bold;\">$</span>it<span style=\"color: #ba2121;\">\"</span>,<span style=\"color: #bbbbbb;\"> </span>fontSize<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">80.</span>sp)<span style=\"color: #bbbbbb;\"> </span>}\n<span style=\"color: #bbbbbb;\">    </span>}\n}\n</pre></div>\n\n\n<div style=\"text-align: center;\"><img alt=\"lazylayout in Compose 1.9 release\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjgy5OdlckeFcZuSlyCuCBHV_M2sFryP2Mn0YRz8sTfeFNf7PZxIrPRBBKT6kTdV9uWjizUh2Rz8na7bGZVJ1jb8QWRy9jQNzk1idIM3sxqUcjNm0tlOBGg_Fr1bo7DZ4-aeOdI0ZSFioZwssaGEgnRXl4UzYSMgs03dJUmgv8GQ5z3vvyA_U_khZsb1jc/s1600/lazylayout-compose-1-9-release.png\" width=\"70%\" /></div>\n\n\n<blockquote><b>Note:</b> Prefetch composes more items than are currently visible — the new cache window API will likely increase prefetching. This means that item's <span style=\"color: #0d904f; font-family: courier;\">LaunchedEffects</span> and <span style=\"color: #0d904f; font-family: courier;\">DisposableEffects</span> may run earlier – do not use this as a signal for visibility e.g. for impression tracking. Instead, we recommend using the new <span style=\"color: #0d904f; font-family: courier;\">onFirstVisible</span> and <span style=\"color: #0d904f; font-family: courier;\">onVisibilityChanged</span> APIs. Even if you're not manually customizing <span style=\"color: #0d904f; font-family: courier;\">LazyLayoutCacheWindow</span> now, avoid using composition effects as a signal of content visibility, as this new prefetch mechanism will be enabled by default in a future release.</blockquote>\n\n<h2><span style=\"font-size: x-large;\">Scroll</span></h2> \n\n<h3><span style=\"font-size: large;\">2D Scroll APIs</span></h3>\n\n<p>Following the release of <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/gestures/package-summary#%28androidx.compose.ui.Modifier%29.draggable2D%28androidx.compose.foundation.gestures.Draggable2DState,kotlin.Boolean,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Boolean,kotlin.Function1,kotlin.Function1,kotlin.Boolean%29\" target=\"_blank\">Draggable2D</a></span>, <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/gestures/package-summary#%28androidx.compose.ui.Modifier%29.scrollable2D%28androidx.compose.foundation.gestures.Scrollable2DState,kotlin.Boolean,androidx.compose.foundation.OverscrollEffect,androidx.compose.foundation.gestures.FlingBehavior,androidx.compose.foundation.interaction.MutableInteractionSource%29\" target=\"_blank\">Scrollable2D</a></span> is now available, bringing two-dimensional scrolling to Compose. While the existing <span style=\"font-family: courier;\">Scrollable</span> modifier handles single-orientation scrolling, <span style=\"color: #0d904f; font-family: courier;\">Scrollable2D</span> enables both scrolling and flinging in 2D. This allows you to create more complex layouts that move in all directions, such as spreadsheets or image viewers. Nested scrolling is also supported, accommodating 2D scenarios.</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">offset</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>remember<span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span>mutableStateOf(Offset.<span style=\"color: #687822;\">Zero</span>)<span style=\"color: #bbbbbb;\"> </span>}\nBox(\n<span style=\"color: #bbbbbb;\">    </span>Modifier.<span style=\"color: #687822;\">size</span>(<span style=\"color: #666666;\">150.</span>dp)\n<span style=\"color: #bbbbbb;\">        </span>.<span style=\"color: #687822;\">scrollable2D</span>(\n<span style=\"color: #bbbbbb;\">            </span>state<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span>\n<span style=\"color: #bbbbbb;\">                </span>rememberScrollable2DState<span style=\"color: #bbbbbb;\"> </span>{<span style=\"color: #bbbbbb;\"> </span>delta<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">-&gt;</span>\n<span style=\"color: #bbbbbb;\">                    </span>offset.<span style=\"color: #687822;\">value</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>offset.<span style=\"color: #687822;\">value</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">+</span><span style=\"color: #bbbbbb;\"> </span>delta<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #3d7b7b; font-style: italic;\">// update the state</span>\n<span style=\"color: #bbbbbb;\">                    </span>delta<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #3d7b7b; font-style: italic;\">// indicate that we consumed all the pixels available</span>\n<span style=\"color: #bbbbbb;\">                </span>}\n<span style=\"color: #bbbbbb;\">        </span>)\n<span style=\"color: #bbbbbb;\">        </span>.<span style=\"color: #687822;\">background</span>(Color.<span style=\"color: #687822;\">LightGray</span>),\n<span style=\"color: #bbbbbb;\">    </span>contentAlignment<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>Alignment.<span style=\"color: #687822;\">Center</span>,\n)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">    </span>Text(\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #ba2121;\">\"X=</span><span style=\"color: #a45a77; font-weight: bold;\">${</span>offset.<span style=\"color: #687822;\">value</span>.<span style=\"color: #687822;\">x</span>.<span style=\"color: #687822;\">roundToInt</span>()<span style=\"color: #a45a77; font-weight: bold;\">}</span><span style=\"color: #ba2121;\"> Y=</span><span style=\"color: #a45a77; font-weight: bold;\">${</span>offset.<span style=\"color: #687822;\">value</span>.<span style=\"color: #687822;\">y</span>.<span style=\"color: #687822;\">roundToInt</span>()<span style=\"color: #a45a77; font-weight: bold;\">}</span><span style=\"color: #ba2121;\">\"</span>,\n<span style=\"color: #bbbbbb;\">        </span>style<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span>TextStyle(fontSize<span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">32.</span>sp),\n<span style=\"color: #bbbbbb;\">    </span>)\n}\n</pre></div>\n\n\n<div style=\"text-align: center;\"><img alt=\"moving image of 2D scroll API demo\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj293HBOXdNHIJtHSWro5CrgZTyoGFF9VbulPDNvsKYXYa4VmK9OBhnU1pjQk7zKfjRmjRlG03bgvzt31SQ360yAc96vVFOPRCpsu4eNT-ZvOnFkoE024WhFvHk1n9-udTCY-3_I2hcysmJJJNUOGuXRQBe1RPZzbE6g5I0J-YPpYSD37OxhQL0ExT45X4/s1600/2D-scroll-API-demo-compose-1-9-release.gif\" width=\"40%\" /></div>\n\n<h3><span style=\"font-size: large;\">Scroll Interop Improvements</span></h3>\n\n<p>There are bug fixes and new features to improve scroll and nested scroll interop with Views, including the following:</p>\n<ul><ul>\n<li>You can now use <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/view/ViewTreeObserver.OnScrollChangedListener\" target=\"_blank\">ViewTreeObserver onScrollChangeListeners</a></span> to listen to Compose scroll events.</li></ul><ul>\n<li>Fixed the dispatching of incorrect velocities during fling animations between Compose and Views.</li></ul><ul>\n<li>Compose now correctly invokes the View's nested scroll callbacks in the appropriate order.</li></ul><ul>\n<li>Nested scrolling is respected in the case of <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/androidx/core/widget/NestedScrollView\" target=\"_blank\">NestedScrollView</a></span> inside an <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/viewinterop/package-summary#AndroidView%28kotlin.Function1,androidx.compose.ui.Modifier,kotlin.Function1%29\" target=\"_blank\">AndroidView</a></span>.</li>\n</ul></ul>\n\n<h2><span style=\"font-size: x-large;\">Improve crash analysis by adding source info to stack traces</span></h2> \n\n<p>We have heard from you that it can be hard to debug Compose crashes when your own code does not appear in the stack trace. To address this we're providing a new, opt-in API to provide richer crash location details, including composable names and locations enabling you to:</p>\n<ul><ul>\n<li>Efficiently identify and resolve crash sources.</li></ul><ul>\n<li>More easily isolate crashes for reproducible samples.</li></ul><ul>\n<li>Investigate crashes that previously only showed internal stack frames.</li>\n</ul></ul>\n\n<p>Note that we do not recommend using this API in release builds due to the performance impact of collecting this extra information, nor does it work in minified apks.</p>\n\n<p>To enable this feature,  add the line below to the application entry point. Ideally, this configuration should be performed before any compositions are created to ensure that the stack trace information is collected:</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">class</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue; font-weight: bold;\">App</span><span style=\"color: #bbbbbb;\"> </span>:<span style=\"color: #bbbbbb;\"> </span>Application()<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">   </span><span style=\"color: green; font-weight: bold;\">override</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">fun</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: blue;\">onCreate</span>()<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">        </span><span style=\"color: #3d7b7b; font-style: italic;\">// Enable only for debug flavor to avoid perf regressions in release</span>\n<span style=\"color: #bbbbbb;\">        </span>Composer.<span style=\"color: #687822;\">setDiagnosticStackTraceEnabled</span>(BuildConfig.<span style=\"color: #687822;\">DEBUG</span>)\n<span style=\"color: #bbbbbb;\">   </span>}\n}\n</pre></div>\n\n<h2><span style=\"font-size: x-large;\">New annotations and Lint checks</span></h2> \n\n<p>We are introducing a new runtime-annotation library that exposes annotations used by the compiler and tooling (such as lint checks). This allows non-Compose modules to use these annotations without a dependency on the Compose runtime library. The <span style=\"color: #0d904f; font-family: courier;\">@Stable</span>, <span style=\"color: #0d904f; font-family: courier;\">@Immutable</span>, and <span style=\"color: #0d904f; font-family: courier;\">@StableMarker</span> annotations have moved to runtime-annotation, allowing you to annotate classes and functions that do not depend on Compose.</p>\n\n<p>Additionally, we have added two new annotations and corresponding lint checks:</p>\n<ul><ul>\n<li><span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/runtime/annotation/RememberInComposition\" target=\"_blank\">@RememberInComposition</a></span>: An annotation that can mark constructors, functions, and property getters, to indicate that they must not be called directly inside composition without being remembered. Errors will be raised by a corresponding lint check.</li></ul><ul>\n<li><span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/runtime/annotation/FrequentlyChangingValue\" target=\"_blank\">@FrequentlyChangingValue</a></span>: An annotation that can mark functions, and property getters, to indicate that they should not be called directly inside composition, as this may cause frequent recompositions (for example,  marking scroll position values and animating values). Warnings are provided by a corresponding lint check.</li>\n</ul></ul>\n\n<h2><span style=\"font-size: x-large;\">Additional updates</span></h2> \n<ul><ul>\n<li>To simplify compatibility and improve stability for lint check support, Compose now requires Android Gradle Plugin (AGP) / Lint version 8.8.2 or higher. Check out this new <a href=\"https://developer.android.com/develop/ui/compose/tooling/lint\" target=\"_blank\">documentation page</a> to learn more.</li></ul><ul>\n  <li>Two new APIs have been added for context menus:</li></ul>\n <ul><ul>\n  <li><span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/text/contextmenu/modifier/package-summary#%28androidx.compose.ui.Modifier%29.appendTextContextMenuComponents%28kotlin.Function1%29\" target=\"_blank\">Modifier.appendTextContextMenuComponents()</a></span>: Adds new items into the context menu.</li></ul><ul>\n  <li><span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/text/contextmenu/modifier/package-summary#%28androidx.compose.ui.Modifier%29.filterTextContextMenuComponents%28kotlin.Function1%29\" target=\"_blank\">Modifier.filterTextContextMenuComponents()</a></span>: Removes items from the context menu.</li>\n   </ul></ul></ul>\n   \n<h2><span style=\"font-size: x-large;\">Get started</span></h2>\n<p>We appreciate all bug reports and feature requests submitted to our <a href=\"http://goo.gle/compose-feedback\" target=\"_blank\">issue tracker</a>. Your feedback allows us to build the APIs you need in your apps. Happy composing!</p>",
    "published": "2025-08-13T11:00:00.001-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Media3 1.8.0 - What’s new?",
    "link": "https://android-developers.googleblog.com/2025/08/media3-180-whats-new.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgjvUZRbW3C54XXsmXfmUotzasJ2iYC5dnPpM6MeEvi5jBGvHUzmawInbCLf2jehsnOWq0ic36GJ_QdXgMhj2cFziwvrV6R0QzKO-OnLzPmL2-w95f1q6ltsycfj_poLhXqe0ltaYZugveysTPkP1gg7hbz3IbIqqiqi0uGSsZJlT2n3cN46vtadnMcTAQ/s1600/android-jetpack-media3-1-8-0-meta.png\" style=\"display: none;\" />\n\n<em>Posted by Toni Heidenreich – Engineering Manager</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjc7tvydNaQJzmTLusAiFBurSEmdaA24MfNjgUSSE6BheohJqi6AV-3KOuCVg0dJanXZKTE_HT8ujL1mMGW1HDi0KO4V3TqFd0I04HkLfME6D1B7LkCIDvUlQjlKGwj_Kq5WfBiQMqHJ4wN2ngzW9TwZ8GrvhuDWfzfwLU6aluHQXkLWX7jYM3iVfFFenI/s1600/Android%20Jetpack%20Media3%201.8.0.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjc7tvydNaQJzmTLusAiFBurSEmdaA24MfNjgUSSE6BheohJqi6AV-3KOuCVg0dJanXZKTE_HT8ujL1mMGW1HDi0KO4V3TqFd0I04HkLfME6D1B7LkCIDvUlQjlKGwj_Kq5WfBiQMqHJ4wN2ngzW9TwZ8GrvhuDWfzfwLU6aluHQXkLWX7jYM3iVfFFenI/s1600/Android%20Jetpack%20Media3%201.8.0.png\" /></a>\n\n\n<p>This release includes several bug fixes, performance improvements, and new features. Read on to find out more, and as always please check out the full <a href=\"https://github.com/androidx/media/releases/tag/1.8.0\" target=\"_blank\">release notes</a> for a comprehensive overview of changes in this release.</p>\n\n<h2><span style=\"font-size: x-large;\">Scrubbing in ExoPlayer</span></h2>\n\n<p>This release introduces a <i>scrubbing mode</i> in ExoPlayer, designed to optimize performance for frequent, user-driven seeks, like dragging a seek bar handle. You can enable it with <span style=\"color: #0d904f; font-family: courier;\">ExoPlayer.setScrubbingModeEnabled(true)</span>. We've also integrated this into <span style=\"color: #0d904f; font-family: courier;\">PlayerControlView</span> in the UI module where it can be enabled with either <span style=\"color: #0d904f; font-family: courier;\">time_bar_scrubbing_enabled=\"true\"</span> in XML or the <span style=\"color: #0d904f; font-family: courier;\">setTimeBarScrubbingEnabled(boolean)</span> method. Media3 1.8.0 contains the first batch of scrubbing improvements, with more to come in 1.9.0!</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"moving image showing repeated seeking while scrubbing with scrubbing mode off in ExoPlayer\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEie_PhwcM4wHt-mswNNqxnEH9Yir3mKSvcYEgagimsRmam5ikl7Yy9j96x9iBbt3pXf6axUu0MxbgI9iqKP-VNv_1_QScesSZbrg7joyAURn9xEPc1Sa9ANaj7Y1tMldDYz2AErDBebWzde4CDGChFc2zaatoeAdC-W0A2kBxipty1B5N_2bFm9o2nSuEU/s16000/media3-1-8-0-repeated-seeking-scrubbing-mode-off.gif\" /></div><center><em>Repeated seeking while scrubbing with scrubbing mode OFF</em></center><br />\n\n\n<div style=\"text-align: center;\"><img alt=\"moving image showing repeated seeking while scrubbing with scrubbing mode on in ExoPlayer\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKjAPgLR6Utk4p4hZJTzHMGzWWqKrSXvKMKzOFsWQiwg2DUdQjC6nLOV1j5RCA5xkN4zCxezrdxhXfNUzMTWOF80hkXIifxJQtFILsdEBKvBs_mVi3hdvmyiFELnTsT_1BdLFCtY5dEkZxTk9aQY9Ef6tL3JT2xPtu4dJQ103ck7Opr_Jc0J7990ar79Y/s1600/media3-1-8-0-repeated-seeking-scrubbing-mode-on.gif\" /></div><center><em>Repeated seeking while scrubbing with scrubbing mode ON</em></center>\n\n\n<h2><span style=\"font-size: x-large;\">Live streaming ads with HLS interstitials</span></h2>\n\n<p>Extending the initial support for VOD in Media3 1.6.0, <span style=\"color: #0d904f; font-family: courier;\">HlsInterstitialsAdsLoader</span> now supports live streams and asset lists for all your server-guided ad insertion (SGAI) needs. The <a href=\"https://ads-developers.googleblog.com/2025/04/unlock-premium-ad-experiences-for.html\" target=\"_blank\">Google Ads Manager team explains how SGAI works</a>. Follow our documentation for <a href=\"https://developer.android.com/media/media3/exoplayer/hls#interstitials\" target=\"_blank\">how to integrate HLS interstitals into your app</a>.</p>\n  \n<div style=\"text-align: center;\"><img alt=\"chart of HLS intertitials processing flow from content server to ads server to Exoplayer\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjUgd047Oq3A7Y3PcrLab5pb24a2kf6XGaWrgZYiR8lrTgFNCJIsz3kiSe2QjbbrpUmnr9R5oAi3Ij17zLsSPijYHG7jtt-qZqdQKB3txAsq2yWky8R5JwYPmdVrt6bA3lmaJyeFDlShLM301FbtIawVO3vtbPAG9gdUBK0L03ognYFhYNaS9qZj3UqPV8/s1600/HLS-interstitials-processing-flow-chart.png\" width=\"85%\" /></div><center><em>HLS interstitials processing flow</em></center>\n\n<h2><span style=\"font-size: x-large;\">Duration retrieval without playback</span></h2>\n\n<p><span style=\"font-family: courier;\"><a href=\"https://developer.android.com/media/media3/exoplayer/retrieving-metadata#wo-playback\" target=\"_blank\">MetadataRetriever</a></span> has been significantly updated - it's now using an <span style=\"color: #0d904f; font-family: courier;\">AutoCloseable</span> pattern and lets you retrieve the duration of media items without playback. This means Media3 now offers the full functionality of the Android platform <span style=\"color: #0d904f; font-family: courier;\">MediaMetadataRetriever</span> but without having to worry about device specific quirks and cross-process communication (some parts like frame extraction are still experimental, but we'll integrate them properly in the future).</p>\n\n<!--Kotlin--><div style=\"background: rgb(248, 248, 248); border: 0px; overflow: auto; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span></span><span style=\"color: green; font-weight: bold;\">try</span><span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">  </span>MetadataRetriever.<span style=\"color: #687822;\">Builder</span>(context,<span style=\"color: #bbbbbb;\"> </span>mediaItem).<span style=\"color: #687822;\">build</span>().<span style=\"color: #687822;\">use</span><span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">     </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">trackInfo</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green;\">it</span>.<span style=\"color: #687822;\">retrieveTrackGroups</span>().<span style=\"color: #687822;\">await</span>()\n<span style=\"color: #bbbbbb;\">     </span><span style=\"color: green; font-weight: bold;\">val</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #19177c;\">duration</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: #666666;\">=</span><span style=\"color: #bbbbbb;\"> </span><span style=\"color: green;\">it</span>.<span style=\"color: #687822;\">retrieveDurationUs</span>().<span style=\"color: #687822;\">await</span>()\n<span style=\"color: #bbbbbb;\">  </span>}\n}<span style=\"color: #bbbbbb;\"> </span><span style=\"color: green; font-weight: bold;\">catch</span><span style=\"color: #bbbbbb;\"> </span>(e:<span style=\"color: #bbbbbb;\"> </span>IOException)<span style=\"color: #bbbbbb;\"> </span>{\n<span style=\"color: #bbbbbb;\">  </span>handleFailure(e)\n}\n</pre></div>\n\n<h2><span style=\"font-size: x-large;\">Partial downloads, XR audio routing and more efficient playback</span></h2>\n\n<p>There were several other improvements and bug fixes across ExoPlayer and playback related components. To name just a few:</p>\n\n<ul><ul>\n  <li><span style=\"color: #0d904f; font-family: courier;\">Downloader</span> implementations now support partial downloads, with a new <span style=\"color: #0d904f; font-family: courier;\">PreCacheHelper</span> to organize manual caching of single items. This will be integrated into ExoPlayer's <a href=\"https://developer.android.com/media/media3/exoplayer/preloading-media/preloadmanager\" target=\"_blank\">Default<span style=\"font-family: courier;\">PreloadManager</span></a> in Media3 1.9.0 for an even more seamless caching and <a href=\"https://developer.android.com/media/media3/exoplayer/preloading-media/preloadmanager\" target=\"_blank\">preloading</a> experience.</li></ul><ul>\n<li>When created with a <span style=\"color: #0d904f; font-family: courier;\">Context</span> with a <a href=\"https://developer.android.com/reference/android/companion/virtual/VirtualDevice#getDeviceId%28%29\" target=\"_blank\">virtual device ID</a>, ExoPlayer now automatically routes the audio to the virtual XR device for that ID.</li></ul><ul> \n<li>We enabled more efficient interactions with Android's MediaCodec, for example skipping buffers that are not needed earlier in the pipeline.</li>\n</ul></ul>\n\n<h2><span style=\"font-size: x-large;\">Playback resumption in demo app and better notification defaults</span></h2>\n\n<p>The <span style=\"color: #0d904f; font-family: courier;\">MediaSession</span> module has a few changes and improvements for notification handling. It's now keeping notifications for longer by default, for example when playback is paused, stopped or failed, so that a user has more time to resume playback in your app. Notifications for live streams (in particular with DVR windows) also became more useful by removing the confusing DVR window duration and progress from the notification.</p> \n\n<p>The media session demo app now also supports playback resumption to showcase how the feature can be integrated into your app! It allows the user to resume playback long after your app has been terminated and even after reboot.</p>\n\n<div style=\"text-align: center;\"><img alt=\"Media resumption notification after device reboot\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjQc1cllu3KUlFLLJLLECRf5VocBWdhGrVszfgV86VbcwW9zLjPhen62N5T-F8AUgpk2ktw2bTKDFPJxs_GQJxGPXpM6q7wuXsAQ7z7yM2KuWohQDJf-5zHYixIaX1dQ2SWvunCEFpR13MS0HJY08K0BuTgud8ZpVsl66ZeDyQWUPbuKJnuHmKCuzIyQDI/s16000/media-resumption-notification-after-device-reboot.png\" /></div><center><em>Media resumption notification after device reboot</em></center>\n\n<h2><span style=\"font-size: x-large;\">Faster trim operations with edit list support</span></h2>\n\n<p>We are continuing to add optimizations for faster trim operations to Transformer APIs. In the new 1.8.0 release, we introduced support for trimming using MP4 edit lists. Call <span style=\"color: #0d904f; font-family: courier;\">experimentalSetMp4EditListTrimEnabled(true)</span> to make trim-only edits significantly faster.</p>\n\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #008000; font-weight: bold;\">val</span><span style=\"color: #BBB;\"> </span><span style=\"color: #19177C;\">transformer</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span><span style=\"color: #BBB;\"> </span>Transformer.<span style=\"color: #687822;\">Builder</span>(requireContext())\n<span style=\"color: #BBB;\">        </span>.<span style=\"color: #687822;\">addListener</span>(transformerListener)\n<span style=\"color: #BBB;\">        </span>.<span style=\"color: #687822;\">experimentalSetMp4EditListTrimEnabled</span>(<span style=\"color: #008000; font-weight: bold;\">true</span>)\n<span style=\"color: #BBB;\">        </span>.<span style=\"color: #687822;\">build</span>()\n</pre></div>\n\n<p>A standard trimming operation often requires a full re-transcoding of the video, even for a simple trim. This meant decoding, re-encoding the entire file, which is a time-consuming and resource-intensive process. With MP4 edit list support, Transformer can now perform \"trim-only\" edits much more efficiently. Instead of re-encoding, it leverages the existing encoded samples and defines a \"pre-roll\" within the edit list. This pre-roll essentially tells the player where to start playback within an existing encoded sample, effectively skipping the unwanted beginning portion.</p>\n\n<p>The following diagram illustrates how this works:</p>\n\n<div style=\"text-align: center;\"><img alt=\"processing overview for faster trim optimizations\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjaauZG2XbN_mNb5UBOfF_4Kq6oyIMDJCdhJ9fdWEaocFuDPc16kQk9pISzd4CEA_W5D6VSi2aFb1bXuBvXKmMMJaPfeVoofJggwXvofqqLqxa9YzboBpS4trbvTDrdanU-7qk7UHkYB0FBKSE_4CF6UOurKhZplASVwWU5ILjnCWvL9XVTkk6ZtBHz5Z4/s1600/processing-overview-faster-trim-optimization.jpg\" /></div><center><em>Processing overview for faster trim optimizations\n</em></center>\n\n<p>As illustrated above, each file contains encoded samples and each sample begins with a keyframe. The red line indicates the intended clip point in the original file, allowing us to safely discard two first samples. The major difference in this approach lies in how we handle the third encoded sample. Instead of running a transcoding operation, we transmux this sample and define a pre-roll for a video start position. This significantly accelerates the export operation; however this optimization is only applicable if no other effects are applied. Player implementations may also ignore the pre-roll component of the final video and play from the start of the encoded sample.</p>\n\n<h2><span style=\"font-size: x-large;\">Chipset specific optimizations with CodecDbLite</span></h2>\n\n<p>CodecDBLite optimizes two elements of encoder configuration on a chipset-by-chipset basis: codec selection and B-frames. Depending on the chipset, these parameters can have either a positive or adverse impact on video quality. CodecDB Lite leverages benchmark data collected on production devices to recommend a configuration that achieves the maximum user-perceived quality for the developer’s target bitrate. By enabling CodecDB Lite, developers can leverage advanced video codecs and features without worrying about whether or not they work on a given device.</p>\n\n<p>To use CodecDbLite, simply call <span style=\"color: #0d904f; font-family: courier;\">setEnableCodecDbLite(true)</span> when building the encoder factory:</p>\n\n<!-- Kotlin --><div style=\"background: #f8f8f8; overflow: auto; width: auto; border: 0;\"><pre style=\"margin: 0; line-height: 125%;\"><span></span><span style=\"color: #008000; font-weight: bold;\">val</span><span style=\"color: #BBB;\"> </span><span style=\"color: #19177C;\">transformer</span><span style=\"color: #BBB;\"> </span><span style=\"color: #666;\">=</span>\n<span style=\"color: #BBB;\">    </span>Transformer.<span style=\"color: #687822;\">Builder</span>()\n<span style=\"color: #BBB;\">        </span>.<span style=\"color: #687822;\">setEncoderFactory</span>(\n<span style=\"color: #BBB;\">            </span>DefaultEncoderFactory.<span style=\"color: #687822;\">Builder</span>()\n<span style=\"color: #BBB;\">                </span>.<span style=\"color: #687822;\">setEnableCodecDbLite</span>(<span style=\"color: #008000; font-weight: bold;\">true</span>)\n<span style=\"color: #BBB;\">                </span>.<span style=\"color: #687822;\">build</span>()\n<span style=\"color: #BBB;\">        </span>)\n<span style=\"color: #BBB;\">        </span>.<span style=\"color: #687822;\">build</span>()\n</pre></div>\n\n<h2><span style=\"font-size: x-large;\">New Composition demo</span></h2>\n\n<p>The <a href=\"https://github.com/androidx/media/tree/release/demos/composition\" target=\"_blank\">Composition Demo app</a> has been refreshed, and is now built entirely with Kotlin and Compose to showcase advanced multi-asset editing capabilities in Media3. Our team is actively extending the APIs, and future releases will introduce more advanced editing features, such as transitions between media items and other more advanced video compositing settings.</p>\n\n<p><b>Adaptive-first:</b> Editing flows can get complicated, so it helps to take advantage of as much screen real estate as possible. With the adaptive layouts provided by Jetpack Compose, such as the <a href=\"https://developer.android.com/develop/ui/compose/layouts/adaptive/build-a-supporting-pane-layout\" target=\"_blank\">supporting pane layout</a>, we can dynamically adapt the UI based on the device’s screen size.</p>\n\n<div style=\"text-align: center;\"><img alt=\"new Composition demo app\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgL94_ksTExG6aDGurbjV-PyA1Y8rx066b-S-dmrZ_HErdjm4XThFP5YhW4sJgrOH4FVVlLIIS6K4BI_YYNUqiuUeyl_poOd98RMhRM_4l3vQWkr_I-FR1A-LpXi3Gv7tcgYL_BDgG7qAYSuCLeiFK4Zp3xvYC9t8_wciXl3dgw8NiRNnEO9Vzm37JXNM0/s1600/new-composition-demo-app.gif\" width=\"35%\" /></div><center><em>Processing overview for faster trim optimizations</em></center>\n\n\n<p><b>Multi-asset video compositor:</b> We’ve added a <a href=\"https://github.com/androidx/media/blob/b7bbc6e2bc3e45ff3ed99884c114c50f03bba5c9/demos/composition/src/main/java/androidx/media3/demo/composition/CompositionPreviewViewModel.kt#L322\" target=\"_blank\">custom video compositor</a> that demonstrates how to arrange input media items into different layouts, such as a 2x2 grid or a picture-in-picture overlay. These compositor settings are <a href=\"https://developer.android.com/reference/androidx/media3/transformer/Composition.Builder#setVideoCompositorSettings%28androidx.media3.common.VideoCompositorSettings%29\" target=\"_blank\">applied to the Composition</a>, and can be used both with CompositionPlayer for preview and Transformer for export.</p>\n\n<div style=\"text-align: center;\"><img alt=\"picture-in-picture video overlay in the Composition demo app\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi3FfIZOTOAotctlmJZjoCMQQCxX7tSkp3MABvOQ8WVlwjs57Vu5WKx1dwNurc9139gaB6OkxtqOHgXeLGo1E_kd9skHrIlZBpwJ7QYUi-gLCAHzTOOPF4EHsHtunJ3Xbh3ehJ4-0JjgwS-XGahorpS80uB4UOwmS5OEZC8IFNDyYriFSdu9Hle0eQLybk/s1600/picture-in-picture-video-overlay-composition-demo-app.gif\" width=\"35%\" /></div><center><em>Picture-in-picture video overlay in the Composition demo app</em></center><br />\n\n<h2><span style=\"font-size: x-large;\">Get started with Media3 1.8.0</span></h2>\n\n<p>Please get in touch via the <a href=\"https://github.com/androidx/media/issues\" target=\"_blank\">Media3 issue Tracker</a> if you run into any bugs, or if you have questions or feature requests. We look forward to hearing from you!</p>",
    "published": "2025-08-11T12:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "#WeArePlay: Meet the people coding a more sustainable world",
    "link": "https://android-developers.googleblog.com/2025/08/weareplay-meet-people-coding-sustainable-world.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiNrZUz7AsjqnFhJZ3BiBy2mDVmKO6hCv66KtgSq7vZtgt9ZZiljd7_JNFJEyuOg7tF1HfYqOqSnW6MQLRoYOaPalEg4vC4XVwstTgXz-hzYmzqeAGmEmZ4R56DNL8UtllCGOoCkVcCpkE73wue1m40mPu2tHjPirvMwBMZiQZARYWiMRlhYRkmTfwfaZM/s1600/%23WeArePlay%20Social%20.png\" style=\"display: none;\" />\n\n<em>Posted by Robbie McLachlan, Developer Marketing</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjUxUW8DhvJkBE5e8l7-uHKn9_-GtzuQf7FFoUigdbpb2cnU0Fh6SCNZl-winFJ3MbOR8jEAfwL-GX-GC0HAo9ZOSS3wjtxoYTmZv45I8yOK9bQTDSr-QTHVw9CbBRqw5XDoIio9Pva_U_O5Nw9nTMLGqbgD38ShTZj_e8Mr-tLsiCLaDSiEqMj7iq7szU/s1600/%23WeArePlay%20Banner.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjUxUW8DhvJkBE5e8l7-uHKn9_-GtzuQf7FFoUigdbpb2cnU0Fh6SCNZl-winFJ3MbOR8jEAfwL-GX-GC0HAo9ZOSS3wjtxoYTmZv45I8yOK9bQTDSr-QTHVw9CbBRqw5XDoIio9Pva_U_O5Nw9nTMLGqbgD38ShTZj_e8Mr-tLsiCLaDSiEqMj7iq7szU/s1600/%23WeArePlay%20Banner.png\" /></a>\n \n<p>How do you tackle the planet's biggest sustainability and environmental challenges? For 10 new founders we’re spotlighting in <a href=\"https://play.google.com/console/about/weareplay/\" target=\"_blank\">#WeArePlay</a>, it starts with coding. Their apps and games are helping to build a healthier planet by developing career paths for aspiring environmentalists, preserving indigenous knowledge, and turning nature education into an adventure for all.</p>\n\n<p>Here are a few of our favourites:</p>\n\n<h4><span style=\"font-size: large;\">Ariane, Flávia, Andréia, and Mayla's game BoRa turns a simple park visit into an immersive, gamified adventure.</span></h4>\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"Ariane, Flávia, Andréia, and Mayla, co-founders of Fubá Educação Ambiental, São Carlos, Brazil\" border=\"0\" height=\"426\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkCCAR-VKR7qzbZQM0sJtgf5VPx9DFuNTsnqGber7E_LefA68JhrcnEfg8Uw_Qbdv1nshRkLJ7W5UXRecsVDi6BjiA7_QrW68fcQfn8xjWZu6eIqRJtQZPvyWVZ5yOM_1sajzM3ehzEXq4oO_zKJv5TGzDl10QBwEsJI6Wk7Stl9ey2xDJQjSz5ewX8sQ/w640-h426/01_BRAZIL_FUBA%CC%81%20EDUCAC%CC%A7A%CC%83O%20AMBIENTAL_FOUNDERS_ARIANE%20DI%20TULIO_FLAVIA%20THIEMANN_ANDREIA%20NASSER_MAYLA%20VALENTI.jpg\" width=\"640\" /></a></div><center><em>Ariane, Flávia, Andréia, and Mayla, co-founders of Fubá Educação Ambiental</em></center><center><em>São Carlos, Brazil</em></center>\n\n<p>Passionate about nature, co-founders Mayla, Flávia, Andréia, and Ariane met while researching environmental education. They wanted to foster more meaningful connections between people and Brazil's national parks. Their app, <a href=\"https://play.google.com/store/apps/details?id=br.com.fubaea.bora.pni&amp;gl=br\" target=\"_blank\">BoRa - Iguaçu National Park</a>, transforms a visit into an immersive experience using interactive storytelling, gamified trails, and accessibility features like sign language, helping everyone connect more deeply with the natural world.</p>\n\n\n<h4><span style=\"font-size: large;\">Louis and Justin's app, CyberTracker, turns the ancient knowledge of indigenous trackers into vital scientific data for modern conservation.</span></h4>\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"Louis, co-founder of CyberTracker Conservation, Cape Town, South Africa\" border=\"0\" height=\"640\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgBKVBjbY4Z1xSrVNxKf0KFgdTFPkFJyg5aF9EPm3LkyGitj5OdHjUFpZddyVNKBWz7pVlOREmmd_stp5r9plMaQ-cpbpmklxeYqu7QVlDkRV-Ap6hMfdzpwJevAwHqhSxvyKCtTTIske61XC6Q8-8uGD-O9NGz_WPg2AddEBMq2Q2Zwi9wWiFCSb-VOcI/w577-h640/03_SOUTH%20AFRICA_CYBERTRACKER%20CONSERVATION_COFOUNDER_Louis%20Liebenberg%20.png\" width=\"577\" /></a></div><center><em>Louis, co-founder of CyberTracker Conservation</em></center><center><em>Cape Town, South Africa</em></center>\n\n<p>Louis knew that animal tracking was a science, but the expert knowledge of many indigenous trackers couldn't be recorded because they were unable to read or write. He partnered with Justin to create <a href=\"https://play.google.com/store/apps/details?id=org.cybertracker.mobile.ct&amp;hl=en-US&amp;gl=us\" target=\"_blank\">CyberTracker</a> to solve this. Their app uses a simple icon-based interface, enabling non-literate trackers to record vital biodiversity data. This innovation preserves invaluable knowledge and supports conservation efforts worldwide.</p>\n\n\n<h4><span style=\"font-size: large;\">Bharati and Saurabh’s app, Earth5R, turns a passion for the planet into real-world experience and careers in the green economy.</span></h4>\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"Bharati and Saurabh, co-founders of Earth5R Environmental Services, Mumbai, India\" border=\"0\" height=\"480\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhFlqZVtR0IRf4TuIqOUstdlPATrksAyo-sDVpI7Hd4VsdC0SWjf87ivI3RIEbbQGqC3ZKpE5ww_jcW_RF-DF0hwlzl7ZYyUGb1jkKHoAolUSFbL6A9zBhza8P_PuyRTp32fE4APtMiOXfsTMjaF3JxKLEcSLPleTVJQRlnG79scelF2jP6diakBDLZndo/w640-h480/01_INDIA_EARTH5R_FOUNDERS_BHARATI%20MARATHE_SAURABH%20GRUPTA.jpg\" width=\"640\" /></a></div><center><em>Bharati and Saurabh, co-founders of Earth5R Environmental Services</em></center><center><em>Mumbai, India</em></center>\n\n<p>After a life-changing cycling trip around the world, Saurabh was inspired by sustainable practices he saw in different communities. He and his wife, Bharati, brought those lessons home to Mumbai and launched <a href=\"https://play.google.com/store/apps/details?id=com.app.earth5r&amp;&amp;gl=in\" target=\"_blank\">Earth5R</a>. Their app provides environmental education and career development, connecting people to internships and hands-on projects. By providing the skills and experience needed for the green economy, they're building the next generation of environmental leaders.</p><br />\n\n<p>Discover more <a href=\"https://play.google.com/console/about/weareplay/\" target=\"_blank\">#WeArePlay</a> stories from founders across the globe.</p>\n\n\n<div><br /><br /></div>\n\n<div style=\"text-align: center;\"><img alt=\"Google Play logo\" border=\"0\" height=\"41\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxnvf5XzyebGljqgi8J7by9XsvaL5WWLNamSyTg4w_c0kPHjY1B1no1FQsdSfUHUwNw0UuYfXuo6i7K6VpdyV2-K8ms4VFmZA438ujm6qwtZMt5rJfMGymhQ_iCX2Z8h0MuJo7gXUQ4Hb-hjKYK1isibMZZxCyX_vo3kGoP5tieK2PI2ZhYdGh4gsqhwA/w200-h41/lockup_ic_Google_Play_H_260x53px_clr.png\" width=\"200\" /></div>",
    "published": "2025-08-07T09:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "What is HDR?",
    "link": "https://android-developers.googleblog.com/2025/08/what-is-hdr.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEitNVESjKGGkshs8xG8_90gkdo2g6Lx2vG5_cGpiItT48Ur3QFPcsAxGsEtv03KV8ZSeg5bznc1dPqgJDXZYnaUmM091KDcOa-hX2Hj4N-pdf6QFVba9zNeZ_OW5pI2Z7LjaJMdrMkTw_4BkX1e-NL2Lj1yBrQqXGbf7TPDHl7P_CWTbZpBuMl_75OmO1c/s1600/what-is-hdr%20%281%29.png\" style=\"display: none;\" />\n\n<em>Posted by John Reck – Software Engineer</em>\n\n<p>For Android developers, delivering exceptional visual experiences is a continuous goal. High Dynamic Range (HDR) unlocks new possibilities, offering the potential for more vibrant and immersive content. Technologies like UltraHDR on Android are particularly compelling, providing the benefits of HDR displays while maintaining crucial backwards compatibility with SDR displays. On Android you can use HDR for both <a href=\"https://developer.android.com/media/grow/hdr\" target=\"_blank\">video and images</a>.</p>\n\n<p>Over the years, the term HDR has been used to signify a number of related, but ultimately distinct visual fidelity features. Users encounter it in the context of camera features (<a href=\"https://en.wikipedia.org/wiki/Exposure_fusion\" target=\"_blank\">exposure fusion</a>), or as a marketing term in TV or monitor (“HDR capable”). This conflates distinct features like wider color gamuts, increased bit depth or enhanced contrast with HDR itself.</p> \n\n<p>From an Android Graphics perspective, HDR primarily signifies <b>higher peak brightness capability that extends beyond the conventional Standard Dynamic Range</b>. Other perceived benefits often derive from standards such as HDR10 or Dolby Vision which also include the usage of wider color spaces, higher bit depths, and specific transfer functions.</p>\n\n<p>In this article, we’ll establish the foundational color principles, then address common myths, clarify HDR’s role in the rendering pipeline, and examine how Android’s display technologies and APIs enable HDR experience.</p>\n  \n<h2><span style=\"font-size: x-large;\">The components of color</span></h2>\n  \n<p>Understanding HDR begins with defining the three primary components that form the displayed volume of color: bit depth, transfer function, and color gamut. These describe the precision, scaling, and range of the color volume, respectively.</p> \n\n<p>While a color model defines the format for encoding pixel values (e.g., RGB, YUV, HSL, CMYK, XYZ), RGB is typically assumed in a graphics context. The combination of a color model, a color gamut, and a transfer function constitutes color space. Examples include sRGB, Display P3, Adobe RGB, BT.2020, or BT.2020 HLG. Numerous combinations of color gamut and transfer function are possible, leading to a variety of color spaces.</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"components of color include bit depth + transfer fn + color gamut + color model with the last three being within the color space\" border=\"0\" height=\"94\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgxm9Xig6hc7ZDQqqbY5i-bXNUBi2POkOn0880mZ4qwZ31B1g4Af1ivrSqDqm9s6QqspX7nDF3jTOieAIIdYYCk_AHBEjvydITfsk3nVC_sYEaElAmpYAiWkQo2FaChh593wU3J_bzumg2UEZvzpX1GaPQFGFpxft7SqkFOSfUwz37v3JE-_9RCkJy5XFA/w640-h94/components-color-what-is-hdr.png\" width=\"640\" /></div><center><em>Components of color</em></center>\n\n<h4><span style=\"font-size: medium;\"><b>Bit Depth</b></span></h4>\n\n<p>Bit depth defines the precision of color representation. A higher bit depth allows for finer gradation between color values. In modern graphics, bit depth typically refers to bits per channel (e.g., an 8-bit image uses 8 bits for each red, green, blue, and optionally alpha channel).</p> \n\n<p>Crucially, bit depth does not determine the overall range of colors (minimum and maximum values) an image can represent; this is set by the color gamut and, in HDR, the transfer function. Instead, increasing bit depth provides more discrete steps within that defined range, resulting in smoother transitions and reduced visual artifacts such as banding in gradients.</p>\n\n<b>5-bit</b>\n\n<div style=\"text-align: center;\"><img alt=\"5-bit color gradient showing distinct transition between color values\" border=\"0\" height=\"160\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjA5c38_MOiEESePUo8fPb0xFkabWaniZZpkPI9hof9iIVAx1bsTScJmtPs64npQjAVE8AkpZvablPf-zK641FBaUBeb9586m9bSG451B3B8WCchjJiYj2iiI-vsNvtB6Z-d_ql5-d_r3Dl3sye4ukPyFr0hl0OIVIyTMVgfnOePWkZKlXx0BfSnAe1vPo/w640-h160/5-bit-color-gradient.png\" width=\"640\" /></div>\n\n<b>8-bit</b>\n\n<div style=\"text-align: center;\"><img alt=\"8-bit color gradient showing smoother transition between color values\" border=\"0\" height=\"160\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhdcoyxjGCJcozezEaG4df5YRPGjKzIMNg6tL1ut8hjM3ZDoyitAYJ_z2PNzNg075fCzXk-5sMGEfFMCN4G4lSf21HjsTP3oThx8UT1Ov71Ek1RqSph-KRZee6LMZ-WPxpEKMdnufURpyZyqFmVOP-FjV-fChLRhMmcXeM8w0zElJfG-ZwG4wdAiMZuGEM/w640-h160/8-bit%20color-gradient.png\" width=\"640\" /></div>\n\n<p>Although 8-bit is one of the most common formats in widespread usage, it’s not the only option. RAW images can be captured at 10, 12, 14, or 16 bits. PNG supports 16 bits. Games frequently use 16-bit  floating point (FP16) instead of integer space for intermediate render buffers. Modern GPU APIs like Vulkan even support 64-bit RGBA formats in both integer and floating point varieties, providing up to 256-bits per pixel.</p>\n  \n<h4><span style=\"font-size: medium;\"><b>Transfer Function</b></span></h4>\n\n<p>A transfer function defines the mathematical relationship between a pixel’s stored numerical value and its final displayed luminance or color. In other words, the transfer function describes how to interpret the increments in values between the minimum and maximum. This function is essential because the human visual system's response to light intensity is non-linear. We are more sensitive to changes in luminance at low light levels than at high light levels. Therefore, a linear mapping from stored values to display luminance would not result in an efficient usage of the available bits. There would be more than necessary precision in the brighter region and too little in the darker region with respect to what is perceptual. The transfer function compensates for this non-linearity by adjusting the luminance values to match the human visual response.</p>\n\n<p>While some transfer functions are linear, most employ complex curves or piecewise functions to optimize image quality for specific displays or viewing conditions. sRGB, Gamma 2.2, HLG, and PQ are common examples, each prioritizing bit allocation differently across the luminance range.</p><a id=\"more-vibrant-colors\"></a>\n\n<h4><span style=\"font-size: medium;\"><b>Color Gamut</b></span></h4>\n\n<p>Color gamut refers to the entire range of colors that a particular color space or device can accurately reproduce. It is typically a subset of the visible color spectrum, which encompasses all the colors that the human eye can perceive. Each color space (e.g., sRGB, Display P3,  BT2020) defines its own unique gamut, establishing the boundaries for color representation.</p>\n\n<p>A wider gamut signifies that the color space can display a greater variety of colors, leading to richer and more vibrant images. However, simply having a larger gamut doesn't always guarantee better color accuracy or a more vibrant result. The device or medium used to display the colors must also be capable of reproducing the full range of the gamut. When a display encounters colors outside its reproducible gamut, the typical handling method is clipping. This is to ensure that in-gamut colors are properly preserved for accuracy, as otherwise attempts to scale the color gamut may produce unpleasant results, particularly in regions in which human vision is particularly sensitive like skin tones.</p>\n\n<h2><span style=\"font-size: x-large;\">HDR myths and realities</span></h2>\n\n<p>With an understanding of what forms the basic working color principles, it’s now time to evaluate some of the common claims of HDR and how they apply in a general graphics context.</p>\n\n<h3><span style=\"font-size: large;\">Claim: HDR offers more vibrant colors</span></h3>\n\n<p>This claim comes from HDR video typically using the BT2020 color space, which is indeed a wide color volume. However, there are several problems with this claim as a blanket statement.</p>\n\n<p>The first is that images and graphics have been able to use wider color gamuts, such as Display P3 or Adobe RGB, for quite a long time now. This is not a unique advancement that was coupled to HDR. In JPEGs for example this is defined by the ICC profile, which dates back to the early 1990s, although wide-spread adoption of ICC profile handling is somewhat more recent. Similarly on the graphics rendering side the usage of wider color spaces is fully decoupled from whether or not HDR is being used.</p>\n\n<p>The second is that not all HDR videos even use such a wider gamut at all. Although HDR10 specifies the usage of BT2020, other HDR formats have since been created that do not use such a wide gamut.</p>\n\n<p>The biggest issue, though, is one of capturing and displaying. Just because the format allows for the color gamut of BT2020 does not mean that the entire gamut is actually usable in practice. For example current <a href=\"https://professional.dolby.com/content-creation/dolby-vision-for-content-creators/2\" target=\"_blank\">Dolby Vision mastering guidelines</a> only require a 99% coverage of the P3 gamut. This means that even for high-end professional content, it’s not expected that the authoring of content beyond that of Display P3 is possible. Similarly, the vast majority of consumer displays today are only capable of displaying either sRGB or Display P3 color gamuts. Given that the typical recommendation of out-of-gamut colors is to clip them, this means that even though HDR10 allows for up to BT2020 gamut, the widest gamut in practice is still going to be P3.</p>\n\n<p>Thus this claim should really be considered something offered by HDR video profiles when compared to SDR video profiles specifically, although SDR videos could use wider gamuts if desired without using an HDR profile.</p>\n\n<h3><span style=\"font-size: large;\">Claim: HDR offers more contrast / better black detail</span></h3>\n\n<p>One of the benefits of HDR sometimes claimed is dark blacks (e.g. <a href=\"https://youtu.be/Y91PXCYc_PI?t=90\" target=\"_blank\">Dolby Vision Demo #3 - Core Universe - 4K HDR</a>  or “<a href=\"https://www.dolby.com/technologies/dolby-vision/\" target=\"_blank\">Dark scenes come alive with darker darks</a>” ) or more detail in the dark regions. This is even reflected in <a href=\"https://www.itu.int/dms_pub/itu-r/opb/rep/R-REP-BT.2390-11-2023-PDF-E.pdf\" target=\"_blank\">BT.2390</a>: “HDR also allows for lower black levels than traditional SDR, which was typically in the range between 0.1 and 1.0 cd/m2 for cathode ray tubes (CRTs) and is now in the range of 0.1 cd/m2 for most standard SDR liquid crystal displays (LCDs).” However, in reality no display attempts to show anything but SDR black as the blackest black the display is physically capable of. Thus there is no difference between HDR or SDR in terms of how dark it can reach - both bottom out at the same dark level on the same display.</p>\n\n<p>As for contrast ratio, as that is the ratio between the brightest white and the darkest black, it is overwhelmingly influenced by how dark a display can get. With the prevalence of OLED displays, particularly in the mobile space, both SDR and HDR have the same contrast ratio as a result, as they both have essentially perfect black levels giving them infinite contrast ratios.</p>\n\n<p>The PQ transfer function does allocate more bits to the dark region, so in theory it can convey better black detail. However, this is a unique aspect of PQ rather than a feature of HDR. HLG is increasingly the more common HDR format as it is preferred by mobile cameras as well as several high end cameras. And while PQ may contain this detail, that doesn’t mean the HDR display can necessarily display it anyway, as discussed in <a href=\"https://android-developers.googleblog.com/feeds/posts/default#display-realities\">Display Realities</a>.</p>\n  \n  \n<h3><span style=\"font-size: large;\">Claim: HDR offers higher bit depth</span></h3>\n\n<p>This claim comes from HDR10 and some, but not all, Dolby Vision profiles using 10 or 12-bits for the video stream. Similar to <a href=\"https://android-developers.googleblog.com/feeds/posts/default#more-vibrant-colors\">more vibrant colors</a>, this is really just an aspect of particular video profiles rather than something HDR itself inherently provides or is coupled to HDR. The usage of 10-bits or more is otherwise not uncommon in imaging, particularly in the higher end photography world, with RAW and TIFF image formats capable of having 10, 12, 14, or 16-bits. Similarly, PNG supports 16-bits, although that is rarely used.</p>\n\n<h3><span style=\"font-size: large;\">Claim: HDR offers higher peak brightness</span></h3>\n\n<p>This then, is all that HDR really is. But what does “higher peak brightness” really mean? After all, SDR displays have been pushing ever increasing brightness levels before HDR was significant, particularly for sunlight viewing. And even without that, what is the difference between “HDR” and just “SDR with the brightness slider cranked up”? The answer is that we define “HDR” as having a brightness range bigger than SDR, and we think of SDR as being the range driven by autobrightness to be comfortably readable in the current ambient conditions. Thus we define HDR in terms of things like “HDR headroom” or “HDR/SDR ratio” to indicate it’s a floating region relative to SDR. This makes brightness policies easier to reason about. However, it does complicate the interaction with traditional HDR such as that used in video, specifically HLG and PQ content.</p>\n\n<h4><span style=\"font-size: medium;\"><b>PQ/HLG transfer functions</b></span></h4>\n\n<p>PQ and HLG represent the two most common approaches to HDR in terms of video content. They represent two transfer functions that represent different concepts of what is “HDR.” PQ, published as SMPTE ST 2084:2014, is defined in terms of absolute nits in the display. The expectation is that it encodes from 0 to 10,000 nits, and expects to be mastered for a particular reference viewing environment. HLG takes a different approach, instead opting to take a typical gamma curve for part of the range before switching to logarithmic for the brighter portion. This has a claimed nominal peak brightness of 1000 nits in the reference environment, although it is not defined in absolute luminance terms like PQ is.</p><a id=\"display-realities\"></a>\n\n<p>Industry-wide specifications have recently formalized the brightness range of both PQ- and HLG-encoded content in relation to SDR. ITU-R BT. 2408-8 defines the reference white level for graphics to be 203 nits. ISO/TS 22028-5 and ISO/PRF 21496-1 have followed suit; 21496-1 in particular defines HDR headroom in terms of nominal peak luminance, relative to a diffuse white luminance at 203 nits.</p>\n\n<p>The realities of modern displays, discussed below, as well as typical viewing environments mean that traditional HDR video are nearly never displayed as intended. A display’s HDR headroom may evaporate under bright viewing conditions, demanding an on-demand tonemapping into SDR. Traditional HDR video encodes a fixed headroom, while modern displays employ a dynamic headroom, resulting in vast differences in video quality even on the same display.</p>\n\n<h3><span style=\"font-size: large;\">Display Realities</span></h3>\n\n<p>So far most of the discussion around HDR has been from the perspective of the content. However, users consume content on a display, which has its own capabilities and more importantly limits. A high-end mobile display is likely to have characteristics such as gamma 2.2, P3 gamut, and a peak brightness of around 2000 nits. If we then consider something like HDR10 there are mismatches in bit usage prioritization:</p>\n<ul><ul>\n<li>PQ’s increased bit allocation at the lower ranges ends up being wasted</li></ul><ul>\n<li>The usage of BT2020 ends up spending bits on parts of a gamut that will never be displayed</li></ul><ul>\n<li>Encoding up to 10,000 nits of brightness is similarly headroom that’s not utilized</li>\n</ul></ul>\n\n<p>These mismatches are not inherently a problem, however, but it means that as 10-bit displays become more common the existing 10-bit HDR video profiles are unable to actually take advantage of the full display’s capabilities. Thus HDR video profiles are in a position of simultaneously being forward looking while also already being unable to maximize a current 10-bit display’s capabilities. This is where technology such as <a href=\"https://developer.android.com/media/platform/hdr-image-format\" target=\"_blank\">Ultra HDR</a> or gainmaps in general provide a compelling alternative. Despite sometimes using an 8-bit base image, because the gain layer that transforms it to HDR is specialized to the content and its particular range needs it is more efficient with its bit usage, leading to results that still look stunning. And as that base image is upgraded to 10-bit with newer image formats such as AVIF, the effective bit usage is even better than those of typical HDR video codecs. Thus these approaches do not represent evolutionary or stepping stones to “true HDR”, but rather are also an improvement on HDR in addition to having better backwards compatibility. Similarly Android’s UI toolkit’s usage of the <span style=\"font-family: courier;\"><a href=\"https://developer.android.com/reference/android/view/SurfaceControl.Transaction#setExtendedRangeBrightness%28android.view.SurfaceControl,%20float,%20float%29\" target=\"_blank\">extendedRangeBrightness</a></span> API actually still primarily happens in 8-bit space. Because the rendering is tailored to the specific display and current conditions it is still possible to have a good HDR experience despite the usage of RGBA_8888.</p> \n\n<h2><span style=\"font-size: x-large;\">Unlocking HDR on Android: Next steps</span></h2>\n\n<p><a href=\"https://developer.android.com/media/grow/hdr\" target=\"_blank\">High Dynamic Range (HDR)</a> offers advancement in visual fidelity for Android developers, moving beyond the traditional constraints of Standard Dynamic Range (SDR) by enabling higher peak brightness.</p>\n\n<p>By understanding the core components of color – bit depth, transfer function, and color gamut – and debunking common myths, developers can leverage technologies like Ultra HDR to deliver truly immersive experiences that are both visually stunning and backward compatible.</p>\n\n<p>In our next article, we'll delve into the nuances of HDR and user intent, exploring how to optimize your content for diverse display capabilities and viewing environments.</p>",
    "published": "2025-08-06T09:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "Android Studio Narwhal Feature Drop is stable - start using Agent Mode",
    "link": "https://android-developers.googleblog.com/2025/07/android-studio-narwhal-feature-drop-stable-agent-mode.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiZkFoKe42ZXJkX9Aar398uBkC2o8hiNYxkBvtWoZaMFbQIDgBNsUluFqoZ1YCufxWKdVsk1rDWejGqVjmpoO3RtYUsyJ4oOEEPE0G2_vG9ASWMPrMXkBuy0MNthref6xs4FILuh13LRFYuAg9x8K_On_ZRhjnP-kenrsWRNdDFgpuCUk5EqPIjCTch8KE/s1600/android-studio-narwhal-feature-drop.png\" style=\"display: none;\" />\n\n<em>Posted by  Paris Hsu – Product Manager, Android Studio</em>\n\n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiZkFoKe42ZXJkX9Aar398uBkC2o8hiNYxkBvtWoZaMFbQIDgBNsUluFqoZ1YCufxWKdVsk1rDWejGqVjmpoO3RtYUsyJ4oOEEPE0G2_vG9ASWMPrMXkBuy0MNthref6xs4FILuh13LRFYuAg9x8K_On_ZRhjnP-kenrsWRNdDFgpuCUk5EqPIjCTch8KE/s1600/android-studio-narwhal-feature-drop.png\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiZkFoKe42ZXJkX9Aar398uBkC2o8hiNYxkBvtWoZaMFbQIDgBNsUluFqoZ1YCufxWKdVsk1rDWejGqVjmpoO3RtYUsyJ4oOEEPE0G2_vG9ASWMPrMXkBuy0MNthref6xs4FILuh13LRFYuAg9x8K_On_ZRhjnP-kenrsWRNdDFgpuCUk5EqPIjCTch8KE/s1600/android-studio-narwhal-feature-drop.png\" /></a>\n\n\n<p>The next wave of innovation is here with <a href=\"https://developer.android.com/studio\" target=\"_blank\">Android Studio Narwhal Feature Drop</a>. We're thrilled to announce that <a href=\"https://developer.android.com/studio/preview/gemini/agent-mode\" target=\"_blank\">Gemini in Android Studio's Agent Mode</a> is now available in the stable release, ready to tackle your most complex coding challenges. This release also brings powerful new tools for XR development, continued quality improvements, and key updates to enhance your productivity and help you build high-quality apps.</p>\n\n<p>Dive in to learn more about all the updates and new features designed to supercharge your workflow.</p>\n\n<div style=\"text-align: center;\"><img alt=\"moving image of Gemini in Android Studio: Agent Mode\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjK8tmScUHyfAS8ttwuPaC3uWS70k4j_mxBFpIuJXcdyUcQ_MDe1DYr4UB4K4SOTaWWQy_LZhiau1_LNidZapg5O8HAEPHIGGAUV5sGpD_bj2sW_J0sb0BNF3F2OFNp0dWnhUbNOcHY1fDU8g8MSBaiCf21IjVIH5qdN8w_V5lx1Ggvx48EsiwTLc-J_LY/s16000/gemini-in-android-stuio-agent-mode.gif\" /></div><center><em>Gemini in Android Studio: Agent Mode</em></center>\n\n<h2><span style=\"font-size: x-large;\">Develop with Gemini</span></h2>\n\n<h3><span style=\"font-size: large;\">Try out Agent Mode</span></h3>\n\n<p>Go beyond chat and assign tasks to Gemini. Gemini in Android Studio's Agent Mode is a powerful AI feature designed to handle complex, multi-stage development tasks. To use Agent Mode, click <b>Gemini</b> in the sidebar and then select the <b>Agent</b> tab. You can describe a high-level goal, like adding a new feature, generating comprehensive unit tests, or fixing a nuanced bug.</p>\n\n<p>The agent analyzes your request, breaks it down into smaller steps, and formulates an execution plan that uses IDE tools, such as reading and writing files and performing Gradle tasks, and can span multiple files in your project. It then iteratively suggests code changes, and you're always in control—you can review, accept, or reject the proposed changes and ask the agent to iterate based on your feedback. Let the agent handle the heavy lifting while you focus on the bigger picture.</p>\n\n<p>After releasing Agent Mode to Canary, we had positive feedback from the developers who tried it. We were so excited about the feature’s potential, we moved it to the stable channel faster than ever before, so that you can get your hands on it. Try it out and let us know what you build.</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"screen grab of Gemini's Agent Mode in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhut4eTvYgQMpMhPCEDjiA0QpPFwmzWXNLEvvztCwOFHVTgPJ5Awo1tf5zwd3-jfqJY0YmgxflUVKMc0-rQaDEglPc35ydow05zKwTSGzJ3PH0Cak3ieYBiY7X5UOKeWys5ftSRiHqJbrQtKjkrwUHdtbuf4rsJZdaEw45GNoDItQcVkRY7l6WFSlB2IEA/s16000/gemini-agent-mode-android-studio.png\" width=\"50%\" /></div><center><em>Gemini in Android Studio: Agent Mode</em></center><br />\n\n<p>Currently, the default model offered in the free tier in Android Studio has a shorter context length, which can limit the depth of response from some agent questions and tasks. In order to get the best performance from Agent Mode, you can <a href=\"https://developer.android.com/studio/gemini/add-api-key\" target=\"_blank\">bring your own key</a> for the public Gemini API. Once you add your Gemini API key with a paid GCP project, you’ll then be able to use the latest Gemini 2.5 Pro with a full 1M context window from Android Studio. Remember to pick the “Gemini 2.5 Pro” from the model picker in the chat and agent input boxes.</p>\n\n<div style=\"text-align: center;\"><img alt=\"screen grab of Gemini's model selector in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjRhIhoxeVzQIfTA1tEprdzH8cBqNEljLUfDbnfg6SH7le2SK_MXGC1hRd69-4-lrKQTPLmcXvEwYt0ENSLd2mxJwFbyFh84JrwXeU6XyYKLRph6DQji2J-tFAYoYqxp5KqvqmaPUevl-t6AE7dmBQwHFrhnpIpcR8uTP_f9GcPewFtaUTR9Hs-zi_ro-g/s16000/gemini-android-studio-model-selector.png\" width=\"60%\" /></div><center><em>Gemini in Android Studio: model selector</em></center>\n\n<h3><span style=\"font-size: large;\">Rules in prompt library</span></h3>\n\n<p>Tailor the response from Gemini to fit your project's specific needs with Rules in the <a href=\"https://developer.android.com/studio/gemini/prompt-library\" target=\"_blank\">prompt library</a>. You can define preferred coding styles, tech stacks, languages, or output formats to help Gemini understand your project standards for more accurate and personalized code assistance. You can set these preferences once, and they’ll be automatically applied to all subsequent prompts sent to Gemini. For example, you can create a rule such as, \"<i>Always provide concise responses in Kotlin using Jetpack Compose.</i>\" You can also set rules at the IDE level for personal use across projects, or at the project level, which can be shared with teammates by adding the <span style=\"color: #0d904f; font-family: courier;\">.idea</span> folder to your version control system.</p>\n\n<div style=\"text-align: center;\"><img alt=\"screen grab of Rules in Prompt Library in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEihe-IYpIPJnnaEIiN9wQvkiIq0SlzyUsvNYTbxrXqyGCHkg04hpD9xSONn1DcNu-qw1ZfpmaYb0nHyNHt8HCSrAEgBGfez-n2S7kqxFuRh_BSt9tfP_q_qP8AucTaTPD4l74Tv6odNA46R22_aL9jmsBXheOO1G4qhy5fKoo-vWr6XzHjNtn2uZYfXo3A/s1600/rules-prompt-library-android-studio.png\" width=\"100%\" /></div><center><em>Rules in prompt library</em></center>\n\n<h3><span style=\"font-size: large;\">Transform UI with Gemini [Studio Labs]</span></h3>\n\n<p>You can now transform UI code within the Compose Preview environment using natural language, directly in the preview. This experimental feature, available through <a href=\"https://developer.android.com/studio/preview/gemini/labs\" target=\"_blank\">Studio Labs</a>, speeds up UI development by letting you iterate with simple text commands. To use it, right-click in the Compose Preview and select Transform UI With Gemini. Then enter your natural language requests, such as \"<i>Center align these buttons</i>,\" to guide Gemini in adjusting your layout or styling, or select specific UI elements in the preview for better context. Gemini will then edit your Compose UI code in place, which you can review and approve.</p>\n\n<div style=\"text-align: center;\"><img alt=\"side by side screen captures of accessing the 'Transform UI with Gemini' menu on the left, and applying a natural language transformationto a Compose preview on the right in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEijCQM7uoAqJdRxprs1k8R0k4dlnNJARaDjLmsOk0wHSRXKJYrZjtH7yB6sYuDy9qVwRSYo0vTTAMl2aKxE1ey5lAOWffoaT3JBsfvYNd0PMX4mjiKzaGlfGCMDa6h_DqDP-o6Zsla7Qu-6LXcUMaQzfMwuVShKEHgHdNWPlpa2-BYTwrLMxj8W-siLSMU/s16000/accessing-transform-ui-gemini-menu-applying-natural-language-transformation-compose-preview.png\" /></div>\n\n<h2><span style=\"font-size: x-large;\">Immersive development</span></h2>\n\n<h3><span style=\"font-size: large;\">XR Android Emulator and template</span></h3>\n\n<p>Kickstart your extended reality development! Android Studio now includes:</p>\n<ul><ul>\n<li><b>XR Android Emulator:</b> The XR Android Emulator now launches embedded within the IDE by default. You can deploy your Jetpack app, navigate the 3D space, and use the Embedded Layout Inspector directly inside Android Studio.</li></ul><ul>\n  \n<li><b>XR template:</b> Get a head start on your next project with a new template specifically designed for Jetpack XR. This provides a solid foundation with boilerplate code to begin your immersive experience development journey right away.</li>\n</ul></ul>\n\n<div style=\"text-align: center;\"><img alt=\"XR Android Emulator in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiCxZnrozyxf94YHlw-tZTDuWtmIJsAAnD4KaX6PuiuhyphenhyphenujtN2OT9zgG_5kPtB7zs9oSwuTrxhLRh8CDo0_sH5AqMRKIsgni7TpbiYxl0ztTrliRYdcBhdZXF4qp5EeDOHZTgcSVxCdoSoD5x7uj1CVG63bCmEdaWo5y-pp9QdtZ6mx-SqRO-liHLlViuQ/s16000/android-xr-emulator-android-studio.png\" /></div><center><em>XR Android Emulator</em></center><br />\n\n<div style=\"text-align: center;\"><img alt=\"XR Android Emulator in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjuYj6Q5ek_Yc4-N69EcQEQuoNFK2X0pkqcssdKkD4OSxaTia622QaNmcTpEo0g5R8LEFIfrObXRoRFPORan2fZdp2LxukrLnFIrXhvr1269JdapNAWhXJYbuxzg8nN3RdF86R-Wiea4Rbp8D8xEJNh85tbuwThJR3hQ5Tc-ectlLH8OZnRM8mcU2AIwOc/s16000/xr-android-template-in-new-project-template-android-studio.png\" /></div><center><em>XR Android template in new project template</em></center>\n\n<h3><span style=\"font-size: large;\">Embedded Layout Inspector for XR</span></h3>\n\n<p>The <a href=\"https://developer.android.com/studio/debug/layout-inspector\" target=\"_blank\">embedded Layout Inspector</a> now supports XR applications, which lets you inspect and optimize your UI layouts within the XR environment. Get detailed insights into your app's component structure and identify potential layout issues to create more polished and performant experiences.</p>\n\n<div style=\"text-align: center;\"><img alt=\"Embedded Layout Inspector for XR in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjdwQcP94SkMwQw7FNHGgztYoO2w_FoQD4Q4OV2Ye39lW0aOZjWATYqmn1hPQ-QzObvMmzeyWh48YYWgut4Dtye3lxaIFK3D6Wtq9tkbwp3fnUiUyVt_naV6G2CFzkOrjqQss6Tv1r0ZXqR6qDdJ1iSoyde0FFlGNWn3WlZktPiNPW9dI5qccrT3TflW_Y/s16000/embedded-layout-inspector-xr.png\" /></div><center><em>Embedded Layout Inspector for XR</em></center>\n\n<h3><span style=\"font-size: large;\">Android Partner Device Labs available with Android Device Streaming</span></h3>\n\n<p>Android Partner Device Labs are device labs operated by Google OEM partners, such as Samsung, Xiaomi, OPPO, OnePlus, vivo, and others, and expand the selection of devices available in <a href=\"https://developer.android.com/studio/run/android-device-streaming\" target=\"_blank\">Android Device Streaming</a>. To learn more, see <a href=\"https://developer.android.com/studio/run/android-device-streaming#2P\" target=\"_blank\">Connect to Android Partner Device Labs</a>.</p>\n\n<div style=\"text-align: center;\"><img alt=\"Embedded Layout Inspector for XR in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhxK9HCCn5Gx6CeIrlwFQ_gz2r33_wNvlpxt04jAzTWgR1s2eOauaSR8Cf6PVKHVegPFjIJox8sQJ_et0Didty_5H1Zwnm4wfnBxfTKMqf0ohD_lwH3JkqcTvT0EhqzcT1VN2TTipoW6PbGqQGKTvHTFP4_t0AdoEg4dkU2FTMZSK0AXzghZ7GiWUm9NDM/s1600/android-device-streaming-supports-android-partner-device-labs.png\" /></div><center><em>Android Device Streaming supports Android Partner Device Labs</em></center>\n\n<h2><span style=\"font-size: x-large;\">Optimize and refine</span></h2>\n\n<h3><span style=\"font-size: large;\">Jetpack Compose preview quality improvements</span></h3>\n\n<p>We've made several enhancements to Compose previews to make UI iteration faster and more intuitive:</p>\n<ul><ul>\n<li><b>Improved code navigation:</b> You can now click on a preview's name to instantly jump to its @Preview definition, or click an individual component within the preview to navigate directly to the function where it's defined. Hover states and improved keyboard arrow navigation make moving through multiple previews a breeze.</li></ul><ul>\n<li><b>Preview picker:</b> The new Compose preview picker is now available. You can click any @Preview annotation in your Compose code to access the picker and easily manage your previews.</li>\n</ul></ul>\n\n<div style=\"text-align: center;\"><img alt=\"improved code navigation in Compose preview in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiwSmB7STl5l6FEY0WDKkFwy-uVfJd7_PoeWJVm-PO2BF9gPziYe96njoxbzmep55ZAHFhzrS1gkIeOhUi0Vl5ZDrLj5WMpqH-5j-SqaoNVAYJKnPjaTIiqUxCkO14m0UWeAm7xJWVngvQP5OzKhYeBXQUy9N03-PBNZ4d2xDr2525v-F2uHy71SQcRxls/s16000/compose-preview-improved-code-navigation.gif\" /></div><center><em>Compose preview: Improved code navigation</em></center><br />\n\n\n<div style=\"text-align: center;\"><img alt=\"Compose preview picker in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEikCYjwiRSNc8KEqF59ATc4qFuvHYQyGg90vP3R0Jhp4wXH8vNp9054D7YyQGBKmjABEkK0HIgN05qqUTg2ABlyI9E0VMChS3TZNpB1_9GaLlGKsso0OP7knfcwbavp2SZzFGuczzUmpL3t1yCWA9i18JOvz22qNpmVyQ0k6KNy2hz280358BTdGt0KSWk/s1600/compose-preview-picker.png\" width=\"50%\" /></div><center><em>Compose preview picker</em></center>\n\n\n<h3><span style=\"font-size: large;\">K2 mode by default</span></h3>\n\n<p>Android Studio now uses the K2 Kotlin compiler by default. This next-generation compiler brings significant performance improvements to the IDE and your builds. By enabling K2, we are paving the way for future Kotlin programming language features and an even faster, more robust development experience in Kotlin.</p>\n\n<div style=\"text-align: center;\"><img alt=\"K2 mode setting in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjOqtO6w01uoFS76Xl6oPO2pG6LYpaDP6iO5IfZ2owCmAM3u-Pip934xGQAAQsvS8_rOHVw8i57IwHmDxVvH3mDXf40qS3NtY-2VglhrPx2DdmwxNv5Gy7zv8h_dYlEgvNk6hfGqadqf9hyphenhyphenqjiNt7RFclD5IVkKm-5We1UK9xNdmS6LvLurePErBAeT0QU/s16000/k2-mode-setting-android-studio.png\" /></div><center><em>K2 mode setting</em></center>\n\n<h3><span style=\"font-size: large;\">16 KB page size support</span></h3>\n\n<p>To help you prepare for the future of Android hardware, this release adds improved support for <a href=\"https://android-developers.googleblog.com/2025/07/transition-to-16-kb-page-sizes-android-apps-games-android-studio.html\" target=\"_blank\">transitioning to 16 KB page sizes</a>. Android Studio now offers proactive warnings when building apps that are incompatible with 16 KB devices. You can use the APK Analyzer to identify which specific libraries in your project are incompatible. Lint checks also highlight the native libraries which are not 16 KB aligned. To test your app in this new environment, a dedicated 16 KB emulator target is also available in the AVD Manager.</p>\n\n\n<div style=\"text-align: center;\"><img alt=\"16 KB page size support: APK Analyzer indication\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEggMbM58ug9j1hMWqYiWagSzUeeq07eiznHMmBHeGyScEFPefqQuIPgf0mmouWRq3QU1UROnieNfdQeB-Bl2RyqpyVdoEfmONLLjzuHUW3r6fb0B9hh6ghl0JTg9aNIkQRTep3ZsjROrkgubmMijcbFh4XMRSFa_mxQ67ipq_lwOilFrzgnvIMAKOgqqS4/s1600/16-kb-page-support-apk-analyzer-indication.png\" /></div><center><em>16 KB page size support: APK Analyzer indication</em></center><br />\n\n\n<div style=\"text-align: center;\"><img alt=\"16 KB page size support: APK Analyzer indication\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh_8WMhidEM-OpYkG8u72KwOTVrEMhAjGN53iZkz0jJASAaOlBGRItkfXQL4MiNIpjYDGi7S4GooUGW3T08Fj7Z2LersLnj3eeOLcqu0Rx35Fkgz-sMklXG3Td9_H4NXvdumex92eaiYzwt2jPATG5EellLSMFPBv57eQyCcJyNu4mzGJ1_h8NpEUhrScI/s1600/16-KB-page-size-support-lint-checks.png\" /></div><center><em>16 KB page size support: Lint checks</em></center>\n\n<h3><span style=\"font-size: large;\">Services compatibility policy</span></h3>\n\n<p>Android Studio offers <a href=\"https://developer.android.com/studio/services\" target=\"_blank\">service integrations</a> that help you and your team make faster progress as you develop, release, and maintain Android apps. Services are constantly evolving and may become incompatible with older versions of Android Studio. Therefore, we are introducing a policy where features that depend on a Google Cloud service are supported for approximately a year in each version of Android Studio. The IDE will notify you when the current version is within 30 days of becoming incompatible so you can update it.</p>\n\n<div style=\"text-align: center;\"><img alt=\"Example notification for services compatibility policy in Android Studio\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiTQ2OHKs-vVYRVy-6Xgyy8rcTfcMBvc62KQ7V9sfIoe_pJyDKyFakXn_GiXOl6iRwTRJSorE3qdBSoT6z2-_91h0MvBSDI37I1PfA0lyYJ0DtVPnoqe8l_xb3oPbwN66bwMJgVBQC-xLLWddlWw7DeCK5iUoRK5_HsAiyBnKXxiWl049wXDPFvKqvljuQ/s16000/example-notification-for-services-compatibility-policy.png\" width=\"60%\" /></div><center><em>Example notification for services compatibility policy </em></center>\n\n<h2><span style=\"font-size: x-large;\">Summary</span></h2>\n\n<p>To recap, Android Studio Narwhal Feature Drop includes the following enhancements and features:</p>\n\n<b>Develop with Gemini</b>\n<ul><ul>\n<li><b><i>Gemini in Android Studio</i>: agent mode:</b> use Gemini for tackling complex, multi-step coding tasks.</li>\n<li><b><i>Rules in Prompt Library</i>:</b> Customize Gemini's output for your project's standards.</li>\n<li><b><i>Transform preview with Gemini [Studio Labs]</i>:</b> Use natural language to iterate on Compose UI.</li>\n</ul></ul><br />\n  \n<b>Immersive development</b>\n<ul><ul>\n<li><b><i>Embedded XR Android Emulator</i>:</b> Test and debug XR apps directly within the IDE.</li>\n<li><b><i>XR template</i>:</b> A new project template to kickstart XR development.</li>\n<li><b><i>Embedded Layout Inspector for XR</i>:</b> Debug and optimize your UI in an XR environment.</li>\n<li><b><i>Android Partner Device Labs available with Android Device Streaming</i>:</b> access more Google OEM partner devices.</li>\n</ul></ul><br />\n\n<b>Optimize and refine</b>\n<ul><ul>\n<li><b><i>Compose preview improvements</i>:</b> Better navigation and a new picker for a smoother workflow.</li>\n<li><b><i>K2 mode by default</i>:</b> Faster performance with the next-gen Kotlin compiler.</li>\n<li><b><i>16KB page size support</i>:</b> Lint warnings, analysis, and an emulator to prepare for new devices.</li>\n<li><b><i>Services compatibility policy</i>:</b> Stay up-to-date for access to integrated Google services.</li>\n</ul></ul>\n\n<h2><span style=\"font-size: x-large;\">Get started</span></h2>\n\n<p>Ready to accelerate your development? <a href=\"https://developer.android.com/studio\" target=\"_blank\">Download Android Studio Narwhal Feature Drop</a> and start exploring these powerful new features today! As always, your feedback is crucial to us.</p>\n\n<p><a href=\"https://developer.android.com/studio/known-issues\" target=\"_blank\">Check known issues</a>, <a href=\"https://developer.android.com/studio/report-bugs\" target=\"_blank\">report bugs</a>, <a href=\"https://developer.android.com/studio/report-bugs\" target=\"_blank\">suggest improvements</a>, and be part of our vibrant community on <a href=\"https://www.linkedin.com/showcase/androiddev/posts/?feedView=all\" target=\"_blank\">LinkedIn</a> <a href=\"https://medium.com/androiddevelopers\" target=\"_blank\">Medium</a>, <a href=\"https://www.youtube.com/c/AndroidDevelopers/videos\" target=\"_blank\">YouTube</a>, or <a href=\"https://twitter.com/androidstudio\" target=\"_blank\">X</a>. Let's build the future of Android apps together!</p>",
    "published": "2025-07-31T10:30:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  },
  {
    "title": "#WeArePlay: 10 million downloads and counting, meet app and game founders from across the U.S.",
    "link": "https://android-developers.googleblog.com/2025/07/weareplay-app-game-founders-across-the-us.html",
    "description": "<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEju1CCQW-tDhzvcq9_yWPv6MCT9LgnhWVX-kLWqLH0nf0AKuXHnNDZGUAcR7UTo8CtcU7Ffg8eFN0bCCRlfpPHQ7pxSHNdlAT9WmFIq5yq8d2YW8uWTxS1VAxitANwTJU4gxMbxsQiWAgY1ZnI8GH_UKFbTJb735U-9gVFQzjGfrwuOcJlHM6BKXgQwEJU/s1600/WeArePlay-USA-Social.png\" style=\"display: none;\" />\n\n<em>Posted by Robbie McLachlan, Developer Marketing</em>\n  \n  <a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5yKBvGa0SBiOqlRUDDD4X-SODElpjcJPi8vKnnEMS2hboIzF0uc0cK8zRFljuyccVdHGdOFp2CLviCcLZSpqNWqx6q4DhuHBjrEcl25TyB4vCdnur3L2vJgHCAv8Uv095rhc1xTcH7RPjxjEXxt3ZreVI-DhVnEvkrhRx6O5Iqd39L79p4Ug-MW3BxZY/s1600/US_Blog_HeaderImage_1200x600px.jpg\"><img border=\"0\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5yKBvGa0SBiOqlRUDDD4X-SODElpjcJPi8vKnnEMS2hboIzF0uc0cK8zRFljuyccVdHGdOFp2CLviCcLZSpqNWqx6q4DhuHBjrEcl25TyB4vCdnur3L2vJgHCAv8Uv095rhc1xTcH7RPjxjEXxt3ZreVI-DhVnEvkrhRx6O5Iqd39L79p4Ug-MW3BxZY/s1600/US_Blog_HeaderImage_1200x600px.jpg\" /></a>\n\n<p>They saw a problem and built the answer. Meet 20 #WeArePlay founders from across the U.S. who started their entrepreneurial journey with a question like: what if reading was no longer a barrier for anyone? What if an app could connect neighbors to fight local hunger? What if fitness or self-care could feel as engaging as playing a game?</p>\n\n<p>These new stories showcase how innovation often starts with finding the answer to a personal problem. Here are just a few of our favorites:</p>\n\n<h3><span style=\"font-size: x-large;\">Cliff’s app Speechify makes the written word accessible to all</span></h3>\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"Headshot of Cliff, founder of Speechify, Miami, Florida\" border=\"0\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEijZUE4DPevyuuRfUWV6g2q5mxgD8_be8vHBQE1pETtFvP_yvtzVf3Tyb7h-M0pCZIe0gvIhaJ2ijvmS9w_pbGTkPZ24T59roXn-VcDz8IXbbQa1GoaPK-jUG7QzX2TzeXkYHXSomz-iXtwXTGHhXLSRPJ3MdMNk429wtkmd-r6DuAPoXDEp_sGrOE9N08/s16000/01_SPEECHIFY_FOUNDER_CLIFF%20WEITZMAN.jpeg\" /></a></div><center><em>Cliff, founder of Speechify</em></center><center><em>Miami, Florida</em></center><br />\n\n<p>Growing up with dyslexia, Cliff always wished he could enjoy books but found reading them challenging. After moving to the U.S., the then college student turned that personal challenge into a solution for millions. His app, <a href=\"https://play.google.com/store/apps/details?id=com.cliffweitzman.speechify2&amp;gl=us\" target=\"_blank\">Speechify</a>, empowers people by turning any text—from PDFs to web pages—into audio. By making the written word accessible to all, Cliff’s innovation gives students, professionals, and auditory learners a new kind of independence.</p>\n\n\n<h3><span style=\"font-size: x-large;\">Jenny’s game Run Legends turns everyday fitness into a social adventure</span></h3>\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"Headshot of Jenny, founder of Tofala Games, San Francisco, California\" border=\"0\" height=\"640\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgPattlyuXjW-p8-JJDVLp8i-ZkcT8sGO5acgLPZIod66pL6A3cSxpQ2pRoLOAwHjwePNVZtJCaneWqsctDa4hC06woMX4zRVmcZZwhb5NAWCkuastWtd1cVFcSJnqv_GfIpnx3Ce_riiug6C6tPvqlnK9MqA2dywSPtuhibCNo9pm0ktfQsQ53aBJhEog/w427-h640/01_USA_TALOFA%20GAMES_FOUNDER_JENNY%20XU.jpeg\" width=\"427\" /></a></div><center><em>Jenny, founder of Talofa Games </em></center><center><em>San Francisco, California</em></center><br />\n\n<p>As a teen, Jenny funded her computer science studies by teaching herself to code and publishing over 100 games. A passionate cross-country runner, she wanted to combine her love for gaming and fitness to make exercise feel more like an adventure. The result is <a href=\"https://play.google.com/store/apps/details?id=com.talofagames.abra&amp;gl=us\" target=\"_blank\">Run Legends</a>, a multiplayer RPG where players battle monsters by moving in real life. Jenny’s on a mission to blend all types of exercise with playful storytelling, turning everyday fitness into a fun, social, and heroic quest.</p>\n\n<h3><span style=\"font-size: x-large;\">Nino and Stephanie’s app Finch makes self-care a rewarding daily habit</span></h3>\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"Headshot of Nino and Stephanie, co-founders of Finch, Santa Clara, California\" border=\"0\" height=\"573\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9rMAnYhIr4MoPRKFCF585h96gsg241o6WtSamIsG2qPEM85rQ6xKRtHqf6We-NFiq7Ww6W5F_H1vEpaDeCfvUTO1cF0vPLhXOKbX6fIfvlJqAL00lbIfiQ4KzYY6T_AQ4NR7a-oFSeckWOIWQkwaVSN34DwEXGgl2Qvu-Hc7xSbyaRF5Zj5Uk2x_VqH8/w640-h573/01_USA_FINCH%20CARE_FOUNDERS_STEPHANIE%20YUAN_NINO%20AQUINAS_edited.png\" width=\"640\" /></a></div><center><em>Nino and Stephanie, co-founders of Finch</em></center><center><em>Santa Clara, California</em></center><br />\n\n<p>As engineers, Nino and Stephanie knew the power of technology but found the world of self-care apps overwhelming. Inspired by their own mental health journeys and a gamified app Stephanie built in college, they created <a href=\"https://play.google.com/store/apps/details?id=com.finch.finch&amp;hl=en_GB&amp;gl=us\" target=\"_blank\">Finch</a>. The app introduces a fresh take on the virtual pet: by completing small, positive actions for yourself, like journaling or practicing breathing exercises, you care for your digital companion. With over 10 million downloads, Finch has helped people around the world build healthier habits. With seasonal events every month and growing personalization, the app continues to evolve to make self-care more fun and rewarding.</p>\n\n<h3><span style=\"font-size: x-large;\">John’s app The HungreeApp connects communities to fight hunger</span></h3>\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"Headshot of John, founder of The HungreeApp, Denver, Colorado\" border=\"0\" height=\"608\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhRHFtmrADY_iM5-H13JtwjVzPuBVg3eLrj1FIu4nuOb6UXyNS_84vdhSb7QsNwiUx1j6rXsoEG726hiB34oZUF6QUkaaUAyls5Ba-_MwwnbIkWGUhsN3VDW0bxfnc-kjpmWShFRmCB1T_tKKgb432juljBPG2WcmxE5q7VlUCFIRyiNjwen5pevIiZHGA/w640-h608/01_USA_THE%20HUNGREEAPP_FOUNDER_JOHN%20AKINBOYEWA_edited.png\" width=\"640\" /></a></div><center><em>John, founder of The HungreeApp</em></center><center><em>Denver, Colorado</em></center><br />\n\n<p>John began coding as a nine-year-old in Nigeria, sometimes with just a pen and paper. After moving to the U.S., he was struck by how much food from events was wasted while people nearby went hungry. That spark led him to create The <a href=\"https://play.google.com/store/apps/details?id=com.hungreeapp.android&amp;hl=en-US&amp;gl=us\" target=\"_blank\">HungreeApp</a>, a platform that connects communities with free, surplus food from businesses and restaurants. John’s ingenuity turns waste into opportunity, creating a more connected and resourceful nation, one meal at a time.</p>\n\n<h3><span style=\"font-size: x-large;\">Anthony’s game studio Tech Tree Games turns a passion for idle games into cosmic adventures for aspiring tycoons</span></h3>\n\n<div style=\"text-align: center;\"><a href=\"http://g.co/play/weareplay\" target=\"_blank\"><img alt=\"Headshot of Anthony, founder of Tech Tree Games, Austin, Texas\" border=\"0\" height=\"354\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgHGDKF1OqLMw4zhz3wBW2tP0ZfxTgoBv7pyGh910obIwVcmcmaNc1Nt99kgeCMakEcL-fSCfC8jYfKsFMY0akTkz_NijfUsCgn6WyYL0cL-pME3-UiRo6094MMB7mQ7-mkHlyJkgNUz7EkWPGXNuGW1QPzYP39KSNRMCZ6__Hhd_w9ol_od1ejcvz9ygk/w640-h354/01_USA_TECH%20TREE%20GAMES_FOUNDER_ANTHONY%20TIRONE_edited.png\" width=\"640\" /></a></div><center><em>Anthony, founder of Tech Tree Games</em></center><center><em>Austin, Texas</em></center><br />\n\n<p>While working as a chemical engineer, Anthony dreamed of creating an idle game like the ones he loved to play, leading him to teach himself how to code from scratch. This passion project turned into his studio <a href=\"https://play.google.com/store/apps/dev?id=6984226324744477705&amp;gl=us\" target=\"_blank\">Tech Tree Games</a> and the hit title <a href=\"https://play.google.com/store/apps/details?id=com.TironiumTech.IdlePlanetMiner&amp;gl=us\" target=\"_blank\">Idle Planet Miner</a>, where players grow a space mining empire filled with mystical planets and alluring gems. After releasing a 2.0 update with enhanced visuals for the game, Anthony is back in prototyping mode with new titles in the pipeline.</p><br />\n\n<p>Discover more <a href=\"https://play.google.com/console/about/weareplay/\" target=\"_blank\">#WeArePlay</a> stories from the US and stories from across the globe.</p>\n\n<div><br /><br /></div>\n\n<div style=\"text-align: center;\"><img alt=\"Google Play logo\" border=\"0\" height=\"41\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxnvf5XzyebGljqgi8J7by9XsvaL5WWLNamSyTg4w_c0kPHjY1B1no1FQsdSfUHUwNw0UuYfXuo6i7K6VpdyV2-K8ms4VFmZA438ujm6qwtZMt5rJfMGymhQ_iCX2Z8h0MuJo7gXUQ4Hb-hjKYK1isibMZZxCyX_vo3kGoP5tieK2PI2ZhYdGh4gsqhwA/w200-h41/lockup_ic_Google_Play_H_260x53px_clr.png\" width=\"200\" /></div>",
    "published": "2025-07-24T09:00:00.000-07:00",
    "published_timestamp": 0,
    "feed_name": "Android Developers Blog"
  }
]